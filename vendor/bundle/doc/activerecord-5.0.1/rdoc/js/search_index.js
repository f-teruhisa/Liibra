var search_data = {"index":{"searchIndex":["activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationnotfounderror","associationrelation","associationtypemismatch","associations","aliastracker","association","associationscope","reflectionproxy","belongstoassociation","belongstopolymorphicassociation","builder","association","belongsto","collectionassociation","hasandbelongstomany","jointableresolver","knownclass","hasmany","hasone","singularassociation","classmethods","collectionassociation","collectionproxy","foreignassociation","hasmanyassociation","hasmanythroughassociation","hasoneassociation","hasonethroughassociation","joindependency","aliases","table","joinassociation","joinbase","joinpart","preloader","alreadyloaded","association","belongsto","collectionassociation","hasmany","hasmanythrough","hasone","hasonethrough","nullpreloader","singularassociation","throughassociation","singularassociation","throughassociation","attribute","fromdatabase","fromuser","null","uninitialized","userprovideddefault","withcastvalue","attributeassignment","attributeassignmenterror","attributedecorators","classmethods","typedecorator","attributemethods","beforetypecast","classmethods","dirty","generatedattributemethods","primarykey","classmethods","query","read","classmethods","serialization","classmethods","timezoneconversion","classmethods","timezoneconverter","write","classmethods","attributemutationtracker","attributeset","builder","attributes","classmethods","autosaveassociation","associationbuilderextension","classmethods","base","batches","batchenumerator","calculations","callbacks","classmethods","coders","json","yamlcolumn","collectioncachekey","concurrentmigrationerror","configurationerror","connectionadapters","abstractadapter","bindcollector","sqlstring","schemacreation","version","abstractmysqladapter","statementpool","addcolumndefinition","altertable","changecolumndefinition","column","columndefinition","columndumper","columnmethods","connectionhandler","connectionpool","biasablequeue","biasedconditionvariable","connectionleasingqueue","queue","reaper","connectionspecification","connectionurlresolver","resolver","databaselimits","databasestatements","determineifpreparablevisitor","foreignkeydefinition","indexdefinition","mysql","column","columndefinition","columndumper","columnmethods","databasestatements","explainprettyprinter","quoting","schemacreation","table","tabledefinition","typemetadata","mysql2adapter","mysqljson","mysqlstring","nullcolumn","nulltransaction","postgresql","columndefinition","columndumper","columnmethods","databasestatements","explainprettyprinter","name","oid","array","bit","data","bitvarying","bytea","cidr","datetime","decimal","enum","hstore","inet","json","jsonb","money","point","rails51point","range","specializedstring","typemapinitializer","uuid","vector","xml","data","quoting","referentialintegrity","schemacreation","schemastatements","table","tabledefinition","utils","postgresqladapter","oid","statementpool","postgresqlcolumn","postgresqltypemetadata","primarykeydefinition","querycache","connectionpoolconfiguration","quoting","realtransaction","referencedefinition","sqlite3","explainprettyprinter","quoting","schemacreation","sqlite3adapter","statementpool","savepointtransaction","savepoints","schemacache","schemastatements","sqltypemetadata","statementpool","table","tabledefinition","transaction","transactionmanager","transactionstate","type","connectionhandling","mergeandresolvedefaulturlconfig","connectionnotestablished","connectiontimeouterror","core","classmethods","countercache","classmethods","dangerousattributeerror","delegation","classmethods","classspecificrelation","classmethods","delegatecache","deleterestrictionerror","duplicatemigrationnameerror","duplicatemigrationversionerror","dynamicmatchers","findby","findbybang","method","eagerloadpolymorphicerror","enum","enumtype","environmentmismatcherror","exclusiveconnectiontimeouterror","explain","explainregistry","explainsubscriber","activesupport","findermethods","fixture","fixtureerror","formaterror","fixtureclassnotfound","fixtureset","classcache","file","hasmanythroughproxy","reflectionproxy","rendercontext","generators","base","migration","classmethods","migrationgenerator","modelgenerator","hasmanythroughassociationnotfounderror","hasmanythroughassociationpointlesssourcetypeerror","hasmanythroughassociationpolymorphicsourceerror","hasmanythroughassociationpolymorphicthrougherror","hasmanythroughcantassociatenewrecords","hasmanythroughcantassociatethroughhasoneormanyreflection","hasmanythroughcantdissociatenewrecords","hasmanythroughnestedassociationsarereadonly","hasmanythroughsourceassociationnotfounderror","hasoneassociationpolymorphicthrougherror","hasonethroughcantassociatethroughcollection","hasonethroughcantassociatethroughhasoneormanyreflection","hasonethroughnestedassociationsarereadonly","illegalmigrationnameerror","immutablerelation","inheritance","classmethods","integration","classmethods","internalmetadata","invalidforeignkey","inverseofassociationnotfounderror","irreversiblemigration","irreversibleordererror","lazyattributehash","legacyyamladapter","rails41","rails420","locking","lockingtype","optimistic","classmethods","pessimistic","logsubscriber","migration","checkpending","commandrecorder","straightreversions","compatibility","fourtwoshared","tabledefinition","t","legacy","v4_2","current","jointable","reversibleblockhelper","v5_0","migrationerror","migrationproxy","migrator","modelschema","classmethods","multiparameterassignmenterrors","nestedattributes","classmethods","toomanyrecords","nodatabaseerror","noenvironmentinschemaerror","notouching","classmethods","nullmigration","nullmutationtracker","nullrelation","pendingmigrationerror","persistence","classmethods","predicatebuilder","arrayhandler","nullpredicate","associationqueryhandler","associationqueryvalue","basehandler","basicobjecthandler","classhandler","polymorphicarrayhandler","polymorphicarrayvalue","rangehandler","relationhandler","preparedstatementcacheexpired","preparedstatementinvalid","protectedenvironmenterror","querycache","classmethods","querymethods","wherechain","querying","railtie","actiondispatch","activesupport","rails","railties","controllerruntime","classmethods","readonlyassociation","readonlyrecord","readonlyattributes","classmethods","recordinvalid","recordnotdestroyed","recordnotfound","recordnotsaved","recordnotunique","reflection","abstractreflection","aggregatereflection","associationreflection","belongstoreflection","classmethods","hasandbelongstomanyreflection","hasmanyreflection","hasonereflection","macroreflection","polymorphicreflection","runtimereflection","throughreflection","relation","fromclause","hashmerger","merger","queryattribute","recordfetchwarning","activesupport","queryregistry","whereclause","whereclausefactory","result","rollback","runtimeregistry","sanitization","classmethods","schema","schemadumper","schemamigration","scoping","classmethods","default","classmethods","named","classmethods","scoperegistry","securetoken","classmethods","serialization","serializationtypemismatch","spawnmethods","staleobjecterror","statementcache","bindmap","params","partialquery","query","substitute","statementinvalid","store","classmethods","hashaccessor","indifferentcoder","indifferenthashaccessor","stringkeyedhashaccessor","subclassnotfound","suppressor","classmethods","suppressorregistry","tablemetadata","tasks","databasealreadyexists","databasenotsupported","databasetasks","mysqldatabasetasks","postgresqldatabasetasks","sqlitedatabasetasks","testfixtures","classmethods","throughcantassociatethroughhasoneormanyreflection","throughnestedassociationsarereadonly","timestamp","touchlater","transactionisolationerror","transactions","classmethods","translation","type","adapterspecificregistry","date","datetime","decorationregistration","hashlookuptypemap","internal","abstractjson","timezone","registration","serialized","time","value","typemap","typecaster","connection","map","typeconflicterror","unknownmigrationversionerror","unknownprimarykey","version","validations","absencevalidator","associatedvalidator","classmethods","lengthvalidator","presencevalidator","uniquenessvalidator","valuetoolong","wrappeddatabaseexception","arjdbcmysql","error","arel","mysql2","<<()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","===()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","_create_record()","_create_record()","_create_record()","_ensure_no_duplicate_errors()","_enum_methods_module()","_quote()","_quote()","_raise_record_not_destroyed()","_read_attribute()","_type_cast()","_type_cast()","_update_record()","_update_record()","abstract_class?()","accept()","accepts_nested_attributes_for()","accessed_fields()","acquire_connection()","act_on_order_or_limit_ignored()","active?()","active?()","active?()","active?()","active_connection?()","active_connections?()","adapter_name()","add()","add()","add_belongs_to()","add_column()","add_column_options!()","add_column_options!()","add_column_options!()","add_column_position!()","add_column_sql()","add_foreign_key()","add_index()","add_index_length()","add_index_sort_order()","add_index_sql()","add_join_records()","add_options_for_index_columns()","add_options_for_index_columns()","add_pg_decoders()","add_pg_encoders()","add_reference()","add_table_options!()","add_timestamps()","add_timestamps_sql()","add_transaction_record()","adopt_connection()","after_commit()","after_create_commit()","after_destroy_commit()","after_rollback()","after_update_commit()","aggregate_column()","aliased_types()","all()","all_timestamp_attributes()","all_timestamp_attributes_in_model()","allocate()","allowed_index_name_length()","allowed_index_name_length()","announce()","any?()","any?()","any?()","any_waiting?()","append()","apply_join_dependency()","apply_limits()","arel_attributes_with_values()","arel_columns()","assert_mutability!()","assert_valid_transaction_action()","assign_multiparameter_attributes()","assign_nested_parameter_attributes()","associated_records_to_validate_or_save()","association_for_table()","association_valid?()","assume_migrated_upto_version()","attempt_to_checkout_all_existing_connections()","attr_readonly()","attribute()","attribute()","attribute=()","attribute?()","attribute_before_type_cast()","attribute_came_from_user?()","attribute_for_inspect()","attribute_method?()","attribute_method?()","attribute_names()","attribute_names()","attribute_present?()","attributes()","attributes=()","attributes_before_type_cast()","attributes_for_create()","attributes_for_hash()","attributes_for_update()","attributes_hash()","autosave=()","average()","base_class()","basename()","batch_order()","becomes()","becomes!()","before_save_collection_association()","begin_db_transaction()","begin_db_transaction()","begin_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","belongs_to()","belongs_to()","belongs_to()","belongs_to_touch_method()","belongs_to_touch_method()","bigserial()","binary?()","bit()","bit_varying()","blank?()","blob()","body()","bound_attributes()","box()","build()","build()","build()","build_arel()","build_count_subquery()","build_from()","build_join_query()","build_joins()","build_left_outer_joins()","build_order()","build_preloader()","build_select()","bulk_make_new_connections()","cache()","cache()","cache_fixtures()","cache_for_connection()","cache_key()","cache_key()","cache_sql()","cached_fixtures()","calculate()","calculate()","call()","can_perform_case_insensitive_comparison_for?()","can_perform_case_insensitive_comparison_for?()","can_perform_case_insensitive_comparison_for?()","can_remove_index_by_name?()","can_remove_no_wait?()","case_insensitive_comparison()","case_sensitive_comparison()","case_sensitive_comparison()","change()","change_column()","change_column_default()","change_column_null()","change_column_sql()","change_default()","change_table()","change_table_comment()","changed_for_autosave?()","charset()","charset()","charset_current()","check_if_method_has_arguments!()","check_pending!()","check_protected_environments!()","check_schema_file()","checkin()","checkout()","checkout_and_verify()","checkout_for_exclusive_access()","checkout_new_connection()","cidr()","circle()","citext()","class_for_adapter()","clear()","clear()","clear!()","clear_active_connections!()","clear_all_connections!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_data_source_cache!()","clear_query_cache()","clear_reloadable_connections()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_table_cache!()","clear_timestamp_attributes()","client_min_messages()","client_min_messages=()","clone()","close()","collation()","collation()","collation()","collation_current()","collector()","colorize_payload_name()","column()","column()","column_alias_for()","column_defaults()","column_exists?()","column_exists?()","column_for_attribute()","column_name_length()","column_names()","column_names()","column_options()","column_options()","column_spec()","column_spec_for_primary_key()","column_spec_for_primary_key()","column_spec_for_primary_key()","column_type()","columns()","columns()","columns()","columns()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","commit()","commit()","commit_db_transaction()","commit_db_transaction()","committed?()","compile()","compile()","complete()","completed?()","composed_of()","compute_class()","compute_table_name()","compute_type()","concat()","configurations()","configurations=()","configure_connection()","configure_connection()","configure_connection()","configure_query_cache!()","connect()","connect()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection()","connection_active?()","connection_cache_key()","connection_config()","connection_handler()","connection_handler()","connection_handler=()","connection_id()","connection_id=()","connection_pool()","connection_pool_list()","connection_pools()","connection_specification_name()","construct_coder()","construct_join_dependency()","construct_relation_for_association_calculations()","content_columns()","context_class()","convert()","convert()","convert()","convert_join_strings_to_ast()","copy()","count()","count()","count_by_sql()","create()","create()","create()","create()","create()","create()","create!()","create!()","create!()","create!()","create_all()","create_alter_table()","create_column_definition()","create_column_definition()","create_column_definition()","create_current()","create_database()","create_database()","create_fixtures()","create_join_table()","create_or_update()","create_savepoint()","create_schema()","create_table()","create_table_definition()","create_time_zone_conversion_attribute?()","create_with()","ctype()","current_adapter_name()","current_config()","current_database()","current_database()","current_savepoint_name()","current_schema()","current_time_from_proper_timezone()","current_version()","custom_inspect_method_defined?()","dangerous_attribute_method?()","dangerous_class_method?()","data_source_exists?()","data_source_exists?()","data_source_exists?()","data_source_exists?()","data_source_exists?()","data_sources()","data_sources()","data_sources()","data_sources()","data_sources()","daterange()","db_dir()","dealloc()","dealloc()","decrement()","decrement!()","decrement_counter()","default_fixture_model()","default_primary_key?()","default_primary_key?()","default_primary_key?()","default_scope()","default_timezone()","default_validation_context()","define()","define()","define_attribute()","define_default_attribute()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","delete()","delete()","delete()","delete()","delete()","delete_all()","delete_all()","delete_sql()","derive_class_name()","descends_from_active_record?()","destroy()","destroy()","destroy()","destroy!()","destroy_all()","destroy_all()","destroy_associations()","destroy_row()","destroy_row()","destroy_row()","destroyed?()","destroyed_by_association()","destroyed_by_association=()","detect_enum_conflict!()","dirties_query_cache()","disable_ddl_transaction!()","disable_extension()","disable_extension()","disable_query_cache!()","disable_query_cache!()","disable_referential_integrity()","disconnect()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","discriminate_class_for_record()","discriminate_class_for_record()","distinct()","distinct()","does_not_support_reverse?()","down()","drop()","drop_all()","drop_current()","drop_join_table()","drop_schema()","drop_table()","drop_table()","dup()","each()","each()","each()","each_counter_cached_associations()","each_current_configuration()","each_local_configuration()","each_record()","eager_load()","eager_load!()","eager_loading?()","empty?()","empty?()","empty?()","empty_insert_statement_value()","emulate_booleans()","enable_extension()","enable_extension()","enable_query_cache!()","enable_query_cache!()","encode_with()","encode_with()","encoding()","encoding()","enlist_fixture_connections()","ensure_proper_type()","enum()","env()","eql?()","eql?()","error_number()","escape_bytea()","establish_connection()","establish_connection()","except()","exec_cache()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_insert()","exec_insert()","exec_migration()","exec_no_cache()","exec_queries()","exec_queries()","exec_queries()","exec_queries()","exec_query()","exec_query()","exec_query()","exec_query()","exec_rollback_db_transaction()","exec_rollback_to_savepoint()","exec_stmt_and_free()","exec_update()","exec_update()","exec_update()","exec_update()","execute()","execute()","execute()","execute()","execute_and_clear()","execute_block()","execute_callstack_for_multiparameter_attributes()","exists?()","expand_hash_conditions_for_aggregates()","expire()","explain()","explain()","explain()","explain()","extending()","extension_enabled?()","extensions()","extensions()","extract_callstack_for_multiparameter_attributes()","extract_new_default_value()","extract_precision()","fetch_type_metadata()","fetch_type_metadata()","fetch_type_metadata()","fifth()","fifth()","fifth!()","finalized?()","find()","find()","find_by()","find_by!()","find_by_sql()","find_each()","find_in_batches()","find_last()","find_nth()","find_nth!()","find_nth_from_last()","find_nth_with_limit()","find_one()","find_or_create_by()","find_or_create_by!()","find_or_initialize_by()","find_parameter_position()","find_some()","find_some_ordered()","find_sti_class()","find_take()","find_with_associations()","find_with_ids()","finder()","finder()","finder()","first()","first()","first()","first!()","fixture_is_cached?()","fixtures()","fixtures_path()","foreign_key_exists?()","foreign_keys()","foreign_keys()","foreign_keys()","forty_two()","forty_two()","forty_two!()","fourth()","fourth()","fourth!()","freeze()","from()","frozen?()","full_rollback?()","full_version()","gem_version()","generate_association_writer()","generate_unique_secure_token()","generated_association_methods()","group()","has_and_belongs_to_many()","has_attribute?()","has_attribute?()","has_defer_touch_attrs?()","has_include?()","has_many()","has_one()","has_primary_key_column?()","has_secure_token()","hash()","hash()","hash_rows()","having()","having_clause_factory()","hex?()","hstore()","id()","id=()","id?()","id_before_type_cast()","id_was()","identify()","ids()","ignored_columns()","ignored_columns=()","in_batches()","in_clause_length()","in_transaction?()","include?()","includes()","increment()","increment!()","increment_counter()","increment_lock()","index()","index()","index_algorithms()","index_algorithms()","index_algorithms()","index_exists?()","index_exists?()","index_in_create()","index_name_exists?()","index_name_exists?()","index_name_for_remove()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inet()","inheritance_column()","inheritance_column=()","inheritance_column_name()","inherited()","inherited()","init_internals()","init_with()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_dup()","initialize_internal_metadata_table()","initialize_internals_callback()","initialize_internals_callback()","initialize_schema_migrations_table()","insert()","insert_class()","insert_sql()","inspect()","inspect()","inspect()","install_executor_hooks()","instance_method_already_implemented?()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instantiate_fixtures()","int4range()","int8range()","internal_metadata_table_name()","internal_metadata_table_name=()","internal_poll()","inverse_of()","invert_add_foreign_key()","invert_add_index()","invert_change_column_default()","invert_change_column_null()","invert_drop_table()","invert_remove_column()","invert_remove_foreign_key()","invert_remove_index()","invert_rename_column()","invert_rename_index()","invert_rename_table()","is_cached_plan_failure?()","is_utc?()","joined_includes_values()","joins()","joins_per_query()","json()","json()","jsonb()","klass()","klasses()","last()","last()","last()","last!()","last_inserted_id()","last_inserted_id()","lease()","left_joins()","left_outer_joins()","length()","length()","limit()","limited_ids_for()","line()","load()","load_fixtures()","load_instances?()","load_migration()","load_records()","load_schema()","load_schema!()","load_schema_current()","load_schema_for()","load_schema_if_pending!()","load_seed()","load_target()","loaded?()","local_database?()","lock()","lock!()","locked?()","locking_column()","locking_column=()","locking_enabled?()","log()","logger()","longblob()","longtext()","lseg()","ltree()","macaddr()","many?()","many?()","mark_for_destruction()","marked_for_destruction?()","marshal_dump()","marshal_load()","match()","max_updated_column_timestamp()","maximum()","mediumblob()","mediumtext()","merge()","method_missing()","method_missing()","migrate()","migrate()","migrate()","migration()","migration_keys()","migration_keys()","migration_keys()","migrations_paths()","minimum()","model_class=()","money()","mtime()","native_database_types()","native_database_types()","nested_records_changed_for_autosave?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_connection()","new_from_clause()","new_having_clause()","new_record?()","new_where_clause()","next_key()","next_migration_number()","next_migration_number()","next_sequence_value()","no_touching()","no_touching?()","no_wait_poll()","none()","none?()","normalize_reflection_attribute()","not()","null_scope?()","num_waiting()","numrange()","offset()","offset_index()","one?()","only()","operation_over_aggregate_column()","options_include_default?()","or()","order()","original_exception()","owner_to_pool()","path()","pattern()","perform_calculation()","persisted?()","pk_attribute?()","pluck()","pluck()","pluralize_table_names()","pluralize_table_names=()","point()","poll()","polygon()","pool_from_any_process_for()","postgresql_version()","prefetch_primary_key?()","prefetch_primary_key?()","prefix()","prefix()","prefix()","preload()","prepare_column_options()","prepare_column_options()","prepare_column_options()","prepare_data_sources()","prepare_statement()","prepend()","preprocess_order_args()","pretty_print()","pretty_print()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_key_name()","primary_key_prefix_type()","primary_key_prefix_type=()","primary_key_type()","primary_key_type()","primary_keys()","proper_table_name()","protected_environments()","protected_environments=()","proxy_association()","proxy_association()","purge()","purge_all()","purge_current()","push()","query_attribute()","query_cache_enabled()","quote()","quote_column_name()","quote_schema_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quoted_columns_for_index()","quoted_date()","quoted_false()","quoted_primary_key()","quoted_table_name()","quoted_true()","raise_conflict_error()","raise_in_transactional_callbacks()","raise_in_transactional_callbacks=()","raise_validation_error()","raw_connection()","read_attribute()","read_attribute_before_type_cast()","read_fixture_files()","read_store_attribute()","reader_method()","readonly()","readonly!()","readonly?()","readonly_attribute?()","readonly_attributes()","reap()","reconnect!()","reconnect!()","reconnect!()","record()","record_changed?()","recreate_database()","references()","references()","references()","references_eager_loaded_tables?()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","reflections()","register()","register_task()","relation_for_destroy()","relation_for_destroy()","release()","release_connection()","release_savepoint()","reload()","reload()","reload()","reload()","reload_schema_from_cache()","remove()","remove()","remove()","remove_belongs_to()","remove_belongs_to()","remove_column()","remove_column()","remove_column_sql()","remove_columns()","remove_columns_sql()","remove_connection()","remove_connection()","remove_connection_from_thread_cache()","remove_foreign_key()","remove_index()","remove_index()","remove_index_sql()","remove_reference()","remove_references()","remove_timestamps()","remove_timestamps()","remove_timestamps_sql()","rename()","rename_column()","rename_column_indexes()","rename_column_sql()","rename_index()","rename_index()","rename_index()","rename_index()","rename_table()","rename_table()","rename_table()","rename_table()","rename_table_indexes()","render_bind()","reorder()","replace()","requires_reloading?()","requires_reloading?()","reset()","reset()","reset!()","reset!()","reset!()","reset_cache()","reset_column_information()","reset_counters()","reset_locking_column()","reset_runtime()","respond_to?()","retrieve_connection()","retrieve_connection_pool()","reverse_order()","reverse_sql_order()","reversible()","revert()","revert()","reverting?()","rewhere()","rollback()","rollback()","rollback_db_transaction()","rolledback?()","root()","run()","run()","run()","run_in_transaction?()","runtime()","runtime=()","sanitize_conditions()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_for_order()","sanitize_sql_hash_for_assignment()","sanitize_sql_like()","save()","save()","save!()","save!()","save_belongs_to_association()","save_collection_association()","save_has_one_association()","say()","say_with_time()","schema_cache=()","schema_collation()","schema_collation()","schema_creation()","schema_default()","schema_exists?()","schema_expression()","schema_expression()","schema_file()","schema_limit()","schema_loaded?()","schema_migrations_table_name()","schema_migrations_table_name=()","schema_names()","schema_precision()","schema_precision()","schema_scale()","schema_search_path()","schema_search_path=()","schema_type()","schema_type()","schema_type()","scope()","scope()","scope_for()","scope_for_create()","scoping()","scoping()","second()","second()","second!()","second_to_last()","second_to_last()","second_to_last!()","seed_loader()","select()","select()","select_all()","select_all()","select_all()","select_for_count()","select_one()","select_result()","select_rows()","select_rows()","select_rows()","select_value()","select_value()","select_values()","select_values()","sequence_name()","sequence_name=()","serial()","serial_sequence()","serializable_hash()","serialize()","serialize()","session_auth=()","set_fixture_class()","set_options_for_callbacks!()","set_standard_conforming_strings()","set_state()","setup_fixture_accessors()","setup_fixtures()","should_record_timestamps?()","show_variable()","signature()","size()","size()","size()","size()","slice()","spawn()","sql()","sql_color()","sql_key()","sql_query_length()","sql_type()","sqlite_version()","sti_name()","store()","store_accessor()","store_accessor_for()","stored_attributes()","strict_mode?()","string_containing_comma?()","structurally_incompatible_values_for_or()","structure_dump()","structure_load()","subclass_from_attributes()","subquery_for()","suffix()","suffix()","sum()","supports_advisory_locks?()","supports_advisory_locks?()","supports_advisory_locks?()","supports_bulk_alter?()","supports_comments?()","supports_comments?()","supports_comments?()","supports_comments_in_create?()","supports_comments_in_create?()","supports_datetime_with_precision?()","supports_datetime_with_precision?()","supports_datetime_with_precision?()","supports_datetime_with_precision?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_expression_index?()","supports_expression_index?()","supports_extensions?()","supports_extensions?()","supports_foreign_keys?()","supports_foreign_keys?()","supports_foreign_keys?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_indexes_in_create?()","supports_indexes_in_create?()","supports_json?()","supports_json?()","supports_json?()","supports_materialized_views?()","supports_migrations?()","supports_migrations?()","supports_migrations?()","supports_multi_insert?()","supports_multi_insert?()","supports_partial_index?()","supports_partial_index?()","supports_partial_index?()","supports_primary_key?()","supports_primary_key?()","supports_ranges?()","supports_rename_index?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_views?()","supports_views?()","supports_views?()","supports_views?()","suppress()","suppress_composite_primary_key()","suppress_composite_primary_key()","suppress_messages()","surreptitiously_touch()","symbol_unscoping()","synchronize()","table_alias_for()","table_alias_length()","table_alias_length()","table_comment()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name=()","table_name_length()","table_name_prefix()","table_name_prefix=()","table_name_suffix()","table_name_suffix=()","table_options()","table_rows()","table_structure()","table_structure_with_collation()","tables()","tables()","tables()","tables_in_string()","take()","take()","take!()","target()","teardown_fixtures()","thaw()","third()","third()","third!()","third_to_last()","third_to_last()","third_to_last!()","timestamp_attributes_for_create()","timestamp_attributes_for_create_in_model()","timestamp_attributes_for_update()","timestamp_attributes_for_update_in_model()","timestamp_column_names()","timestamps()","timestamps()","tinyblob()","tinytext()","to_a()","to_a()","to_ary()","to_ary()","to_hash()","to_key()","to_param()","to_param()","to_s()","to_sql()","to_sql()","toggle()","toggle!()","touch()","touch_deferred_attributes()","transaction()","transaction()","transaction_isolation_levels()","transaction_open?()","transaction_state()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","translate_exception_class()","truncate()","truncate()","truncate()","try_to_checkout_new_connection()","tsrange()","tstzrange()","tsvector()","type_cast()","type_cast_attribute_value()","type_cast_calculated_value()","type_cast_config_to_boolean()","type_cast_config_to_integer()","type_condition()","type_for()","type_for_attribute()","type_to_sql()","type_to_sql()","typecasted_attribute_value()","types_which_need_no_typecasting()","uncached()","uncached()","undecorated_table_name()","unescape_bytea()","uniq()","uniq()","uniq_value()","unprepared_statement()","unquoted_false()","unquoted_true()","unscope()","unscoped()","unsigned_bigint()","unsigned_decimal()","unsigned_float()","unsigned_integer()","up()","update()","update()","update()","update!()","update_all()","update_attribute()","update_attributes()","update_attributes!()","update_column()","update_columns()","update_counters()","update_counters()","update_sql()","use_insert_returning?()","uses_transaction()","uses_transaction?()","using_limitable_reflections?()","using_single_table_inheritance?()","uuid()","valid?()","valid?()","valid_alter_table_type?()","valid_scope_name?()","valid_type?()","valid_type?()","valid_type?()","valid_type?()","validate()","validate_collection_association()","validate_order_args()","validate_single_association()","validates_absence_of()","validates_associated()","validates_length_of()","validates_presence_of()","validates_size_of()","validates_uniqueness_of()","values()","verify!()","verify_readonly_attribute()","version()","view_exists?()","views()","visit_addcolumndefinition()","visit_arel_nodes_in()","visit_arel_nodes_sqlliteral()","visit_changecolumndefinition()","visit_columndefinition()","visit_columndefinition()","visit_dropforeignkey()","wait_poll()","warn_if_deprecated_type()","where()","where_clause_factory()","where_values_hash()","with_connection()","with_exclusively_acquired_all_connections()","with_lock()","with_new_connections_blocked()","without_prepared_statement?()","write()","write_attribute()","write_attribute_with_type_cast()","write_store_attribute()","writer_method()","xml()","yaml_file_path()","readme","databases.rake"],"longSearchIndex":["activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationnotfounderror","activerecord::associationrelation","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::aliastracker","activerecord::associations::association","activerecord::associations::associationscope","activerecord::associations::associationscope::reflectionproxy","activerecord::associations::belongstoassociation","activerecord::associations::belongstopolymorphicassociation","activerecord::associations::builder","activerecord::associations::builder::association","activerecord::associations::builder::belongsto","activerecord::associations::builder::collectionassociation","activerecord::associations::builder::hasandbelongstomany","activerecord::associations::builder::hasandbelongstomany::jointableresolver","activerecord::associations::builder::hasandbelongstomany::jointableresolver::knownclass","activerecord::associations::builder::hasmany","activerecord::associations::builder::hasone","activerecord::associations::builder::singularassociation","activerecord::associations::classmethods","activerecord::associations::collectionassociation","activerecord::associations::collectionproxy","activerecord::associations::foreignassociation","activerecord::associations::hasmanyassociation","activerecord::associations::hasmanythroughassociation","activerecord::associations::hasoneassociation","activerecord::associations::hasonethroughassociation","activerecord::associations::joindependency","activerecord::associations::joindependency::aliases","activerecord::associations::joindependency::aliases::table","activerecord::associations::joindependency::joinassociation","activerecord::associations::joindependency::joinbase","activerecord::associations::joindependency::joinpart","activerecord::associations::preloader","activerecord::associations::preloader::alreadyloaded","activerecord::associations::preloader::association","activerecord::associations::preloader::belongsto","activerecord::associations::preloader::collectionassociation","activerecord::associations::preloader::hasmany","activerecord::associations::preloader::hasmanythrough","activerecord::associations::preloader::hasone","activerecord::associations::preloader::hasonethrough","activerecord::associations::preloader::nullpreloader","activerecord::associations::preloader::singularassociation","activerecord::associations::preloader::throughassociation","activerecord::associations::singularassociation","activerecord::associations::throughassociation","activerecord::attribute","activerecord::attribute::fromdatabase","activerecord::attribute::fromuser","activerecord::attribute::null","activerecord::attribute::uninitialized","activerecord::attribute::userprovideddefault","activerecord::attribute::withcastvalue","activerecord::attributeassignment","activerecord::attributeassignmenterror","activerecord::attributedecorators","activerecord::attributedecorators::classmethods","activerecord::attributedecorators::typedecorator","activerecord::attributemethods","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::dirty","activerecord::attributemethods::generatedattributemethods","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::serialization","activerecord::attributemethods::serialization::classmethods","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::timezoneconversion::timezoneconverter","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::attributemutationtracker","activerecord::attributeset","activerecord::attributeset::builder","activerecord::attributes","activerecord::attributes::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::associationbuilderextension","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::batches::batchenumerator","activerecord::calculations","activerecord::callbacks","activerecord::callbacks::classmethods","activerecord::coders","activerecord::coders::json","activerecord::coders::yamlcolumn","activerecord::collectioncachekey","activerecord::concurrentmigrationerror","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::abstractadapter::bindcollector","activerecord::connectionadapters::abstractadapter::sqlstring","activerecord::connectionadapters::abstractadapter::schemacreation","activerecord::connectionadapters::abstractadapter::version","activerecord::connectionadapters::abstractmysqladapter","activerecord::connectionadapters::abstractmysqladapter::statementpool","activerecord::connectionadapters::addcolumndefinition","activerecord::connectionadapters::altertable","activerecord::connectionadapters::changecolumndefinition","activerecord::connectionadapters::column","activerecord::connectionadapters::columndefinition","activerecord::connectionadapters::columndumper","activerecord::connectionadapters::columnmethods","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::connectionpool::biasablequeue","activerecord::connectionadapters::connectionpool::biasablequeue::biasedconditionvariable","activerecord::connectionadapters::connectionpool::connectionleasingqueue","activerecord::connectionadapters::connectionpool::queue","activerecord::connectionadapters::connectionpool::reaper","activerecord::connectionadapters::connectionspecification","activerecord::connectionadapters::connectionspecification::connectionurlresolver","activerecord::connectionadapters::connectionspecification::resolver","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::determineifpreparablevisitor","activerecord::connectionadapters::foreignkeydefinition","activerecord::connectionadapters::indexdefinition","activerecord::connectionadapters::mysql","activerecord::connectionadapters::mysql::column","activerecord::connectionadapters::mysql::columndefinition","activerecord::connectionadapters::mysql::columndumper","activerecord::connectionadapters::mysql::columnmethods","activerecord::connectionadapters::mysql::databasestatements","activerecord::connectionadapters::mysql::explainprettyprinter","activerecord::connectionadapters::mysql::quoting","activerecord::connectionadapters::mysql::schemacreation","activerecord::connectionadapters::mysql::table","activerecord::connectionadapters::mysql::tabledefinition","activerecord::connectionadapters::mysql::typemetadata","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::mysqljson","activerecord::connectionadapters::mysqlstring","activerecord::connectionadapters::nullcolumn","activerecord::connectionadapters::nulltransaction","activerecord::connectionadapters::postgresql","activerecord::connectionadapters::postgresql::columndefinition","activerecord::connectionadapters::postgresql::columndumper","activerecord::connectionadapters::postgresql::columnmethods","activerecord::connectionadapters::postgresql::databasestatements","activerecord::connectionadapters::postgresql::explainprettyprinter","activerecord::connectionadapters::postgresql::name","activerecord::connectionadapters::postgresql::oid","activerecord::connectionadapters::postgresql::oid::array","activerecord::connectionadapters::postgresql::oid::bit","activerecord::connectionadapters::postgresql::oid::bit::data","activerecord::connectionadapters::postgresql::oid::bitvarying","activerecord::connectionadapters::postgresql::oid::bytea","activerecord::connectionadapters::postgresql::oid::cidr","activerecord::connectionadapters::postgresql::oid::datetime","activerecord::connectionadapters::postgresql::oid::decimal","activerecord::connectionadapters::postgresql::oid::enum","activerecord::connectionadapters::postgresql::oid::hstore","activerecord::connectionadapters::postgresql::oid::inet","activerecord::connectionadapters::postgresql::oid::json","activerecord::connectionadapters::postgresql::oid::jsonb","activerecord::connectionadapters::postgresql::oid::money","activerecord::connectionadapters::postgresql::oid::point","activerecord::connectionadapters::postgresql::oid::rails51point","activerecord::connectionadapters::postgresql::oid::range","activerecord::connectionadapters::postgresql::oid::specializedstring","activerecord::connectionadapters::postgresql::oid::typemapinitializer","activerecord::connectionadapters::postgresql::oid::uuid","activerecord::connectionadapters::postgresql::oid::vector","activerecord::connectionadapters::postgresql::oid::xml","activerecord::connectionadapters::postgresql::oid::xml::data","activerecord::connectionadapters::postgresql::quoting","activerecord::connectionadapters::postgresql::referentialintegrity","activerecord::connectionadapters::postgresql::schemacreation","activerecord::connectionadapters::postgresql::schemastatements","activerecord::connectionadapters::postgresql::table","activerecord::connectionadapters::postgresql::tabledefinition","activerecord::connectionadapters::postgresql::utils","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqladapter::oid","activerecord::connectionadapters::postgresqladapter::statementpool","activerecord::connectionadapters::postgresqlcolumn","activerecord::connectionadapters::postgresqltypemetadata","activerecord::connectionadapters::primarykeydefinition","activerecord::connectionadapters::querycache","activerecord::connectionadapters::querycache::connectionpoolconfiguration","activerecord::connectionadapters::quoting","activerecord::connectionadapters::realtransaction","activerecord::connectionadapters::referencedefinition","activerecord::connectionadapters::sqlite3","activerecord::connectionadapters::sqlite3::explainprettyprinter","activerecord::connectionadapters::sqlite3::quoting","activerecord::connectionadapters::sqlite3::schemacreation","activerecord::connectionadapters::sqlite3adapter","activerecord::connectionadapters::sqlite3adapter::statementpool","activerecord::connectionadapters::savepointtransaction","activerecord::connectionadapters::savepoints","activerecord::connectionadapters::schemacache","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::sqltypemetadata","activerecord::connectionadapters::statementpool","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionadapters::transaction","activerecord::connectionadapters::transactionmanager","activerecord::connectionadapters::transactionstate","activerecord::connectionadapters::type","activerecord::connectionhandling","activerecord::connectionhandling::mergeandresolvedefaulturlconfig","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::core","activerecord::core::classmethods","activerecord::countercache","activerecord::countercache::classmethods","activerecord::dangerousattributeerror","activerecord::delegation","activerecord::delegation::classmethods","activerecord::delegation::classspecificrelation","activerecord::delegation::classspecificrelation::classmethods","activerecord::delegation::delegatecache","activerecord::deleterestrictionerror","activerecord::duplicatemigrationnameerror","activerecord::duplicatemigrationversionerror","activerecord::dynamicmatchers","activerecord::dynamicmatchers::findby","activerecord::dynamicmatchers::findbybang","activerecord::dynamicmatchers::method","activerecord::eagerloadpolymorphicerror","activerecord::enum","activerecord::enum::enumtype","activerecord::environmentmismatcherror","activerecord::exclusiveconnectiontimeouterror","activerecord::explain","activerecord::explainregistry","activerecord::explainsubscriber","activerecord::explainsubscriber::activesupport","activerecord::findermethods","activerecord::fixture","activerecord::fixture::fixtureerror","activerecord::fixture::formaterror","activerecord::fixtureclassnotfound","activerecord::fixtureset","activerecord::fixtureset::classcache","activerecord::fixtureset::file","activerecord::fixtureset::hasmanythroughproxy","activerecord::fixtureset::reflectionproxy","activerecord::fixtureset::rendercontext","activerecord::generators","activerecord::generators::base","activerecord::generators::migration","activerecord::generators::migration::classmethods","activerecord::generators::migrationgenerator","activerecord::generators::modelgenerator","activerecord::hasmanythroughassociationnotfounderror","activerecord::hasmanythroughassociationpointlesssourcetypeerror","activerecord::hasmanythroughassociationpolymorphicsourceerror","activerecord::hasmanythroughassociationpolymorphicthrougherror","activerecord::hasmanythroughcantassociatenewrecords","activerecord::hasmanythroughcantassociatethroughhasoneormanyreflection","activerecord::hasmanythroughcantdissociatenewrecords","activerecord::hasmanythroughnestedassociationsarereadonly","activerecord::hasmanythroughsourceassociationnotfounderror","activerecord::hasoneassociationpolymorphicthrougherror","activerecord::hasonethroughcantassociatethroughcollection","activerecord::hasonethroughcantassociatethroughhasoneormanyreflection","activerecord::hasonethroughnestedassociationsarereadonly","activerecord::illegalmigrationnameerror","activerecord::immutablerelation","activerecord::inheritance","activerecord::inheritance::classmethods","activerecord::integration","activerecord::integration::classmethods","activerecord::internalmetadata","activerecord::invalidforeignkey","activerecord::inverseofassociationnotfounderror","activerecord::irreversiblemigration","activerecord::irreversibleordererror","activerecord::lazyattributehash","activerecord::legacyyamladapter","activerecord::legacyyamladapter::rails41","activerecord::legacyyamladapter::rails420","activerecord::locking","activerecord::locking::lockingtype","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migration::checkpending","activerecord::migration::commandrecorder","activerecord::migration::commandrecorder::straightreversions","activerecord::migration::compatibility","activerecord::migration::compatibility::fourtwoshared","activerecord::migration::compatibility::fourtwoshared::tabledefinition","activerecord::migration::compatibility::fourtwoshared::t","activerecord::migration::compatibility::legacy","activerecord::migration::compatibility::v4_2","activerecord::migration::current","activerecord::migration::jointable","activerecord::migration::reversibleblockhelper","activerecord::migration::v5_0","activerecord::migrationerror","activerecord::migrationproxy","activerecord::migrator","activerecord::modelschema","activerecord::modelschema::classmethods","activerecord::multiparameterassignmenterrors","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::nodatabaseerror","activerecord::noenvironmentinschemaerror","activerecord::notouching","activerecord::notouching::classmethods","activerecord::nullmigration","activerecord::nullmutationtracker","activerecord::nullrelation","activerecord::pendingmigrationerror","activerecord::persistence","activerecord::persistence::classmethods","activerecord::predicatebuilder","activerecord::predicatebuilder::arrayhandler","activerecord::predicatebuilder::arrayhandler::nullpredicate","activerecord::predicatebuilder::associationqueryhandler","activerecord::predicatebuilder::associationqueryvalue","activerecord::predicatebuilder::basehandler","activerecord::predicatebuilder::basicobjecthandler","activerecord::predicatebuilder::classhandler","activerecord::predicatebuilder::polymorphicarrayhandler","activerecord::predicatebuilder::polymorphicarrayvalue","activerecord::predicatebuilder::rangehandler","activerecord::predicatebuilder::relationhandler","activerecord::preparedstatementcacheexpired","activerecord::preparedstatementinvalid","activerecord::protectedenvironmenterror","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::querymethods::wherechain","activerecord::querying","activerecord::railtie","activerecord::railtie::actiondispatch","activerecord::railtie::activesupport","activerecord::railtie::rails","activerecord::railties","activerecord::railties::controllerruntime","activerecord::railties::controllerruntime::classmethods","activerecord::readonlyassociation","activerecord::readonlyrecord","activerecord::readonlyattributes","activerecord::readonlyattributes::classmethods","activerecord::recordinvalid","activerecord::recordnotdestroyed","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::abstractreflection","activerecord::reflection::aggregatereflection","activerecord::reflection::associationreflection","activerecord::reflection::belongstoreflection","activerecord::reflection::classmethods","activerecord::reflection::hasandbelongstomanyreflection","activerecord::reflection::hasmanyreflection","activerecord::reflection::hasonereflection","activerecord::reflection::macroreflection","activerecord::reflection::polymorphicreflection","activerecord::reflection::runtimereflection","activerecord::reflection::throughreflection","activerecord::relation","activerecord::relation::fromclause","activerecord::relation::hashmerger","activerecord::relation::merger","activerecord::relation::queryattribute","activerecord::relation::recordfetchwarning","activerecord::relation::recordfetchwarning::activesupport","activerecord::relation::recordfetchwarning::queryregistry","activerecord::relation::whereclause","activerecord::relation::whereclausefactory","activerecord::result","activerecord::rollback","activerecord::runtimeregistry","activerecord::sanitization","activerecord::sanitization::classmethods","activerecord::schema","activerecord::schemadumper","activerecord::schemamigration","activerecord::scoping","activerecord::scoping::classmethods","activerecord::scoping::default","activerecord::scoping::default::classmethods","activerecord::scoping::named","activerecord::scoping::named::classmethods","activerecord::scoping::scoperegistry","activerecord::securetoken","activerecord::securetoken::classmethods","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementcache","activerecord::statementcache::bindmap","activerecord::statementcache::params","activerecord::statementcache::partialquery","activerecord::statementcache::query","activerecord::statementcache::substitute","activerecord::statementinvalid","activerecord::store","activerecord::store::classmethods","activerecord::store::hashaccessor","activerecord::store::indifferentcoder","activerecord::store::indifferenthashaccessor","activerecord::store::stringkeyedhashaccessor","activerecord::subclassnotfound","activerecord::suppressor","activerecord::suppressor::classmethods","activerecord::suppressorregistry","activerecord::tablemetadata","activerecord::tasks","activerecord::tasks::databasealreadyexists","activerecord::tasks::databasenotsupported","activerecord::tasks::databasetasks","activerecord::tasks::mysqldatabasetasks","activerecord::tasks::postgresqldatabasetasks","activerecord::tasks::sqlitedatabasetasks","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::throughcantassociatethroughhasoneormanyreflection","activerecord::throughnestedassociationsarereadonly","activerecord::timestamp","activerecord::touchlater","activerecord::transactionisolationerror","activerecord::transactions","activerecord::transactions::classmethods","activerecord::translation","activerecord::type","activerecord::type::adapterspecificregistry","activerecord::type::date","activerecord::type::datetime","activerecord::type::decorationregistration","activerecord::type::hashlookuptypemap","activerecord::type::internal","activerecord::type::internal::abstractjson","activerecord::type::internal::timezone","activerecord::type::registration","activerecord::type::serialized","activerecord::type::time","activerecord::type::time::value","activerecord::type::typemap","activerecord::typecaster","activerecord::typecaster::connection","activerecord::typecaster::map","activerecord::typeconflicterror","activerecord::unknownmigrationversionerror","activerecord::unknownprimarykey","activerecord::version","activerecord::validations","activerecord::validations::absencevalidator","activerecord::validations::associatedvalidator","activerecord::validations::classmethods","activerecord::validations::lengthvalidator","activerecord::validations::presencevalidator","activerecord::validations::uniquenessvalidator","activerecord::valuetoolong","activerecord::wrappeddatabaseexception","arjdbcmysql","arjdbcmysql::error","arel","mysql2","activerecord::associations::collectionproxy#<<()","activerecord::connectionadapters::abstractadapter::version#<=>()","activerecord::core#<=>()","activerecord::associationrelation#==()","activerecord::associations::collectionproxy#==()","activerecord::connectionadapters::postgresqltypemetadata#==()","activerecord::core#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activerecord::core::classmethods#===()","activerecord::attributemethods#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtureset#[]()","activerecord::fixtureset::classcache#[]()","activerecord::migration::[]()","activerecord::result#[]()","activerecord::attributemethods#[]=()","activerecord::connectionadapters::postgresqladapter::statementpool#[]=()","activerecord::fixtureset#[]=()","activerecord::countercache#_create_record()","activerecord::persistence#_create_record()","activerecord::timestamp#_create_record()","activerecord::autosaveassociation#_ensure_no_duplicate_errors()","activerecord::enum#_enum_methods_module()","activerecord::connectionadapters::postgresql::quoting#_quote()","activerecord::connectionadapters::quoting#_quote()","activerecord::persistence#_raise_record_not_destroyed()","activerecord::attributemethods::read#_read_attribute()","activerecord::connectionadapters::postgresql::quoting#_type_cast()","activerecord::connectionadapters::quoting#_type_cast()","activerecord::persistence#_update_record()","activerecord::timestamp#_update_record()","activerecord::inheritance::classmethods#abstract_class?()","activerecord::connectionadapters::determineifpreparablevisitor#accept()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activerecord::attributemethods#accessed_fields()","activerecord::connectionadapters::connectionpool#acquire_connection()","activerecord::batches#act_on_order_or_limit_ignored()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activerecord::connectionadapters::sqlite3adapter#active?()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::connectionpool::queue#add()","activerecord::connectionadapters::schemacache#add()","activerecord::connectionadapters::schemastatements#add_belongs_to()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::mysql::schemacreation#add_column_options!()","activerecord::connectionadapters::postgresql::schemacreation#add_column_options!()","activerecord::connectionadapters::sqlite3::schemacreation#add_column_options!()","activerecord::connectionadapters::mysql::schemacreation#add_column_position!()","activerecord::connectionadapters#add_column_sql()","activerecord::connectionadapters::schemastatements#add_foreign_key()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters#add_index_length()","activerecord::connectionadapters::schemastatements#add_index_sort_order()","activerecord::connectionadapters#add_index_sql()","activerecord::fixtureset#add_join_records()","activerecord::connectionadapters#add_options_for_index_columns()","activerecord::connectionadapters::schemastatements#add_options_for_index_columns()","activerecord::connectionadapters::postgresqladapter#add_pg_decoders()","activerecord::connectionadapters::postgresqladapter#add_pg_encoders()","activerecord::connectionadapters::schemastatements#add_reference()","activerecord::connectionadapters::mysql::schemacreation#add_table_options!()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters#add_timestamps_sql()","activerecord::connectionadapters::databasestatements#add_transaction_record()","activerecord::connectionadapters::connectionpool#adopt_connection()","activerecord::transactions::classmethods#after_commit()","activerecord::transactions::classmethods#after_create_commit()","activerecord::transactions::classmethods#after_destroy_commit()","activerecord::transactions::classmethods#after_rollback()","activerecord::transactions::classmethods#after_update_commit()","activerecord::calculations#aggregate_column()","activerecord::connectionadapters::tabledefinition#aliased_types()","activerecord::scoping::named::classmethods#all()","activerecord::timestamp#all_timestamp_attributes()","activerecord::timestamp#all_timestamp_attributes_in_model()","activerecord::core::classmethods#allocate()","activerecord::connectionadapters::databaselimits#allowed_index_name_length()","activerecord::connectionadapters::sqlite3adapter#allowed_index_name_length()","activerecord::migration#announce()","activerecord::associations::collectionproxy#any?()","activerecord::connectionadapters::connectionpool::queue#any?()","activerecord::relation#any?()","activerecord::connectionadapters::connectionpool::queue#any_waiting?()","activerecord::associations::collectionproxy#append()","activerecord::findermethods#apply_join_dependency()","activerecord::batches#apply_limits()","activerecord::attributemethods#arel_attributes_with_values()","activerecord::querymethods#arel_columns()","activerecord::querymethods#assert_mutability!()","activerecord::transactions::classmethods#assert_valid_transaction_action()","activerecord::attributeassignment#assign_multiparameter_attributes()","activerecord::attributeassignment#assign_nested_parameter_attributes()","activerecord::autosaveassociation#associated_records_to_validate_or_save()","activerecord::querymethods#association_for_table()","activerecord::autosaveassociation#association_valid?()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activerecord::connectionadapters::connectionpool#attempt_to_checkout_all_existing_connections()","activerecord::readonlyattributes::classmethods#attr_readonly()","activerecord::attributemethods::read#attribute()","activerecord::attributes::classmethods#attribute()","activerecord::attributemethods::write#attribute=()","activerecord::attributemethods::query#attribute?()","activerecord::attributemethods::beforetypecast#attribute_before_type_cast()","activerecord::attributemethods::beforetypecast#attribute_came_from_user?()","activerecord::attributemethods#attribute_for_inspect()","activerecord::attributemethods::classmethods#attribute_method?()","activerecord::attributemethods::primarykey#attribute_method?()","activerecord::attributemethods#attribute_names()","activerecord::attributemethods::classmethods#attribute_names()","activerecord::attributemethods#attribute_present?()","activerecord::attributemethods#attributes()","activerecord::attributeassignment#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::attributemethods#attributes_for_create()","activerecord::connectionadapters::postgresqltypemetadata#attributes_for_hash()","activerecord::attributemethods#attributes_for_update()","activerecord::dynamicmatchers::method#attributes_hash()","activerecord::reflection::macroreflection#autosave=()","activerecord::calculations#average()","activerecord::inheritance::classmethods#base_class()","activerecord::migrationproxy#basename()","activerecord::batches#batch_order()","activerecord::persistence#becomes()","activerecord::persistence#becomes!()","activerecord::autosaveassociation#before_save_collection_association()","activerecord::connectionadapters#begin_db_transaction()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresql::databasestatements#begin_db_transaction()","activerecord::connectionadapters#begin_isolated_db_transaction()","activerecord::connectionadapters::databasestatements#begin_isolated_db_transaction()","activerecord::connectionadapters::postgresql::databasestatements#begin_isolated_db_transaction()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","activerecord::persistence#belongs_to_touch_method()","activerecord::touchlater#belongs_to_touch_method()","activerecord::connectionadapters::postgresql::columnmethods#bigserial()","activerecord::connectionadapters::postgresql::oid::bit::data#binary?()","activerecord::connectionadapters::postgresql::columnmethods#bit()","activerecord::connectionadapters::postgresql::columnmethods#bit_varying()","activerecord::relation#blank?()","activerecord::connectionadapters::mysql::columnmethods#blob()","activerecord::dynamicmatchers::method#body()","activerecord::querymethods#bound_attributes()","activerecord::connectionadapters::postgresql::columnmethods#box()","activerecord::associationrelation#build()","activerecord::associations::collectionproxy#build()","activerecord::relation#build()","activerecord::querymethods#build_arel()","activerecord::calculations#build_count_subquery()","activerecord::querymethods#build_from()","activerecord::querymethods#build_join_query()","activerecord::querymethods#build_joins()","activerecord::querymethods#build_left_outer_joins()","activerecord::querymethods#build_order()","activerecord::relation#build_preloader()","activerecord::querymethods#build_select()","activerecord::connectionadapters::connectionpool#bulk_make_new_connections()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","activerecord::fixtureset::cache_fixtures()","activerecord::fixtureset::cache_for_connection()","activerecord::integration#cache_key()","activerecord::relation#cache_key()","activerecord::connectionadapters::querycache#cache_sql()","activerecord::fixtureset::cached_fixtures()","activerecord::associations::collectionproxy#calculate()","activerecord::calculations#calculate()","activerecord::migration::checkpending#call()","activerecord::connectionadapters#can_perform_case_insensitive_comparison_for?()","activerecord::connectionadapters::abstractadapter#can_perform_case_insensitive_comparison_for?()","activerecord::connectionadapters::postgresqladapter#can_perform_case_insensitive_comparison_for?()","activerecord::connectionadapters::schemastatements#can_remove_index_by_name?()","activerecord::connectionadapters::connectionpool::queue#can_remove_no_wait?()","activerecord::connectionadapters::abstractadapter#case_insensitive_comparison()","activerecord::connectionadapters#case_sensitive_comparison()","activerecord::connectionadapters::abstractadapter#case_sensitive_comparison()","activerecord::connectionadapters::table#change()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_null()","activerecord::connectionadapters#change_column_sql()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activerecord::connectionadapters::schemastatements#change_table_comment()","activerecord::autosaveassociation#changed_for_autosave?()","activerecord::connectionadapters#charset()","activerecord::tasks::databasetasks#charset()","activerecord::tasks::databasetasks#charset_current()","activerecord::querymethods#check_if_method_has_arguments!()","activerecord::migration::check_pending!()","activerecord::tasks::databasetasks#check_protected_environments!()","activerecord::tasks::databasetasks#check_schema_file()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","activerecord::connectionadapters::connectionpool#checkout_and_verify()","activerecord::connectionadapters::connectionpool#checkout_for_exclusive_access()","activerecord::connectionadapters::connectionpool#checkout_new_connection()","activerecord::connectionadapters::postgresql::columnmethods#cidr()","activerecord::connectionadapters::postgresql::columnmethods#circle()","activerecord::connectionadapters::postgresql::columnmethods#citext()","activerecord::tasks::databasetasks#class_for_adapter()","activerecord::associations::collectionproxy#clear()","activerecord::connectionadapters::connectionpool::queue#clear()","activerecord::connectionadapters::schemacache#clear!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activerecord::connectionadapters#clear_cache!()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activerecord::connectionadapters::postgresqladapter#clear_cache!()","activerecord::connectionadapters::sqlite3adapter#clear_cache!()","activerecord::connectionadapters::schemacache#clear_data_source_cache!()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","activerecord::connectionadapters::schemacache#clear_table_cache!()","activerecord::timestamp#clear_timestamp_attributes()","activerecord::connectionadapters::postgresql::schemastatements#client_min_messages()","activerecord::connectionadapters::postgresql::schemastatements#client_min_messages=()","activerecord::core#clone()","activerecord::connectionadapters::abstractadapter#close()","activerecord::connectionadapters#collation()","activerecord::connectionadapters::postgresql::schemastatements#collation()","activerecord::tasks::databasetasks#collation()","activerecord::tasks::databasetasks#collation_current()","activerecord::connectionadapters::abstractadapter#collector()","activerecord::logsubscriber#colorize_payload_name()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::calculations#column_alias_for()","activerecord::modelschema::classmethods#column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::attributemethods::classmethods#column_for_attribute()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::fixtureset#column_names()","activerecord::modelschema::classmethods#column_names()","activerecord::connectionadapters::mysql::schemacreation#column_options()","activerecord::connectionadapters::sqlite3::schemacreation#column_options()","activerecord::connectionadapters::columndumper#column_spec()","activerecord::connectionadapters::columndumper#column_spec_for_primary_key()","activerecord::connectionadapters::mysql::columndumper#column_spec_for_primary_key()","activerecord::connectionadapters::postgresql::columndumper#column_spec_for_primary_key()","activerecord::result#column_type()","activerecord::connectionadapters::schemacache#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::connectionadapters::tabledefinition#columns()","activerecord::modelschema::classmethods#columns()","activerecord::connectionadapters::schemacache#columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","activerecord::connectionadapters::realtransaction#commit()","activerecord::connectionadapters::savepointtransaction#commit()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresql::databasestatements#commit_db_transaction()","activerecord::connectionadapters::transactionstate#committed?()","activerecord::connectionadapters::abstractadapter::bindcollector#compile()","activerecord::connectionadapters::abstractadapter::sqlstring#compile()","activerecord::querycache::complete()","activerecord::connectionadapters::transactionstate#completed?()","activerecord::aggregations::classmethods#composed_of()","activerecord::reflection::macroreflection#compute_class()","activerecord::modelschema::classmethods#compute_table_name()","activerecord::inheritance::classmethods#compute_type()","activerecord::associations::collectionproxy#concat()","activerecord::core::configurations()","activerecord::core::configurations=()","activerecord::connectionadapters#configure_connection()","activerecord::connectionadapters::mysql2adapter#configure_connection()","activerecord::connectionadapters::postgresqladapter#configure_connection()","activerecord::connectionadapters::querycache#configure_query_cache!()","activerecord::connectionadapters::mysql2adapter#connect()","activerecord::connectionadapters::postgresqladapter#connect()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::connectionhandling#connected?()","activerecord::connectionadapters::connectionpool#connection()","activerecord::connectionhandling#connection()","activerecord::migration#connection()","activerecord::migration::checkpending#connection()","activerecord::connectionadapters::postgresqladapter::statementpool#connection_active?()","activerecord::connectionadapters::connectionpool#connection_cache_key()","activerecord::connectionhandling#connection_config()","activerecord::core#connection_handler()","activerecord::core::connection_handler()","activerecord::core::connection_handler=()","activerecord::connectionhandling#connection_id()","activerecord::connectionhandling#connection_id=()","activerecord::connectionhandling#connection_pool()","activerecord::connectionadapters::connectionhandler#connection_pool_list()","activerecord::connectionadapters::connectionhandler#connection_pools()","activerecord::connectionhandling#connection_specification_name()","activerecord::connectionadapters::postgresqladapter#construct_coder()","activerecord::findermethods#construct_join_dependency()","activerecord::findermethods#construct_relation_for_association_calculations()","activerecord::modelschema::classmethods#content_columns()","activerecord::fixtureset::context_class()","activerecord::legacyyamladapter::convert()","activerecord::legacyyamladapter::rails41::convert()","activerecord::legacyyamladapter::rails420::convert()","activerecord::querymethods#convert_join_strings_to_ast()","activerecord::migration#copy()","activerecord::associations::collectionproxy#count()","activerecord::calculations#count()","activerecord::querying#count_by_sql()","activerecord::associationrelation#create()","activerecord::associations::collectionproxy#create()","activerecord::connectionadapters::databasestatements#create()","activerecord::persistence::classmethods#create()","activerecord::relation#create()","activerecord::tasks::databasetasks#create()","activerecord::associationrelation#create!()","activerecord::associations::collectionproxy#create!()","activerecord::persistence::classmethods#create!()","activerecord::relation#create!()","activerecord::tasks::databasetasks#create_all()","activerecord::connectionadapters::schemastatements#create_alter_table()","activerecord::connectionadapters::mysql::tabledefinition#create_column_definition()","activerecord::connectionadapters::postgresql::tabledefinition#create_column_definition()","activerecord::connectionadapters::tabledefinition#create_column_definition()","activerecord::tasks::databasetasks#create_current()","activerecord::connectionadapters#create_database()","activerecord::connectionadapters::postgresql::schemastatements#create_database()","activerecord::fixtureset::create_fixtures()","activerecord::connectionadapters::schemastatements#create_join_table()","activerecord::persistence#create_or_update()","activerecord::connectionadapters::savepoints#create_savepoint()","activerecord::connectionadapters::postgresql::schemastatements#create_schema()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::connectionadapters::schemastatements#create_table_definition()","activerecord::attributemethods::timezoneconversion::classmethods#create_time_zone_conversion_attribute?()","activerecord::querymethods#create_with()","activerecord::connectionadapters::postgresql::schemastatements#ctype()","activerecord::type::current_adapter_name()","activerecord::tasks::databasetasks#current_config()","activerecord::connectionadapters#current_database()","activerecord::connectionadapters::postgresql::schemastatements#current_database()","activerecord::connectionadapters::savepoints#current_savepoint_name()","activerecord::connectionadapters::postgresql::schemastatements#current_schema()","activerecord::timestamp#current_time_from_proper_timezone()","activerecord::migration::current_version()","activerecord::core#custom_inspect_method_defined?()","activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()","activerecord::attributemethods::classmethods#dangerous_class_method?()","activerecord::connectionadapters#data_source_exists?()","activerecord::connectionadapters::postgresql::schemastatements#data_source_exists?()","activerecord::connectionadapters::sqlite3adapter#data_source_exists?()","activerecord::connectionadapters::schemacache#data_source_exists?()","activerecord::connectionadapters::schemastatements#data_source_exists?()","activerecord::connectionadapters#data_sources()","activerecord::connectionadapters::postgresql::schemastatements#data_sources()","activerecord::connectionadapters::sqlite3adapter#data_sources()","activerecord::connectionadapters::schemacache#data_sources()","activerecord::connectionadapters::schemastatements#data_sources()","activerecord::connectionadapters::postgresql::columnmethods#daterange()","activerecord::tasks::databasetasks#db_dir()","activerecord::connectionadapters::postgresqladapter::statementpool#dealloc()","activerecord::connectionadapters::sqlite3adapter::statementpool#dealloc()","activerecord::persistence#decrement()","activerecord::persistence#decrement!()","activerecord::countercache::classmethods#decrement_counter()","activerecord::fixtureset::classcache#default_fixture_model()","activerecord::connectionadapters::columndumper#default_primary_key?()","activerecord::connectionadapters::mysql::columndumper#default_primary_key?()","activerecord::connectionadapters::postgresql::columndumper#default_primary_key?()","activerecord::scoping::default::classmethods#default_scope()","activerecord::type::internal::timezone#default_timezone()","activerecord::validations#default_validation_context()","activerecord::dynamicmatchers::method#define()","activerecord::schema::define()","activerecord::attributes::classmethods#define_attribute()","activerecord::attributes::classmethods#define_default_attribute()","activerecord::attributemethods::primarykey::classmethods#define_method_attribute()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activerecord::associations::collectionproxy#delete()","activerecord::connectionadapters::connectionpool::queue#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","activerecord::associations::collectionproxy#delete_all()","activerecord::relation#delete_all()","activerecord::connectionadapters::databasestatements#delete_sql()","activerecord::reflection::macroreflection#derive_class_name()","activerecord::inheritance::classmethods#descends_from_active_record?()","activerecord::associations::collectionproxy#destroy()","activerecord::persistence#destroy()","activerecord::relation#destroy()","activerecord::persistence#destroy!()","activerecord::associations::collectionproxy#destroy_all()","activerecord::relation#destroy_all()","activerecord::persistence#destroy_associations()","activerecord::countercache#destroy_row()","activerecord::locking::optimistic#destroy_row()","activerecord::persistence#destroy_row()","activerecord::persistence#destroyed?()","activerecord::autosaveassociation#destroyed_by_association()","activerecord::autosaveassociation#destroyed_by_association=()","activerecord::enum#detect_enum_conflict!()","activerecord::connectionadapters::querycache::dirties_query_cache()","activerecord::migration::disable_ddl_transaction!()","activerecord::connectionadapters::abstractadapter#disable_extension()","activerecord::connectionadapters::postgresqladapter#disable_extension()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::querycache::connectionpoolconfiguration#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","activerecord::connectionadapters::connectionpool#disconnect()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqlite3adapter#disconnect!()","activerecord::inheritance::classmethods#discriminate_class_for_record()","activerecord::persistence::classmethods#discriminate_class_for_record()","activerecord::associations::collectionproxy#distinct()","activerecord::querymethods#distinct()","activerecord::querymethods#does_not_support_reverse?()","activerecord::migration#down()","activerecord::tasks::databasetasks#drop()","activerecord::tasks::databasetasks#drop_all()","activerecord::tasks::databasetasks#drop_current()","activerecord::connectionadapters::schemastatements#drop_join_table()","activerecord::connectionadapters::postgresql::schemastatements#drop_schema()","activerecord::connectionadapters#drop_table()","activerecord::connectionadapters::schemastatements#drop_table()","activerecord::core#dup()","activerecord::batches::batchenumerator#each()","activerecord::fixtureset#each()","activerecord::result#each()","activerecord::countercache#each_counter_cached_associations()","activerecord::tasks::databasetasks#each_current_configuration()","activerecord::tasks::databasetasks#each_local_configuration()","activerecord::batches::batchenumerator#each_record()","activerecord::querymethods#eager_load()","activerecord::eager_load!()","activerecord::relation#eager_loading?()","activerecord::associations::collectionproxy#empty?()","activerecord::relation#empty?()","activerecord::result#empty?()","activerecord::connectionadapters#empty_insert_statement_value()","activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()","activerecord::connectionadapters::abstractadapter#enable_extension()","activerecord::connectionadapters::postgresqladapter#enable_extension()","activerecord::connectionadapters::querycache#enable_query_cache!()","activerecord::connectionadapters::querycache::connectionpoolconfiguration#enable_query_cache!()","activerecord::core#encode_with()","activerecord::relation#encode_with()","activerecord::connectionadapters::postgresql::schemastatements#encoding()","activerecord::connectionadapters::sqlite3adapter#encoding()","activerecord::testfixtures#enlist_fixture_connections()","activerecord::inheritance#ensure_proper_type()","activerecord::enum#enum()","activerecord::tasks::databasetasks#env()","activerecord::connectionadapters::postgresqltypemetadata#eql?()","activerecord::core#eql?()","activerecord::connectionadapters::mysql2adapter#error_number()","activerecord::connectionadapters::postgresql::quoting#escape_bytea()","activerecord::connectionadapters::connectionhandler#establish_connection()","activerecord::connectionhandling#establish_connection()","activerecord::spawnmethods#except()","activerecord::connectionadapters::postgresqladapter#exec_cache()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::mysql::databasestatements#exec_delete()","activerecord::connectionadapters::postgresql::databasestatements#exec_delete()","activerecord::connectionadapters::sqlite3adapter#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::connectionadapters::postgresql::databasestatements#exec_insert()","activerecord::migration#exec_migration()","activerecord::connectionadapters::postgresqladapter#exec_no_cache()","activerecord::associationrelation#exec_queries()","activerecord::associations::collectionproxy#exec_queries()","activerecord::relation#exec_queries()","activerecord::relation::recordfetchwarning#exec_queries()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::mysql::databasestatements#exec_query()","activerecord::connectionadapters::postgresql::databasestatements#exec_query()","activerecord::connectionadapters::sqlite3adapter#exec_query()","activerecord::connectionadapters::postgresql::databasestatements#exec_rollback_db_transaction()","activerecord::connectionadapters::savepoints#exec_rollback_to_savepoint()","activerecord::connectionadapters::mysql::databasestatements#exec_stmt_and_free()","activerecord::connectionadapters::databasestatements#exec_update()","activerecord::connectionadapters::mysql::databasestatements#exec_update()","activerecord::connectionadapters::postgresql::databasestatements#exec_update()","activerecord::connectionadapters::sqlite3adapter#exec_update()","activerecord::connectionadapters#execute()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql::databasestatements#execute()","activerecord::connectionadapters::postgresql::databasestatements#execute()","activerecord::connectionadapters::postgresqladapter#execute_and_clear()","activerecord::migration#execute_block()","activerecord::attributeassignment#execute_callstack_for_multiparameter_attributes()","activerecord::findermethods#exists?()","activerecord::sanitization::classmethods#expand_hash_conditions_for_aggregates()","activerecord::connectionadapters::abstractadapter#expire()","activerecord::connectionadapters#explain()","activerecord::connectionadapters::postgresql::databasestatements#explain()","activerecord::connectionadapters::sqlite3adapter#explain()","activerecord::relation#explain()","activerecord::querymethods#extending()","activerecord::connectionadapters::postgresqladapter#extension_enabled?()","activerecord::connectionadapters::abstractadapter#extensions()","activerecord::connectionadapters::postgresqladapter#extensions()","activerecord::attributeassignment#extract_callstack_for_multiparameter_attributes()","activerecord::connectionadapters::schemastatements#extract_new_default_value()","activerecord::connectionadapters#extract_precision()","activerecord::connectionadapters#fetch_type_metadata()","activerecord::connectionadapters::postgresql::schemastatements#fetch_type_metadata()","activerecord::connectionadapters::quoting#fetch_type_metadata()","activerecord::associations::collectionproxy#fifth()","activerecord::findermethods#fifth()","activerecord::findermethods#fifth!()","activerecord::connectionadapters::transactionstate#finalized?()","activerecord::associations::collectionproxy#find()","activerecord::findermethods#find()","activerecord::findermethods#find_by()","activerecord::findermethods#find_by!()","activerecord::querying#find_by_sql()","activerecord::batches#find_each()","activerecord::batches#find_in_batches()","activerecord::findermethods#find_last()","activerecord::findermethods#find_nth()","activerecord::findermethods#find_nth!()","activerecord::findermethods#find_nth_from_last()","activerecord::findermethods#find_nth_with_limit()","activerecord::findermethods#find_one()","activerecord::relation#find_or_create_by()","activerecord::relation#find_or_create_by!()","activerecord::relation#find_or_initialize_by()","activerecord::attributeassignment#find_parameter_position()","activerecord::findermethods#find_some()","activerecord::findermethods#find_some_ordered()","activerecord::inheritance::classmethods#find_sti_class()","activerecord::findermethods#find_take()","activerecord::findermethods#find_with_associations()","activerecord::findermethods#find_with_ids()","activerecord::dynamicmatchers::findby#finder()","activerecord::dynamicmatchers::findbybang#finder()","activerecord::dynamicmatchers::method#finder()","activerecord::associations::collectionproxy#first()","activerecord::findermethods#first()","activerecord::result#first()","activerecord::findermethods#first!()","activerecord::fixtureset::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","activerecord::tasks::databasetasks#fixtures_path()","activerecord::connectionadapters::schemastatements#foreign_key_exists?()","activerecord::connectionadapters#foreign_keys()","activerecord::connectionadapters::postgresql::schemastatements#foreign_keys()","activerecord::connectionadapters::schemastatements#foreign_keys()","activerecord::associations::collectionproxy#forty_two()","activerecord::findermethods#forty_two()","activerecord::findermethods#forty_two!()","activerecord::associations::collectionproxy#fourth()","activerecord::findermethods#fourth()","activerecord::findermethods#fourth!()","activerecord::core#freeze()","activerecord::querymethods#from()","activerecord::core#frozen?()","activerecord::connectionadapters::savepointtransaction#full_rollback?()","activerecord::connectionadapters::mysql2adapter#full_version()","activerecord::gem_version()","activerecord::nestedattributes::classmethods#generate_association_writer()","activerecord::securetoken::classmethods#generate_unique_secure_token()","activerecord::core::classmethods#generated_association_methods()","activerecord::querymethods#group()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::attributemethods#has_attribute?()","activerecord::attributemethods::classmethods#has_attribute?()","activerecord::touchlater#has_defer_touch_attrs?()","activerecord::calculations#has_include?()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","activerecord::fixtureset#has_primary_key_column?()","activerecord::securetoken::classmethods#has_secure_token()","activerecord::connectionadapters::postgresqltypemetadata#hash()","activerecord::core#hash()","activerecord::result#hash_rows()","activerecord::querymethods#having()","activerecord::querymethods#having_clause_factory()","activerecord::connectionadapters::postgresql::oid::bit::data#hex?()","activerecord::connectionadapters::postgresql::columnmethods#hstore()","activerecord::attributemethods::primarykey#id()","activerecord::attributemethods::primarykey#id=()","activerecord::attributemethods::primarykey#id?()","activerecord::attributemethods::primarykey#id_before_type_cast()","activerecord::attributemethods::primarykey#id_was()","activerecord::fixtureset::identify()","activerecord::calculations#ids()","activerecord::modelschema::ignored_columns()","activerecord::modelschema::ignored_columns=()","activerecord::batches#in_batches()","activerecord::connectionadapters::databaselimits#in_clause_length()","activerecord::connectionadapters::postgresqladapter#in_transaction?()","activerecord::associations::collectionproxy#include?()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activerecord::persistence#increment!()","activerecord::countercache::classmethods#increment_counter()","activerecord::locking::optimistic#increment_lock()","activerecord::connectionadapters::table#index()","activerecord::connectionadapters::tabledefinition#index()","activerecord::connectionadapters#index_algorithms()","activerecord::connectionadapters::abstractadapter#index_algorithms()","activerecord::connectionadapters::postgresqladapter#index_algorithms()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","activerecord::connectionadapters::mysql::schemacreation#index_in_create()","activerecord::connectionadapters::postgresql::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_for_remove()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresql::schemastatements#index_name_length()","activerecord::connectionadapters::postgresql::schemastatements#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activerecord::connectionadapters::postgresql::columnmethods#inet()","activerecord::modelschema::classmethods#inheritance_column()","activerecord::modelschema::classmethods#inheritance_column=()","activerecord::fixtureset#inheritance_column_name()","activerecord::attributemethods::timezoneconversion::classmethods#inherited()","activerecord::locking::optimistic::classmethods#inherited()","activerecord::core#init_internals()","activerecord::core#init_with()","activerecord::relation#initialize_copy()","activerecord::result#initialize_copy()","activerecord::connectionadapters::schemacache#initialize_dup()","activerecord::inheritance#initialize_dup()","activerecord::connectionadapters::schemastatements#initialize_internal_metadata_table()","activerecord::core#initialize_internals_callback()","activerecord::inheritance#initialize_internals_callback()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","activerecord::connectionadapters::databasestatements#insert()","activerecord::fixtureset::classcache#insert_class()","activerecord::connectionadapters::databasestatements#insert_sql()","activerecord::core#inspect()","activerecord::core::classmethods#inspect()","activerecord::relation#inspect()","activerecord::querycache::install_executor_hooks()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::persistence::classmethods#instantiate()","activerecord::fixtureset::instantiate_all_loaded_fixtures()","activerecord::fixtureset::instantiate_fixtures()","activerecord::testfixtures#instantiate_fixtures()","activerecord::connectionadapters::postgresql::columnmethods#int4range()","activerecord::connectionadapters::postgresql::columnmethods#int8range()","activerecord::modelschema::internal_metadata_table_name()","activerecord::modelschema::internal_metadata_table_name=()","activerecord::connectionadapters::connectionpool::queue#internal_poll()","activerecord::migration::commandrecorder#inverse_of()","activerecord::migration::commandrecorder#invert_add_foreign_key()","activerecord::migration::commandrecorder#invert_add_index()","activerecord::migration::commandrecorder#invert_change_column_default()","activerecord::migration::commandrecorder#invert_change_column_null()","activerecord::migration::commandrecorder#invert_drop_table()","activerecord::migration::commandrecorder#invert_remove_column()","activerecord::migration::commandrecorder#invert_remove_foreign_key()","activerecord::migration::commandrecorder#invert_remove_index()","activerecord::migration::commandrecorder#invert_rename_column()","activerecord::migration::commandrecorder#invert_rename_index()","activerecord::migration::commandrecorder#invert_rename_table()","activerecord::connectionadapters::postgresqladapter#is_cached_plan_failure?()","activerecord::type::internal::timezone#is_utc?()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","activerecord::connectionadapters::mysql::columnmethods#json()","activerecord::connectionadapters::postgresql::columnmethods#json()","activerecord::connectionadapters::postgresql::columnmethods#jsonb()","activerecord::reflection::macroreflection#klass()","activerecord::notouching::klasses()","activerecord::associations::collectionproxy#last()","activerecord::findermethods#last()","activerecord::result#last()","activerecord::findermethods#last!()","activerecord::connectionadapters::mysql::databasestatements#last_inserted_id()","activerecord::connectionadapters::sqlite3adapter#last_inserted_id()","activerecord::connectionadapters::abstractadapter#lease()","activerecord::querymethods#left_joins()","activerecord::querymethods#left_outer_joins()","activerecord::associations::collectionproxy#length()","activerecord::result#length()","activerecord::querymethods#limit()","activerecord::findermethods#limited_ids_for()","activerecord::connectionadapters::postgresql::columnmethods#line()","activerecord::relation#load()","activerecord::testfixtures#load_fixtures()","activerecord::testfixtures#load_instances?()","activerecord::migrationproxy#load_migration()","activerecord::relation#load_records()","activerecord::modelschema::classmethods#load_schema()","activerecord::modelschema::classmethods#load_schema!()","activerecord::tasks::databasetasks#load_schema_current()","activerecord::tasks::databasetasks#load_schema_for()","activerecord::migration::load_schema_if_pending!()","activerecord::tasks::databasetasks#load_seed()","activerecord::associations::collectionproxy#load_target()","activerecord::associations::collectionproxy#loaded?()","activerecord::tasks::databasetasks#local_database?()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::connectionadapters::querycache#locked?()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_column=()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","activerecord::logsubscriber#logger()","activerecord::connectionadapters::mysql::columnmethods#longblob()","activerecord::connectionadapters::mysql::columnmethods#longtext()","activerecord::connectionadapters::postgresql::columnmethods#lseg()","activerecord::connectionadapters::postgresql::columnmethods#ltree()","activerecord::connectionadapters::postgresql::columnmethods#macaddr()","activerecord::associations::collectionproxy#many?()","activerecord::relation#many?()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activerecord::connectionadapters::schemacache#marshal_dump()","activerecord::connectionadapters::schemacache#marshal_load()","activerecord::dynamicmatchers::method::match()","activerecord::timestamp#max_updated_column_timestamp()","activerecord::calculations#maximum()","activerecord::connectionadapters::mysql::columnmethods#mediumblob()","activerecord::connectionadapters::mysql::columnmethods#mediumtext()","activerecord::spawnmethods#merge()","activerecord::migration#method_missing()","activerecord::migration::commandrecorder#method_missing()","activerecord::migration::migrate()","activerecord::migration#migrate()","activerecord::tasks::databasetasks#migrate()","activerecord::migrationproxy#migration()","activerecord::connectionadapters::columndumper#migration_keys()","activerecord::connectionadapters::mysql::columndumper#migration_keys()","activerecord::connectionadapters::postgresql::columndumper#migration_keys()","activerecord::tasks::databasetasks#migrations_paths()","activerecord::calculations#minimum()","activerecord::fixtureset#model_class=()","activerecord::connectionadapters::postgresql::columnmethods#money()","activerecord::migrationproxy#mtime()","activerecord::connectionadapters#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","activerecord::autosaveassociation#nested_records_changed_for_autosave?()","activerecord::associationrelation#new()","activerecord::associationrelation::new()","activerecord::associations::collectionproxy#new()","activerecord::attributeassignmenterror::new()","activerecord::connectionadapters::new()","activerecord::connectionadapters::abstractadapter::version::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::connectionpool::queue::new()","activerecord::connectionadapters::connectionpool::reaper::new()","activerecord::connectionadapters::databasestatements::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::postgresql::oid::bit::data::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::postgresqladapter::statementpool::new()","activerecord::connectionadapters::postgresqltypemetadata::new()","activerecord::connectionadapters::querycache::new()","activerecord::connectionadapters::querycache::connectionpoolconfiguration::new()","activerecord::connectionadapters::realtransaction::new()","activerecord::connectionadapters::sqlite3adapter::new()","activerecord::connectionadapters::savepointtransaction::new()","activerecord::connectionadapters::schemacache::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::connectionadapters::transactionstate::new()","activerecord::core::new()","activerecord::dynamicmatchers::method::new()","activerecord::eagerloadpolymorphicerror::new()","activerecord::environmentmismatcherror::new()","activerecord::fixtureset::new()","activerecord::fixtureset::classcache::new()","activerecord::inheritance::classmethods#new()","activerecord::logsubscriber::new()","activerecord::migration::new()","activerecord::migration::checkpending::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationproxy::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::querymethods::wherechain::new()","activerecord::recordinvalid::new()","activerecord::recordnotdestroyed::new()","activerecord::recordnotfound::new()","activerecord::recordnotsaved::new()","activerecord::reflection::macroreflection::new()","activerecord::relation::new()","activerecord::relation#new()","activerecord::result::new()","activerecord::staleobjecterror::new()","activerecord::statementinvalid::new()","activerecord::unknownprimarykey::new()","activerecord::connectionadapters::connectionpool#new_connection()","activerecord::querymethods#new_from_clause()","activerecord::querymethods#new_having_clause()","activerecord::persistence#new_record?()","activerecord::querymethods#new_where_clause()","activerecord::connectionadapters::postgresqladapter::statementpool#next_key()","activerecord::generators::migration::classmethods#next_migration_number()","activerecord::migration#next_migration_number()","activerecord::modelschema::classmethods#next_sequence_value()","activerecord::notouching::classmethods#no_touching()","activerecord::notouching#no_touching?()","activerecord::connectionadapters::connectionpool::queue#no_wait_poll()","activerecord::querymethods#none()","activerecord::relation#none?()","activerecord::autosaveassociation#normalize_reflection_attribute()","activerecord::querymethods::wherechain#not()","activerecord::associations::collectionproxy#null_scope?()","activerecord::connectionadapters::connectionpool::queue#num_waiting()","activerecord::connectionadapters::postgresql::columnmethods#numrange()","activerecord::querymethods#offset()","activerecord::findermethods#offset_index()","activerecord::relation#one?()","activerecord::spawnmethods#only()","activerecord::calculations#operation_over_aggregate_column()","activerecord::connectionadapters::schemastatements#options_include_default?()","activerecord::querymethods#or()","activerecord::querymethods#order()","activerecord::statementinvalid#original_exception()","activerecord::connectionadapters::connectionhandler#owner_to_pool()","activerecord::connectionadapters::postgresql::columnmethods#path()","activerecord::dynamicmatchers::method::pattern()","activerecord::calculations#perform_calculation()","activerecord::persistence#persisted?()","activerecord::attributemethods#pk_attribute?()","activerecord::associations::collectionproxy#pluck()","activerecord::calculations#pluck()","activerecord::modelschema::pluralize_table_names()","activerecord::modelschema::pluralize_table_names=()","activerecord::connectionadapters::postgresql::columnmethods#point()","activerecord::connectionadapters::connectionpool::queue#poll()","activerecord::connectionadapters::postgresql::columnmethods#polygon()","activerecord::connectionadapters::connectionhandler#pool_from_any_process_for()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activerecord::modelschema::classmethods#prefetch_primary_key?()","activerecord::dynamicmatchers::findby::prefix()","activerecord::dynamicmatchers::findbybang::prefix()","activerecord::dynamicmatchers::method::prefix()","activerecord::querymethods#preload()","activerecord::connectionadapters::columndumper#prepare_column_options()","activerecord::connectionadapters::mysql::columndumper#prepare_column_options()","activerecord::connectionadapters::postgresql::columndumper#prepare_column_options()","activerecord::connectionadapters::schemacache#prepare_data_sources()","activerecord::connectionadapters::postgresqladapter#prepare_statement()","activerecord::associations::collectionproxy#prepend()","activerecord::querymethods#preprocess_order_args()","activerecord::core#pretty_print()","activerecord::relation#pretty_print()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::columnmethods#primary_key()","activerecord::connectionadapters::mysql::columnmethods#primary_key()","activerecord::connectionadapters::postgresql::columnmethods#primary_key()","activerecord::connectionadapters::schemastatements#primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::fixtureset#primary_key_name()","activerecord::modelschema::primary_key_prefix_type()","activerecord::modelschema::primary_key_prefix_type=()","activerecord::fixtureset#primary_key_type()","activerecord::generators::migration#primary_key_type()","activerecord::connectionadapters::schemacache#primary_keys()","activerecord::migration#proper_table_name()","activerecord::modelschema::protected_environments()","activerecord::modelschema::protected_environments=()","activerecord::associationrelation#proxy_association()","activerecord::associations::collectionproxy#proxy_association()","activerecord::tasks::databasetasks#purge()","activerecord::tasks::databasetasks#purge_all()","activerecord::tasks::databasetasks#purge_current()","activerecord::associations::collectionproxy#push()","activerecord::attributemethods::query#query_attribute()","activerecord::connectionadapters::querycache::connectionpoolconfiguration#query_cache_enabled()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::postgresql::quoting#quote_schema_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::postgresql::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::modelschema::classmethods#quoted_table_name()","activerecord::connectionadapters::quoting#quoted_true()","activerecord::enum#raise_conflict_error()","activerecord::transactions::classmethods#raise_in_transactional_callbacks()","activerecord::transactions::classmethods#raise_in_transactional_callbacks=()","activerecord::validations#raise_validation_error()","activerecord::connectionadapters::abstractadapter#raw_connection()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activerecord::fixtureset#read_fixture_files()","activerecord::store#read_store_attribute()","activerecord::aggregations::classmethods#reader_method()","activerecord::querymethods#readonly()","activerecord::core#readonly!()","activerecord::core#readonly?()","activerecord::attributemethods#readonly_attribute?()","activerecord::readonlyattributes::classmethods#readonly_attributes()","activerecord::connectionadapters::connectionpool#reap()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::migration::commandrecorder#record()","activerecord::autosaveassociation#record_changed?()","activerecord::connectionadapters#recreate_database()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::querymethods#references()","activerecord::relation#references_eager_loaded_tables?()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","activerecord::reflection::classmethods#reflections()","activerecord::type::register()","activerecord::tasks::databasetasks#register_task()","activerecord::locking::optimistic#relation_for_destroy()","activerecord::persistence#relation_for_destroy()","activerecord::connectionadapters::connectionpool#release()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::savepoints#release_savepoint()","activerecord::associations::collectionproxy#reload()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","activerecord::modelschema::classmethods#reload_schema_from_cache()","activerecord::connectionadapters::connectionpool#remove()","activerecord::connectionadapters::connectionpool::queue#remove()","activerecord::connectionadapters::table#remove()","activerecord::connectionadapters::schemastatements#remove_belongs_to()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::tabledefinition#remove_column()","activerecord::connectionadapters#remove_column_sql()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::connectionadapters#remove_columns_sql()","activerecord::connectionadapters::connectionhandler#remove_connection()","activerecord::connectionhandling#remove_connection()","activerecord::connectionadapters::connectionpool#remove_connection_from_thread_cache()","activerecord::connectionadapters::schemastatements#remove_foreign_key()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activerecord::connectionadapters#remove_index_sql()","activerecord::connectionadapters::schemastatements#remove_reference()","activerecord::connectionadapters::table#remove_references()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters#remove_timestamps_sql()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_column_indexes()","activerecord::connectionadapters#rename_column_sql()","activerecord::connectionadapters#rename_index()","activerecord::connectionadapters::postgresql::schemastatements#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activerecord::connectionadapters::table#rename_index()","activerecord::connectionadapters#rename_table()","activerecord::connectionadapters::postgresql::schemastatements#rename_table()","activerecord::connectionadapters::sqlite3adapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","activerecord::connectionadapters::schemastatements#rename_table_indexes()","activerecord::logsubscriber#render_bind()","activerecord::querymethods#reorder()","activerecord::associations::collectionproxy#replace()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqlite3adapter#requires_reloading?()","activerecord::associations::collectionproxy#reset()","activerecord::relation#reset()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","activerecord::fixtureset::reset_cache()","activerecord::modelschema::classmethods#reset_column_information()","activerecord::countercache::classmethods#reset_counters()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::attributemethods#respond_to?()","activerecord::connectionhandling#retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","activerecord::querymethods#reverse_order()","activerecord::querymethods#reverse_sql_order()","activerecord::migration#reversible()","activerecord::migration#revert()","activerecord::migration::commandrecorder#revert()","activerecord::migration#reverting?()","activerecord::querymethods#rewhere()","activerecord::connectionadapters::realtransaction#rollback()","activerecord::connectionadapters::savepointtransaction#rollback()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::transactionstate#rolledback?()","activerecord::tasks::databasetasks#root()","activerecord::connectionadapters::connectionpool::reaper#run()","activerecord::migration#run()","activerecord::querycache::run()","activerecord::testfixtures#run_in_transaction?()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","activerecord::sanitization::classmethods#sanitize_conditions()","activerecord::sanitization::classmethods#sanitize_sql()","activerecord::sanitization::classmethods#sanitize_sql_array()","activerecord::sanitization::classmethods#sanitize_sql_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_for_order()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_like()","activerecord::persistence#save()","activerecord::validations#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activerecord::autosaveassociation#save_belongs_to_association()","activerecord::autosaveassociation#save_collection_association()","activerecord::autosaveassociation#save_has_one_association()","activerecord::migration#say()","activerecord::migration#say_with_time()","activerecord::connectionadapters::abstractadapter#schema_cache=()","activerecord::connectionadapters::columndumper#schema_collation()","activerecord::connectionadapters::mysql::columndumper#schema_collation()","activerecord::connectionadapters::abstractadapter#schema_creation()","activerecord::connectionadapters::columndumper#schema_default()","activerecord::connectionadapters::postgresql::schemastatements#schema_exists?()","activerecord::connectionadapters::columndumper#schema_expression()","activerecord::connectionadapters::postgresql::columndumper#schema_expression()","activerecord::tasks::databasetasks#schema_file()","activerecord::connectionadapters::columndumper#schema_limit()","activerecord::modelschema::classmethods#schema_loaded?()","activerecord::modelschema::schema_migrations_table_name()","activerecord::modelschema::schema_migrations_table_name=()","activerecord::connectionadapters::postgresql::schemastatements#schema_names()","activerecord::connectionadapters::columndumper#schema_precision()","activerecord::connectionadapters::mysql::columndumper#schema_precision()","activerecord::connectionadapters::columndumper#schema_scale()","activerecord::connectionadapters::postgresql::schemastatements#schema_search_path()","activerecord::connectionadapters::postgresql::schemastatements#schema_search_path=()","activerecord::connectionadapters::columndumper#schema_type()","activerecord::connectionadapters::mysql::columndumper#schema_type()","activerecord::connectionadapters::postgresql::columndumper#schema_type()","activerecord::associations::collectionproxy#scope()","activerecord::scoping::named::classmethods#scope()","activerecord::reflection::macroreflection#scope_for()","activerecord::relation#scope_for_create()","activerecord::associations::collectionproxy#scoping()","activerecord::relation#scoping()","activerecord::associations::collectionproxy#second()","activerecord::findermethods#second()","activerecord::findermethods#second!()","activerecord::associations::collectionproxy#second_to_last()","activerecord::findermethods#second_to_last()","activerecord::findermethods#second_to_last!()","activerecord::tasks::databasetasks#seed_loader()","activerecord::associations::collectionproxy#select()","activerecord::querymethods#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::mysql::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","activerecord::calculations#select_for_count()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::mysql::databasestatements#select_result()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysql::databasestatements#select_rows()","activerecord::connectionadapters::postgresql::databasestatements#select_rows()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::postgresql::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","activerecord::connectionadapters::postgresql::databasestatements#select_values()","activerecord::modelschema::classmethods#sequence_name()","activerecord::modelschema::classmethods#sequence_name=()","activerecord::connectionadapters::postgresql::columnmethods#serial()","activerecord::connectionadapters::postgresql::schemastatements#serial_sequence()","activerecord::serialization#serializable_hash()","activerecord::attributemethods::serialization::classmethods#serialize()","activerecord::type::time#serialize()","activerecord::connectionadapters::postgresqladapter#session_auth=()","activerecord::testfixtures::classmethods#set_fixture_class()","activerecord::transactions::classmethods#set_options_for_callbacks!()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::connectionadapters::transactionstate#set_state()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","activerecord::timestamp#should_record_timestamps?()","activerecord::connectionadapters#show_variable()","activerecord::dynamicmatchers::method#signature()","activerecord::associations::collectionproxy#size()","activerecord::connectionadapters::schemacache#size()","activerecord::fixtureset#size()","activerecord::relation#size()","activerecord::core#slice()","activerecord::associations::collectionproxy#spawn()","activerecord::logsubscriber#sql()","activerecord::logsubscriber#sql_color()","activerecord::connectionadapters::postgresqladapter#sql_key()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::postgresqltypemetadata#sql_type()","activerecord::connectionadapters::sqlite3adapter#sqlite_version()","activerecord::inheritance::classmethods#sti_name()","activerecord::store::classmethods#store()","activerecord::store::classmethods#store_accessor()","activerecord::store#store_accessor_for()","activerecord::store::classmethods#stored_attributes()","activerecord::connectionadapters#strict_mode?()","activerecord::querymethods#string_containing_comma?()","activerecord::querymethods#structurally_incompatible_values_for_or()","activerecord::tasks::databasetasks#structure_dump()","activerecord::tasks::databasetasks#structure_load()","activerecord::inheritance::classmethods#subclass_from_attributes()","activerecord::connectionadapters#subquery_for()","activerecord::dynamicmatchers::findbybang::suffix()","activerecord::dynamicmatchers::method::suffix()","activerecord::calculations#sum()","activerecord::connectionadapters#supports_advisory_locks?()","activerecord::connectionadapters::abstractadapter#supports_advisory_locks?()","activerecord::connectionadapters::postgresqladapter#supports_advisory_locks?()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractadapter#supports_comments?()","activerecord::connectionadapters::mysql2adapter#supports_comments?()","activerecord::connectionadapters::postgresqladapter#supports_comments?()","activerecord::connectionadapters::abstractadapter#supports_comments_in_create?()","activerecord::connectionadapters::mysql2adapter#supports_comments_in_create?()","activerecord::connectionadapters#supports_datetime_with_precision?()","activerecord::connectionadapters::abstractadapter#supports_datetime_with_precision?()","activerecord::connectionadapters::postgresqladapter#supports_datetime_with_precision?()","activerecord::connectionadapters::sqlite3adapter#supports_datetime_with_precision?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqlite3adapter#supports_ddl_transactions?()","activerecord::connectionadapters#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_explain?()","activerecord::connectionadapters::postgresqladapter#supports_explain?()","activerecord::connectionadapters::sqlite3adapter#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_expression_index?()","activerecord::connectionadapters::postgresqladapter#supports_expression_index?()","activerecord::connectionadapters::abstractadapter#supports_extensions?()","activerecord::connectionadapters::postgresqladapter#supports_extensions?()","activerecord::connectionadapters#supports_foreign_keys?()","activerecord::connectionadapters::abstractadapter#supports_foreign_keys?()","activerecord::connectionadapters::postgresqladapter#supports_foreign_keys?()","activerecord::connectionadapters#supports_index_sort_order?()","activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()","activerecord::connectionadapters::sqlite3adapter#supports_index_sort_order?()","activerecord::connectionadapters#supports_indexes_in_create?()","activerecord::connectionadapters::abstractadapter#supports_indexes_in_create?()","activerecord::connectionadapters::abstractadapter#supports_json?()","activerecord::connectionadapters::mysql2adapter#supports_json?()","activerecord::connectionadapters::postgresqladapter#supports_json?()","activerecord::connectionadapters::postgresqladapter#supports_materialized_views?()","activerecord::connectionadapters#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_multi_insert?()","activerecord::connectionadapters::sqlite3adapter#supports_multi_insert?()","activerecord::connectionadapters::abstractadapter#supports_partial_index?()","activerecord::connectionadapters::postgresqladapter#supports_partial_index?()","activerecord::connectionadapters::sqlite3adapter#supports_partial_index?()","activerecord::connectionadapters#supports_primary_key?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::postgresqladapter#supports_ranges?()","activerecord::connectionadapters#supports_rename_index?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::mysql2adapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","activerecord::connectionadapters::sqlite3adapter#supports_savepoints?()","activerecord::connectionadapters#supports_statement_cache?()","activerecord::connectionadapters::databasestatements#supports_statement_cache?()","activerecord::connectionadapters::postgresqladapter#supports_statement_cache?()","activerecord::connectionadapters::sqlite3adapter#supports_statement_cache?()","activerecord::connectionadapters#supports_transaction_isolation?()","activerecord::connectionadapters::abstractadapter#supports_transaction_isolation?()","activerecord::connectionadapters::postgresqladapter#supports_transaction_isolation?()","activerecord::connectionadapters#supports_views?()","activerecord::connectionadapters::abstractadapter#supports_views?()","activerecord::connectionadapters::postgresqladapter#supports_views?()","activerecord::connectionadapters::sqlite3adapter#supports_views?()","activerecord::suppressor::classmethods#suppress()","activerecord::attributemethods::primarykey::classmethods#suppress_composite_primary_key()","activerecord::connectionadapters::postgresql::databasestatements#suppress_composite_primary_key()","activerecord::migration#suppress_messages()","activerecord::touchlater#surreptitiously_touch()","activerecord::querymethods#symbol_unscoping()","activerecord::connectionadapters::connectionpool::queue#synchronize()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::connectionadapters::schemastatements#table_comment()","activerecord::connectionadapters#table_exists?()","activerecord::connectionadapters::postgresql::schemastatements#table_exists?()","activerecord::connectionadapters::sqlite3adapter#table_exists?()","activerecord::connectionadapters::schemacache#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::modelschema::classmethods#table_exists?()","activerecord::modelschema::classmethods#table_name()","activerecord::modelschema::classmethods#table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::modelschema::table_name_prefix()","activerecord::modelschema::table_name_prefix=()","activerecord::modelschema::table_name_suffix()","activerecord::modelschema::table_name_suffix=()","activerecord::connectionadapters::schemastatements#table_options()","activerecord::fixtureset#table_rows()","activerecord::connectionadapters::sqlite3adapter#table_structure()","activerecord::connectionadapters::sqlite3adapter#table_structure_with_collation()","activerecord::connectionadapters::postgresql::schemastatements#tables()","activerecord::connectionadapters::schemacache#tables()","activerecord::connectionadapters::schemastatements#tables()","activerecord::relation#tables_in_string()","activerecord::associations::collectionproxy#take()","activerecord::findermethods#take()","activerecord::findermethods#take!()","activerecord::associations::collectionproxy#target()","activerecord::testfixtures#teardown_fixtures()","activerecord::core#thaw()","activerecord::associations::collectionproxy#third()","activerecord::findermethods#third()","activerecord::findermethods#third!()","activerecord::associations::collectionproxy#third_to_last()","activerecord::findermethods#third_to_last()","activerecord::findermethods#third_to_last!()","activerecord::timestamp#timestamp_attributes_for_create()","activerecord::timestamp#timestamp_attributes_for_create_in_model()","activerecord::timestamp#timestamp_attributes_for_update()","activerecord::timestamp#timestamp_attributes_for_update_in_model()","activerecord::fixtureset#timestamp_column_names()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activerecord::connectionadapters::mysql::columnmethods#tinyblob()","activerecord::connectionadapters::mysql::columnmethods#tinytext()","activerecord::associations::collectionproxy#to_a()","activerecord::relation#to_a()","activerecord::associations::collectionproxy#to_ary()","activerecord::result#to_ary()","activerecord::result#to_hash()","activerecord::attributemethods::primarykey#to_key()","activerecord::integration#to_param()","activerecord::integration::classmethods#to_param()","activerecord::connectionadapters::postgresql::oid::bit::data#to_s()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::relation#to_sql()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","activerecord::persistence#touch()","activerecord::touchlater#touch_deferred_attributes()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::databasestatements#transaction_isolation_levels()","activerecord::connectionadapters::databasestatements#transaction_open?()","activerecord::connectionadapters::databasestatements#transaction_state()","activerecord::connectionadapters#translate_exception()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqlite3adapter#translate_exception()","activerecord::connectionadapters::abstractadapter#translate_exception_class()","activerecord::connectionadapters#truncate()","activerecord::connectionadapters::databasestatements#truncate()","activerecord::connectionadapters::postgresqladapter#truncate()","activerecord::connectionadapters::connectionpool#try_to_checkout_new_connection()","activerecord::connectionadapters::postgresql::columnmethods#tsrange()","activerecord::connectionadapters::postgresql::columnmethods#tstzrange()","activerecord::connectionadapters::postgresql::columnmethods#tsvector()","activerecord::connectionadapters::quoting#type_cast()","activerecord::attributeassignment#type_cast_attribute_value()","activerecord::calculations#type_cast_calculated_value()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_boolean()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_integer()","activerecord::inheritance::classmethods#type_condition()","activerecord::calculations#type_for()","activerecord::modelschema::classmethods#type_for_attribute()","activerecord::connectionadapters#type_to_sql()","activerecord::connectionadapters::postgresql::schemastatements#type_to_sql()","activerecord::attributemethods#typecasted_attribute_value()","activerecord::connectionadapters::quoting#types_which_need_no_typecasting()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activerecord::modelschema::classmethods#undecorated_table_name()","activerecord::connectionadapters::postgresql::quoting#unescape_bytea()","activerecord::associations::collectionproxy#uniq()","activerecord::querymethods#uniq()","activerecord::relation#uniq_value()","activerecord::connectionadapters::abstractadapter#unprepared_statement()","activerecord::connectionadapters::quoting#unquoted_false()","activerecord::connectionadapters::quoting#unquoted_true()","activerecord::querymethods#unscope()","activerecord::scoping::default::classmethods#unscoped()","activerecord::connectionadapters::mysql::columnmethods#unsigned_bigint()","activerecord::connectionadapters::mysql::columnmethods#unsigned_decimal()","activerecord::connectionadapters::mysql::columnmethods#unsigned_float()","activerecord::connectionadapters::mysql::columnmethods#unsigned_integer()","activerecord::migration#up()","activerecord::connectionadapters::databasestatements#update()","activerecord::persistence#update()","activerecord::relation#update()","activerecord::persistence#update!()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activerecord::persistence#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::persistence#update_column()","activerecord::persistence#update_columns()","activerecord::countercache::classmethods#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter#use_insert_returning?()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","activerecord::findermethods#using_limitable_reflections?()","activerecord::inheritance::classmethods#using_single_table_inheritance?()","activerecord::connectionadapters::postgresql::columnmethods#uuid()","activerecord::dynamicmatchers::method#valid?()","activerecord::validations#valid?()","activerecord::connectionadapters::sqlite3adapter#valid_alter_table_type?()","activerecord::scoping::named::classmethods#valid_scope_name?()","activerecord::connectionadapters#valid_type?()","activerecord::connectionadapters::abstractadapter#valid_type?()","activerecord::connectionadapters::postgresqladapter#valid_type?()","activerecord::connectionadapters::sqlite3adapter#valid_type?()","activerecord::validations#validate()","activerecord::autosaveassociation#validate_collection_association()","activerecord::querymethods#validate_order_args()","activerecord::autosaveassociation#validate_single_association()","activerecord::validations::classmethods#validates_absence_of()","activerecord::validations::classmethods#validates_associated()","activerecord::validations::classmethods#validates_length_of()","activerecord::validations::classmethods#validates_presence_of()","activerecord::validations::classmethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activerecord::relation#values()","activerecord::connectionadapters::abstractadapter#verify!()","activerecord::persistence#verify_readonly_attribute()","activerecord::version()","activerecord::connectionadapters::schemastatements#view_exists?()","activerecord::connectionadapters::schemastatements#views()","activerecord::connectionadapters::mysql::schemacreation#visit_addcolumndefinition()","activerecord::connectionadapters::determineifpreparablevisitor#visit_arel_nodes_in()","activerecord::connectionadapters::determineifpreparablevisitor#visit_arel_nodes_sqlliteral()","activerecord::connectionadapters::mysql::schemacreation#visit_changecolumndefinition()","activerecord::connectionadapters::mysql::schemacreation#visit_columndefinition()","activerecord::connectionadapters::postgresql::schemacreation#visit_columndefinition()","activerecord::connectionadapters::mysql::schemacreation#visit_dropforeignkey()","activerecord::connectionadapters::connectionpool::queue#wait_poll()","activerecord::modelschema::classmethods#warn_if_deprecated_type()","activerecord::querymethods#where()","activerecord::querymethods#where_clause_factory()","activerecord::relation#where_values_hash()","activerecord::connectionadapters::connectionpool#with_connection()","activerecord::connectionadapters::connectionpool#with_exclusively_acquired_all_connections()","activerecord::locking::pessimistic#with_lock()","activerecord::connectionadapters::connectionpool#with_new_connections_blocked()","activerecord::connectionadapters::abstractadapter#without_prepared_statement?()","activerecord::migration#write()","activerecord::attributemethods::write#write_attribute()","activerecord::attributemethods::write#write_attribute_with_type_cast()","activerecord::store#write_store_attribute()","activerecord::aggregations::classmethods#writer_method()","activerecord::connectionadapters::postgresql::columnmethods#xml()","activerecord::fixtureset#yaml_file_path()","",""],"info":[["ActiveRecord","","ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","ActiveRecord/Aggregations.html","","<p>See ActiveRecord::Aggregations::ClassMethods for documentation\n"],["ActiveRecord::Aggregations::ClassMethods","","ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled #composed_of for representing …\n"],["ActiveRecord::AssociationNotFoundError","","ActiveRecord/AssociationNotFoundError.html","",""],["ActiveRecord::AssociationRelation","","ActiveRecord/AssociationRelation.html","",""],["ActiveRecord::AssociationTypeMismatch","","ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre>class Ticket &lt; ActiveRecord::Base ...</pre>\n"],["ActiveRecord::Associations","","ActiveRecord/Associations.html","","<p>Active Record Belongs To Association\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record Has …\n"],["ActiveRecord::Associations::AliasTracker","","ActiveRecord/Associations/AliasTracker.html","",""],["ActiveRecord::Associations::Association","","ActiveRecord/Associations/Association.html","",""],["ActiveRecord::Associations::AssociationScope","","ActiveRecord/Associations/AssociationScope.html","",""],["ActiveRecord::Associations::AssociationScope::ReflectionProxy","","ActiveRecord/Associations/AssociationScope/ReflectionProxy.html","",""],["ActiveRecord::Associations::BelongsToAssociation","","ActiveRecord/Associations/BelongsToAssociation.html","",""],["ActiveRecord::Associations::BelongsToPolymorphicAssociation","","ActiveRecord/Associations/BelongsToPolymorphicAssociation.html","",""],["ActiveRecord::Associations::Builder","","ActiveRecord/Associations/Builder.html","",""],["ActiveRecord::Associations::Builder::Association","","ActiveRecord/Associations/Builder/Association.html","",""],["ActiveRecord::Associations::Builder::BelongsTo","","ActiveRecord/Associations/Builder/BelongsTo.html","",""],["ActiveRecord::Associations::Builder::CollectionAssociation","","ActiveRecord/Associations/Builder/CollectionAssociation.html","",""],["ActiveRecord::Associations::Builder::HasAndBelongsToMany","","ActiveRecord/Associations/Builder/HasAndBelongsToMany.html","",""],["ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver","","ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver.html","",""],["ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass","","ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver/KnownClass.html","",""],["ActiveRecord::Associations::Builder::HasMany","","ActiveRecord/Associations/Builder/HasMany.html","",""],["ActiveRecord::Associations::Builder::HasOne","","ActiveRecord/Associations/Builder/HasOne.html","",""],["ActiveRecord::Associations::Builder::SingularAssociation","","ActiveRecord/Associations/Builder/SingularAssociation.html","",""],["ActiveRecord::Associations::ClassMethods","","ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::Associations::CollectionAssociation","","ActiveRecord/Associations/CollectionAssociation.html","",""],["ActiveRecord::Associations::CollectionProxy","","ActiveRecord/Associations/CollectionProxy.html","","<p>Association proxies in Active Record are middlemen between the object that\nholds the association, known …\n"],["ActiveRecord::Associations::ForeignAssociation","","ActiveRecord/Associations/ForeignAssociation.html","",""],["ActiveRecord::Associations::HasManyAssociation","","ActiveRecord/Associations/HasManyAssociation.html","",""],["ActiveRecord::Associations::HasManyThroughAssociation","","ActiveRecord/Associations/HasManyThroughAssociation.html","",""],["ActiveRecord::Associations::HasOneAssociation","","ActiveRecord/Associations/HasOneAssociation.html","",""],["ActiveRecord::Associations::HasOneThroughAssociation","","ActiveRecord/Associations/HasOneThroughAssociation.html","",""],["ActiveRecord::Associations::JoinDependency","","ActiveRecord/Associations/JoinDependency.html","",""],["ActiveRecord::Associations::JoinDependency::Aliases","","ActiveRecord/Associations/JoinDependency/Aliases.html","",""],["ActiveRecord::Associations::JoinDependency::Aliases::Table","","ActiveRecord/Associations/JoinDependency/Aliases/Table.html","",""],["ActiveRecord::Associations::JoinDependency::JoinAssociation","","ActiveRecord/Associations/JoinDependency/JoinAssociation.html","",""],["ActiveRecord::Associations::JoinDependency::JoinBase","","ActiveRecord/Associations/JoinDependency/JoinBase.html","",""],["ActiveRecord::Associations::JoinDependency::JoinPart","","ActiveRecord/Associations/JoinDependency/JoinPart.html","",""],["ActiveRecord::Associations::Preloader","","ActiveRecord/Associations/Preloader.html","",""],["ActiveRecord::Associations::Preloader::AlreadyLoaded","","ActiveRecord/Associations/Preloader/AlreadyLoaded.html","",""],["ActiveRecord::Associations::Preloader::Association","","ActiveRecord/Associations/Preloader/Association.html","",""],["ActiveRecord::Associations::Preloader::BelongsTo","","ActiveRecord/Associations/Preloader/BelongsTo.html","",""],["ActiveRecord::Associations::Preloader::CollectionAssociation","","ActiveRecord/Associations/Preloader/CollectionAssociation.html","",""],["ActiveRecord::Associations::Preloader::HasMany","","ActiveRecord/Associations/Preloader/HasMany.html","",""],["ActiveRecord::Associations::Preloader::HasManyThrough","","ActiveRecord/Associations/Preloader/HasManyThrough.html","",""],["ActiveRecord::Associations::Preloader::HasOne","","ActiveRecord/Associations/Preloader/HasOne.html","",""],["ActiveRecord::Associations::Preloader::HasOneThrough","","ActiveRecord/Associations/Preloader/HasOneThrough.html","",""],["ActiveRecord::Associations::Preloader::NullPreloader","","ActiveRecord/Associations/Preloader/NullPreloader.html","",""],["ActiveRecord::Associations::Preloader::SingularAssociation","","ActiveRecord/Associations/Preloader/SingularAssociation.html","",""],["ActiveRecord::Associations::Preloader::ThroughAssociation","","ActiveRecord/Associations/Preloader/ThroughAssociation.html","",""],["ActiveRecord::Associations::SingularAssociation","","ActiveRecord/Associations/SingularAssociation.html","",""],["ActiveRecord::Associations::ThroughAssociation","","ActiveRecord/Associations/ThroughAssociation.html","",""],["ActiveRecord::Attribute","","ActiveRecord/Attribute.html","",""],["ActiveRecord::Attribute::FromDatabase","","ActiveRecord/Attribute/FromDatabase.html","",""],["ActiveRecord::Attribute::FromUser","","ActiveRecord/Attribute/FromUser.html","",""],["ActiveRecord::Attribute::Null","","ActiveRecord/Attribute/Null.html","",""],["ActiveRecord::Attribute::Uninitialized","","ActiveRecord/Attribute/Uninitialized.html","",""],["ActiveRecord::Attribute::UserProvidedDefault","","ActiveRecord/Attribute/UserProvidedDefault.html","",""],["ActiveRecord::Attribute::WithCastValue","","ActiveRecord/Attribute/WithCastValue.html","",""],["ActiveRecord::AttributeAssignment","","ActiveRecord/AttributeAssignment.html","",""],["ActiveRecord::AttributeAssignmentError","","ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the ActiveRecord::Base#attributes= …\n"],["ActiveRecord::AttributeDecorators","","ActiveRecord/AttributeDecorators.html","",""],["ActiveRecord::AttributeDecorators::ClassMethods","","ActiveRecord/AttributeDecorators/ClassMethods.html","",""],["ActiveRecord::AttributeDecorators::TypeDecorator","","ActiveRecord/AttributeDecorators/TypeDecorator.html","",""],["ActiveRecord::AttributeMethods","","ActiveRecord/AttributeMethods.html","","<p>Active Record Attribute Methods\n"],["ActiveRecord::AttributeMethods::BeforeTypeCast","","ActiveRecord/AttributeMethods/BeforeTypeCast.html","","<p>Active Record Attribute Methods Before Type Cast\n<p>ActiveRecord::AttributeMethods::BeforeTypeCast provides …\n"],["ActiveRecord::AttributeMethods::ClassMethods","","ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Dirty","","ActiveRecord/AttributeMethods/Dirty.html","",""],["ActiveRecord::AttributeMethods::GeneratedAttributeMethods","","ActiveRecord/AttributeMethods/GeneratedAttributeMethods.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization","","ActiveRecord/AttributeMethods/Serialization.html","",""],["ActiveRecord::AttributeMethods::Serialization::ClassMethods","","ActiveRecord/AttributeMethods/Serialization/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter","","ActiveRecord/AttributeMethods/TimeZoneConversion/TimeZoneConverter.html","",""],["ActiveRecord::AttributeMethods::Write","","ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AttributeMutationTracker","","ActiveRecord/AttributeMutationTracker.html","",""],["ActiveRecord::AttributeSet","","ActiveRecord/AttributeSet.html","",""],["ActiveRecord::AttributeSet::Builder","","ActiveRecord/AttributeSet/Builder.html","",""],["ActiveRecord::Attributes","","ActiveRecord/Attributes.html","","<p>See ActiveRecord::Attributes::ClassMethods for documentation\n"],["ActiveRecord::Attributes::ClassMethods","","ActiveRecord/Attributes/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p>AutosaveAssociation is a module that takes care of automatically saving …\n"],["ActiveRecord::AutosaveAssociation::AssociationBuilderExtension","","ActiveRecord/AutosaveAssociation/AssociationBuilderExtension.html","",""],["ActiveRecord::AutosaveAssociation::ClassMethods","","ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don&#39;t specify their attributes directly, but\nrather infer them …\n"],["ActiveRecord::Batches","","ActiveRecord/Batches.html","",""],["ActiveRecord::Batches::BatchEnumerator","","ActiveRecord/Batches/BatchEnumerator.html","",""],["ActiveRecord::Calculations","","ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Callbacks::ClassMethods","","ActiveRecord/Callbacks/ClassMethods.html","",""],["ActiveRecord::Coders","","ActiveRecord/Coders.html","",""],["ActiveRecord::Coders::JSON","","ActiveRecord/Coders/JSON.html","",""],["ActiveRecord::Coders::YAMLColumn","","ActiveRecord/Coders/YAMLColumn.html","",""],["ActiveRecord::CollectionCacheKey","","ActiveRecord/CollectionCacheKey.html","",""],["ActiveRecord::ConcurrentMigrationError","","ActiveRecord/ConcurrentMigrationError.html","",""],["ActiveRecord::ConfigurationError","","ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector","","ActiveRecord/ConnectionAdapters/AbstractAdapter/BindCollector.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString","","ActiveRecord/ConnectionAdapters/AbstractAdapter/SQLString.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation","","ActiveRecord/ConnectionAdapters/AbstractAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter::Version","","ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::StatementPool","","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::AddColumnDefinition","","ActiveRecord/ConnectionAdapters/AddColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::AlterTable","","ActiveRecord/ConnectionAdapters/AlterTable.html","",""],["ActiveRecord::ConnectionAdapters::ChangeColumnDefinition","","ActiveRecord/ConnectionAdapters/ChangeColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::Column","","ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::ColumnDefinition","","ActiveRecord/ConnectionAdapters/ColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::ColumnDumper","","ActiveRecord/ConnectionAdapters/ColumnDumper.html","","<p>The goal of this module is to move Adapter specific column definitions to\nthe Adapter instead of having …\n"],["ActiveRecord::ConnectionAdapters::ColumnMethods","","ActiveRecord/ConnectionAdapters/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool","","ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue","","ActiveRecord/ConnectionAdapters/ConnectionPool/BiasableQueue.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable","","ActiveRecord/ConnectionAdapters/ConnectionPool/BiasableQueue/BiasedConditionVariable.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue","","ActiveRecord/ConnectionAdapters/ConnectionPool/ConnectionLeasingQueue.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html","","<p>Threadsafe, fair, FIFO queue.  Meant to be used by ConnectionPool with\nwhich it shares a Monitor.  But …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","","ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html","","<p>Every <code>frequency</code> seconds, the reaper will call\n<code>reap</code> on <code>pool</code>. A reaper instantiated with a nil\nfrequency …\n"],["ActiveRecord::ConnectionAdapters::ConnectionSpecification","","ActiveRecord/ConnectionAdapters/ConnectionSpecification.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionSpecification::ConnectionUrlResolver","","ActiveRecord/ConnectionAdapters/ConnectionSpecification/ConnectionUrlResolver.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionSpecification::Resolver","","ActiveRecord/ConnectionAdapters/ConnectionSpecification/Resolver.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor","","ActiveRecord/ConnectionAdapters/DetermineIfPreparableVisitor.html","",""],["ActiveRecord::ConnectionAdapters::ForeignKeyDefinition","","ActiveRecord/ConnectionAdapters/ForeignKeyDefinition.html","",""],["ActiveRecord::ConnectionAdapters::IndexDefinition","","ActiveRecord/ConnectionAdapters/IndexDefinition.html","",""],["ActiveRecord::ConnectionAdapters::MySQL","","ActiveRecord/ConnectionAdapters/MySQL.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::Column","","ActiveRecord/ConnectionAdapters/MySQL/Column.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::ColumnDefinition","","ActiveRecord/ConnectionAdapters/MySQL/ColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper","","ActiveRecord/ConnectionAdapters/MySQL/ColumnDumper.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::ExplainPrettyPrinter","","ActiveRecord/ConnectionAdapters/MySQL/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::Quoting","","ActiveRecord/ConnectionAdapters/MySQL/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::Table","","ActiveRecord/ConnectionAdapters/MySQL/Table.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::TableDefinition","","ActiveRecord/ConnectionAdapters/MySQL/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::TypeMetadata","","ActiveRecord/ConnectionAdapters/MySQL/TypeMetadata.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::MysqlJson","","ActiveRecord/ConnectionAdapters/MysqlJson.html","",""],["ActiveRecord::ConnectionAdapters::MysqlString","","ActiveRecord/ConnectionAdapters/MysqlString.html","",""],["ActiveRecord::ConnectionAdapters::NullColumn","","ActiveRecord/ConnectionAdapters/NullColumn.html","",""],["ActiveRecord::ConnectionAdapters::NullTransaction","","ActiveRecord/ConnectionAdapters/NullTransaction.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL","","ActiveRecord/ConnectionAdapters/PostgreSQL.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDefinition","","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDumper","","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDumper.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::ExplainPrettyPrinter","","ActiveRecord/ConnectionAdapters/PostgreSQL/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::Name","","ActiveRecord/ConnectionAdapters/PostgreSQL/Name.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Array.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::BitVarying","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/BitVarying.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bytea","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bytea.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Cidr","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Cidr.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/DateTime.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Decimal","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Decimal.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Enum","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Enum.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Hstore.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Inet","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Inet.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Json","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Json.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Jsonb","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Jsonb.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Money","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Money.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Point","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Point.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Rails51Point","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Rails51Point.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Range.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::SpecializedString","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/SpecializedString.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TypeMapInitializer","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/TypeMapInitializer.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Uuid.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Vector","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Vector.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Xml.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml::Data","","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Xml/Data.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","","ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity","","ActiveRecord/ConnectionAdapters/PostgreSQL/ReferentialIntegrity.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation","","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::Table","","ActiveRecord/ConnectionAdapters/PostgreSQL/Table.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition","","ActiveRecord/ConnectionAdapters/PostgreSQL/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::Utils","","ActiveRecord/ConnectionAdapters/PostgreSQL/Utils.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works with the native C (bitbucket.org/ged/ruby-pg)\ndriver.\n<p>Options:\n<p><code>:host</code> - Defaults …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn","","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata","","ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html","",""],["ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition","","ActiveRecord/ConnectionAdapters/PrimaryKeyDefinition.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","","ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::RealTransaction","","ActiveRecord/ConnectionAdapters/RealTransaction.html","",""],["ActiveRecord::ConnectionAdapters::ReferenceDefinition","","ActiveRecord/ConnectionAdapters/ReferenceDefinition.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3","","ActiveRecord/ConnectionAdapters/SQLite3.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3::ExplainPrettyPrinter","","ActiveRecord/ConnectionAdapters/SQLite3/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3::Quoting","","ActiveRecord/ConnectionAdapters/SQLite3/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3::SchemaCreation","","ActiveRecord/ConnectionAdapters/SQLite3/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter","","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html","","<p>The SQLite3 adapter works SQLite 3.6.16 or newer with the sqlite3-ruby\ndrivers (available as gem from …\n"],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::SavepointTransaction","","ActiveRecord/ConnectionAdapters/SavepointTransaction.html","",""],["ActiveRecord::ConnectionAdapters::Savepoints","","ActiveRecord/ConnectionAdapters/Savepoints.html","",""],["ActiveRecord::ConnectionAdapters::SchemaCache","","ActiveRecord/ConnectionAdapters/SchemaCache.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::SqlTypeMetadata","","ActiveRecord/ConnectionAdapters/SqlTypeMetadata.html","",""],["ActiveRecord::ConnectionAdapters::StatementPool","","ActiveRecord/ConnectionAdapters/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::Table","","ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and connection.create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionAdapters::Transaction","","ActiveRecord/ConnectionAdapters/Transaction.html","",""],["ActiveRecord::ConnectionAdapters::TransactionManager","","ActiveRecord/ConnectionAdapters/TransactionManager.html","",""],["ActiveRecord::ConnectionAdapters::TransactionState","","ActiveRecord/ConnectionAdapters/TransactionState.html","",""],["ActiveRecord::ConnectionAdapters::Type","","ActiveRecord/ConnectionAdapters/Type.html","",""],["ActiveRecord::ConnectionHandling","","ActiveRecord/ConnectionHandling.html","",""],["ActiveRecord::ConnectionHandling::MergeAndResolveDefaultUrlConfig","","ActiveRecord/ConnectionHandling/MergeAndResolveDefaultUrlConfig.html","",""],["ActiveRecord::ConnectionNotEstablished","","ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when ActiveRecord::Base.connection= …\n"],["ActiveRecord::ConnectionTimeoutError","","ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period: because …\n"],["ActiveRecord::Core","","ActiveRecord/Core.html","",""],["ActiveRecord::Core::ClassMethods","","ActiveRecord/Core/ClassMethods.html","",""],["ActiveRecord::CounterCache","","ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::CounterCache::ClassMethods","","ActiveRecord/CounterCache/ClassMethods.html","",""],["ActiveRecord::DangerousAttributeError","","ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::Delegation","","ActiveRecord/Delegation.html","",""],["ActiveRecord::Delegation::ClassMethods","","ActiveRecord/Delegation/ClassMethods.html","",""],["ActiveRecord::Delegation::ClassSpecificRelation","","ActiveRecord/Delegation/ClassSpecificRelation.html","",""],["ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods","","ActiveRecord/Delegation/ClassSpecificRelation/ClassMethods.html","",""],["ActiveRecord::Delegation::DelegateCache","","ActiveRecord/Delegation/DelegateCache.html","",""],["ActiveRecord::DeleteRestrictionError","","ActiveRecord/DeleteRestrictionError.html","",""],["ActiveRecord::DuplicateMigrationNameError","","ActiveRecord/DuplicateMigrationNameError.html","",""],["ActiveRecord::DuplicateMigrationVersionError","","ActiveRecord/DuplicateMigrationVersionError.html","",""],["ActiveRecord::DynamicMatchers","","ActiveRecord/DynamicMatchers.html","",""],["ActiveRecord::DynamicMatchers::FindBy","","ActiveRecord/DynamicMatchers/FindBy.html","",""],["ActiveRecord::DynamicMatchers::FindByBang","","ActiveRecord/DynamicMatchers/FindByBang.html","",""],["ActiveRecord::DynamicMatchers::Method","","ActiveRecord/DynamicMatchers/Method.html","",""],["ActiveRecord::EagerLoadPolymorphicError","","ActiveRecord/EagerLoadPolymorphicError.html","","<p>This error is raised when trying to eager load a polymorphic association\nusing a JOIN. Eager loading …\n"],["ActiveRecord::Enum","","ActiveRecord/Enum.html","","<p>Declare an enum attribute where the values map to integers in the database,\nbut can be queried by name. …\n"],["ActiveRecord::Enum::EnumType","","ActiveRecord/Enum/EnumType.html","",""],["ActiveRecord::EnvironmentMismatchError","","ActiveRecord/EnvironmentMismatchError.html","",""],["ActiveRecord::ExclusiveConnectionTimeoutError","","ActiveRecord/ExclusiveConnectionTimeoutError.html","","<p>Raised when a pool was unable to get ahold of all its connections to\nperform a “group” action …\n"],["ActiveRecord::Explain","","ActiveRecord/Explain.html","",""],["ActiveRecord::ExplainRegistry","","ActiveRecord/ExplainRegistry.html","",""],["ActiveRecord::ExplainSubscriber","","ActiveRecord/ExplainSubscriber.html","",""],["ActiveRecord::ExplainSubscriber::ActiveSupport","","ActiveRecord/ExplainSubscriber/ActiveSupport.html","",""],["ActiveRecord::FinderMethods","","ActiveRecord/FinderMethods.html","",""],["ActiveRecord::Fixture","","ActiveRecord/Fixture.html","",""],["ActiveRecord::Fixture::FixtureError","","ActiveRecord/Fixture/FixtureError.html","",""],["ActiveRecord::Fixture::FormatError","","ActiveRecord/Fixture/FormatError.html","",""],["ActiveRecord::FixtureClassNotFound","","ActiveRecord/FixtureClassNotFound.html","",""],["ActiveRecord::FixtureSet","","ActiveRecord/FixtureSet.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>They are stored …\n"],["ActiveRecord::FixtureSet::ClassCache","","ActiveRecord/FixtureSet/ClassCache.html","",""],["ActiveRecord::FixtureSet::File","","ActiveRecord/FixtureSet/File.html","",""],["ActiveRecord::FixtureSet::HasManyThroughProxy","","ActiveRecord/FixtureSet/HasManyThroughProxy.html","",""],["ActiveRecord::FixtureSet::ReflectionProxy","","ActiveRecord/FixtureSet/ReflectionProxy.html","",""],["ActiveRecord::FixtureSet::RenderContext","","ActiveRecord/FixtureSet/RenderContext.html","",""],["ActiveRecord::Generators","","ActiveRecord/Generators.html","",""],["ActiveRecord::Generators::Base","","ActiveRecord/Generators/Base.html","",""],["ActiveRecord::Generators::Migration","","ActiveRecord/Generators/Migration.html","",""],["ActiveRecord::Generators::Migration::ClassMethods","","ActiveRecord/Generators/Migration/ClassMethods.html","",""],["ActiveRecord::Generators::MigrationGenerator","","ActiveRecord/Generators/MigrationGenerator.html","",""],["ActiveRecord::Generators::ModelGenerator","","ActiveRecord/Generators/ModelGenerator.html","",""],["ActiveRecord::HasManyThroughAssociationNotFoundError","","ActiveRecord/HasManyThroughAssociationNotFoundError.html","",""],["ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError","","ActiveRecord/HasManyThroughAssociationPointlessSourceTypeError.html","",""],["ActiveRecord::HasManyThroughAssociationPolymorphicSourceError","","ActiveRecord/HasManyThroughAssociationPolymorphicSourceError.html","",""],["ActiveRecord::HasManyThroughAssociationPolymorphicThroughError","","ActiveRecord/HasManyThroughAssociationPolymorphicThroughError.html","",""],["ActiveRecord::HasManyThroughCantAssociateNewRecords","","ActiveRecord/HasManyThroughCantAssociateNewRecords.html","",""],["ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection","","ActiveRecord/HasManyThroughCantAssociateThroughHasOneOrManyReflection.html","",""],["ActiveRecord::HasManyThroughCantDissociateNewRecords","","ActiveRecord/HasManyThroughCantDissociateNewRecords.html","",""],["ActiveRecord::HasManyThroughNestedAssociationsAreReadonly","","ActiveRecord/HasManyThroughNestedAssociationsAreReadonly.html","",""],["ActiveRecord::HasManyThroughSourceAssociationNotFoundError","","ActiveRecord/HasManyThroughSourceAssociationNotFoundError.html","",""],["ActiveRecord::HasOneAssociationPolymorphicThroughError","","ActiveRecord/HasOneAssociationPolymorphicThroughError.html","",""],["ActiveRecord::HasOneThroughCantAssociateThroughCollection","","ActiveRecord/HasOneThroughCantAssociateThroughCollection.html","",""],["ActiveRecord::HasOneThroughCantAssociateThroughHasOneOrManyReflection","","ActiveRecord/HasOneThroughCantAssociateThroughHasOneOrManyReflection.html","",""],["ActiveRecord::HasOneThroughNestedAssociationsAreReadonly","","ActiveRecord/HasOneThroughNestedAssociationsAreReadonly.html","",""],["ActiveRecord::IllegalMigrationNameError","","ActiveRecord/IllegalMigrationNameError.html","",""],["ActiveRecord::ImmutableRelation","","ActiveRecord/ImmutableRelation.html","","<p>Raised when a relation cannot be mutated because it&#39;s already loaded.\n\n<pre>class Task &lt; ActiveRecord::Base ...</pre>\n"],["ActiveRecord::Inheritance","","ActiveRecord/Inheritance.html","","<p>Single table inheritance\n<p>Active Record allows inheritance by storing the name of the class in a\ncolumn …\n"],["ActiveRecord::Inheritance::ClassMethods","","ActiveRecord/Inheritance/ClassMethods.html","",""],["ActiveRecord::Integration","","ActiveRecord/Integration.html","",""],["ActiveRecord::Integration::ClassMethods","","ActiveRecord/Integration/ClassMethods.html","",""],["ActiveRecord::InternalMetadata","","ActiveRecord/InternalMetadata.html","",""],["ActiveRecord::InvalidForeignKey","","ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::InverseOfAssociationNotFoundError","","ActiveRecord/InverseOfAssociationNotFoundError.html","",""],["ActiveRecord::IrreversibleMigration","","ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from being rolled back. For\nexample the following migration …\n"],["ActiveRecord::IrreversibleOrderError","","ActiveRecord/IrreversibleOrderError.html","","<p>IrreversibleOrderError is raised when a relation&#39;s order is too complex\nfor <code>reverse_order</code> to automatically …\n"],["ActiveRecord::LazyAttributeHash","","ActiveRecord/LazyAttributeHash.html","",""],["ActiveRecord::LegacyYamlAdapter","","ActiveRecord/LegacyYamlAdapter.html","",""],["ActiveRecord::LegacyYamlAdapter::Rails41","","ActiveRecord/LegacyYamlAdapter/Rails41.html","",""],["ActiveRecord::LegacyYamlAdapter::Rails420","","ActiveRecord/LegacyYamlAdapter/Rails420.html","",""],["ActiveRecord::Locking","","ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::LockingType","","ActiveRecord/Locking/LockingType.html","",""],["ActiveRecord::Locking::Optimistic","","ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::Migration::CheckPending","","ActiveRecord/Migration/CheckPending.html","","<p>This class is used to verify that all migrations have been run before\nloading a web page if <code>config.active_record.migration_error</code> …\n"],["ActiveRecord::Migration::CommandRecorder","","ActiveRecord/Migration/CommandRecorder.html","","<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done\nduring a migration and knows how to reverse …\n"],["ActiveRecord::Migration::CommandRecorder::StraightReversions","","ActiveRecord/Migration/CommandRecorder/StraightReversions.html","",""],["ActiveRecord::Migration::Compatibility","","ActiveRecord/Migration/Compatibility.html","",""],["ActiveRecord::Migration::Compatibility::FourTwoShared","","ActiveRecord/Migration/Compatibility/FourTwoShared.html","",""],["ActiveRecord::Migration::Compatibility::FourTwoShared::TableDefinition","","ActiveRecord/Migration/Compatibility/FourTwoShared/TableDefinition.html","",""],["ActiveRecord::Migration::Compatibility::FourTwoShared::t","","ActiveRecord/Migration/Compatibility/FourTwoShared/t.html","",""],["ActiveRecord::Migration::Compatibility::Legacy","","ActiveRecord/Migration/Compatibility/Legacy.html","",""],["ActiveRecord::Migration::Compatibility::V4_2","","ActiveRecord/Migration/Compatibility/V4_2.html","",""],["ActiveRecord::Migration::Current","","ActiveRecord/Migration/Current.html","",""],["ActiveRecord::Migration::JoinTable","","ActiveRecord/Migration/JoinTable.html","",""],["ActiveRecord::Migration::ReversibleBlockHelper","","ActiveRecord/Migration/ReversibleBlockHelper.html","",""],["ActiveRecord::Migration::V5_0","","ActiveRecord/Migration/V5_0.html","",""],["ActiveRecord::MigrationError","","ActiveRecord/MigrationError.html","",""],["ActiveRecord::MigrationProxy","","ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::Migrator","","ActiveRecord/Migrator.html","",""],["ActiveRecord::ModelSchema","","ActiveRecord/ModelSchema.html","",""],["ActiveRecord::ModelSchema::ClassMethods","","ActiveRecord/ModelSchema/ClassMethods.html","",""],["ActiveRecord::MultiparameterAssignmentErrors","","ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe ActiveRecord::Base#attributes= …\n"],["ActiveRecord::NestedAttributes","","ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::NoDatabaseError","","ActiveRecord/NoDatabaseError.html","","<p>Raised when a given database does not exist.\n"],["ActiveRecord::NoEnvironmentInSchemaError","","ActiveRecord/NoEnvironmentInSchemaError.html","",""],["ActiveRecord::NoTouching","","ActiveRecord/NoTouching.html","","<p>Active Record No Touching\n"],["ActiveRecord::NoTouching::ClassMethods","","ActiveRecord/NoTouching/ClassMethods.html","",""],["ActiveRecord::NullMigration","","ActiveRecord/NullMigration.html","",""],["ActiveRecord::NullMutationTracker","","ActiveRecord/NullMutationTracker.html","",""],["ActiveRecord::NullRelation","","ActiveRecord/NullRelation.html","",""],["ActiveRecord::PendingMigrationError","","ActiveRecord/PendingMigrationError.html","",""],["ActiveRecord::Persistence","","ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::Persistence::ClassMethods","","ActiveRecord/Persistence/ClassMethods.html","",""],["ActiveRecord::PredicateBuilder","","ActiveRecord/PredicateBuilder.html","",""],["ActiveRecord::PredicateBuilder::ArrayHandler","","ActiveRecord/PredicateBuilder/ArrayHandler.html","",""],["ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate","","ActiveRecord/PredicateBuilder/ArrayHandler/NullPredicate.html","",""],["ActiveRecord::PredicateBuilder::AssociationQueryHandler","","ActiveRecord/PredicateBuilder/AssociationQueryHandler.html","",""],["ActiveRecord::PredicateBuilder::AssociationQueryValue","","ActiveRecord/PredicateBuilder/AssociationQueryValue.html","",""],["ActiveRecord::PredicateBuilder::BaseHandler","","ActiveRecord/PredicateBuilder/BaseHandler.html","",""],["ActiveRecord::PredicateBuilder::BasicObjectHandler","","ActiveRecord/PredicateBuilder/BasicObjectHandler.html","",""],["ActiveRecord::PredicateBuilder::ClassHandler","","ActiveRecord/PredicateBuilder/ClassHandler.html","",""],["ActiveRecord::PredicateBuilder::PolymorphicArrayHandler","","ActiveRecord/PredicateBuilder/PolymorphicArrayHandler.html","",""],["ActiveRecord::PredicateBuilder::PolymorphicArrayValue","","ActiveRecord/PredicateBuilder/PolymorphicArrayValue.html","",""],["ActiveRecord::PredicateBuilder::RangeHandler","","ActiveRecord/PredicateBuilder/RangeHandler.html","",""],["ActiveRecord::PredicateBuilder::RelationHandler","","ActiveRecord/PredicateBuilder/RelationHandler.html","",""],["ActiveRecord::PreparedStatementCacheExpired","","ActiveRecord/PreparedStatementCacheExpired.html","","<p>Raised when Postgres returns &#39;cached plan must not change result\ntype&#39; and we cannot retry gracefully …\n"],["ActiveRecord::PreparedStatementInvalid","","ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using\nActiveRecord::Base.find …\n"],["ActiveRecord::ProtectedEnvironmentError","","ActiveRecord/ProtectedEnvironmentError.html","",""],["ActiveRecord::QueryCache","","ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","ActiveRecord/QueryMethods.html","",""],["ActiveRecord::QueryMethods::WhereChain","","ActiveRecord/QueryMethods/WhereChain.html","","<p>WhereChain objects act as placeholder for queries in which #where does not\nhave any parameter. In this …\n"],["ActiveRecord::Querying","","ActiveRecord/Querying.html","",""],["ActiveRecord::Railtie","","ActiveRecord/Railtie.html","",""],["ActiveRecord::Railtie::ActionDispatch","","ActiveRecord/Railtie/ActionDispatch.html","",""],["ActiveRecord::Railtie::ActiveSupport","","ActiveRecord/Railtie/ActiveSupport.html","",""],["ActiveRecord::Railtie::Rails","","ActiveRecord/Railtie/Rails.html","",""],["ActiveRecord::Railties","","ActiveRecord/Railties.html","",""],["ActiveRecord::Railties::ControllerRuntime","","ActiveRecord/Railties/ControllerRuntime.html","",""],["ActiveRecord::Railties::ControllerRuntime::ClassMethods","","ActiveRecord/Railties/ControllerRuntime/ClassMethods.html","",""],["ActiveRecord::ReadOnlyAssociation","","ActiveRecord/ReadOnlyAssociation.html","",""],["ActiveRecord::ReadOnlyRecord","","ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::ReadonlyAttributes","","ActiveRecord/ReadonlyAttributes.html","",""],["ActiveRecord::ReadonlyAttributes::ClassMethods","","ActiveRecord/ReadonlyAttributes/ClassMethods.html","",""],["ActiveRecord::RecordInvalid","","ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by ActiveRecord::Base#save! and ActiveRecord::Base#create! when the\n…\n"],["ActiveRecord::RecordNotDestroyed","","ActiveRecord/RecordNotDestroyed.html","","<p>Raised by ActiveRecord::Base#destroy! when a call to #destroy would return\nfalse.\n\n<pre>begin\n  complex_operation_that_internally_calls_destroy! ...</pre>\n"],["ActiveRecord::RecordNotFound","","ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find a record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base#save! and ActiveRecord::Base.create! methods\nwhen a record is invalid and …\n"],["ActiveRecord::RecordNotUnique","","ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::AbstractReflection","","ActiveRecord/Reflection/AbstractReflection.html","",""],["ActiveRecord::Reflection::AggregateReflection","","ActiveRecord/Reflection/AggregateReflection.html","",""],["ActiveRecord::Reflection::AssociationReflection","","ActiveRecord/Reflection/AssociationReflection.html","",""],["ActiveRecord::Reflection::BelongsToReflection","","ActiveRecord/Reflection/BelongsToReflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables the ability to examine the associations and aggregations\nof Active Record classes …\n"],["ActiveRecord::Reflection::HasAndBelongsToManyReflection","","ActiveRecord/Reflection/HasAndBelongsToManyReflection.html","",""],["ActiveRecord::Reflection::HasManyReflection","","ActiveRecord/Reflection/HasManyReflection.html","",""],["ActiveRecord::Reflection::HasOneReflection","","ActiveRecord/Reflection/HasOneReflection.html","",""],["ActiveRecord::Reflection::MacroReflection","","ActiveRecord/Reflection/MacroReflection.html","","<p>Base class for AggregateReflection and AssociationReflection. Objects of\nAggregateReflection and AssociationReflection …\n"],["ActiveRecord::Reflection::PolymorphicReflection","","ActiveRecord/Reflection/PolymorphicReflection.html","",""],["ActiveRecord::Reflection::RuntimeReflection","","ActiveRecord/Reflection/RuntimeReflection.html","",""],["ActiveRecord::Reflection::ThroughReflection","","ActiveRecord/Reflection/ThroughReflection.html","",""],["ActiveRecord::Relation","","ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Relation::FromClause","","ActiveRecord/Relation/FromClause.html","",""],["ActiveRecord::Relation::HashMerger","","ActiveRecord/Relation/HashMerger.html","",""],["ActiveRecord::Relation::Merger","","ActiveRecord/Relation/Merger.html","",""],["ActiveRecord::Relation::QueryAttribute","","ActiveRecord/Relation/QueryAttribute.html","",""],["ActiveRecord::Relation::RecordFetchWarning","","ActiveRecord/Relation/RecordFetchWarning.html","",""],["ActiveRecord::Relation::RecordFetchWarning::ActiveSupport","","ActiveRecord/Relation/RecordFetchWarning/ActiveSupport.html","",""],["ActiveRecord::Relation::RecordFetchWarning::QueryRegistry","","ActiveRecord/Relation/RecordFetchWarning/QueryRegistry.html","",""],["ActiveRecord::Relation::WhereClause","","ActiveRecord/Relation/WhereClause.html","",""],["ActiveRecord::Relation::WhereClauseFactory","","ActiveRecord/Relation/WhereClauseFactory.html","",""],["ActiveRecord::Result","","ActiveRecord/Result.html","","<p>This class encapsulates a result returned from calling #exec_query on any\ndatabase connection adapter. …\n"],["ActiveRecord::Rollback","","ActiveRecord/Rollback.html","","<p>ActiveRecord::Base.transaction uses this exception to distinguish a\ndeliberate rollback from other exceptional …\n"],["ActiveRecord::RuntimeRegistry","","ActiveRecord/RuntimeRegistry.html","",""],["ActiveRecord::Sanitization","","ActiveRecord/Sanitization.html","",""],["ActiveRecord::Sanitization::ClassMethods","","ActiveRecord/Sanitization/ClassMethods.html","",""],["ActiveRecord::Schema","","ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::SchemaDumper","","ActiveRecord/SchemaDumper.html","",""],["ActiveRecord::SchemaMigration","","ActiveRecord/SchemaMigration.html","",""],["ActiveRecord::Scoping","","ActiveRecord/Scoping.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::Scoping::ClassMethods","","ActiveRecord/Scoping/ClassMethods.html","",""],["ActiveRecord::Scoping::Default","","ActiveRecord/Scoping/Default.html","",""],["ActiveRecord::Scoping::Default::ClassMethods","","ActiveRecord/Scoping/Default/ClassMethods.html","",""],["ActiveRecord::Scoping::Named","","ActiveRecord/Scoping/Named.html","",""],["ActiveRecord::Scoping::Named::ClassMethods","","ActiveRecord/Scoping/Named/ClassMethods.html","",""],["ActiveRecord::Scoping::ScopeRegistry","","ActiveRecord/Scoping/ScopeRegistry.html","",""],["ActiveRecord::SecureToken","","ActiveRecord/SecureToken.html","",""],["ActiveRecord::SecureToken::ClassMethods","","ActiveRecord/SecureToken/ClassMethods.html","",""],["ActiveRecord::Serialization","","ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object&#39;s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SpawnMethods","","ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it&#39;s being\nsaved in another query after …\n"],["ActiveRecord::StatementCache","","ActiveRecord/StatementCache.html","",""],["ActiveRecord::StatementCache::BindMap","","ActiveRecord/StatementCache/BindMap.html","",""],["ActiveRecord::StatementCache::Params","","ActiveRecord/StatementCache/Params.html","",""],["ActiveRecord::StatementCache::PartialQuery","","ActiveRecord/StatementCache/PartialQuery.html","",""],["ActiveRecord::StatementCache::Query","","ActiveRecord/StatementCache/Query.html","",""],["ActiveRecord::StatementCache::Substitute","","ActiveRecord/StatementCache/Substitute.html","",""],["ActiveRecord::StatementInvalid","","ActiveRecord/StatementInvalid.html","","<p>Superclass for all database execution errors.\n<p>Wraps the underlying database error as <code>cause</code>.\n"],["ActiveRecord::Store","","ActiveRecord/Store.html","","<p>Store gives you a thin wrapper around serialize for the purpose of storing\nhashes in a single column. …\n"],["ActiveRecord::Store::ClassMethods","","ActiveRecord/Store/ClassMethods.html","",""],["ActiveRecord::Store::HashAccessor","","ActiveRecord/Store/HashAccessor.html","",""],["ActiveRecord::Store::IndifferentCoder","","ActiveRecord/Store/IndifferentCoder.html","",""],["ActiveRecord::Store::IndifferentHashAccessor","","ActiveRecord/Store/IndifferentHashAccessor.html","",""],["ActiveRecord::Store::StringKeyedHashAccessor","","ActiveRecord/Store/StringKeyedHashAccessor.html","",""],["ActiveRecord::SubclassNotFound","","ActiveRecord/SubclassNotFound.html","","<p>Raised when the single-table inheritance mechanism fails to locate the\nsubclass (for example due to improper …\n"],["ActiveRecord::Suppressor","","ActiveRecord/Suppressor.html","","<p>ActiveRecord::Suppressor prevents the receiver from being saved during a\ngiven block.\n<p>For example, here&#39;s …\n"],["ActiveRecord::Suppressor::ClassMethods","","ActiveRecord/Suppressor/ClassMethods.html","",""],["ActiveRecord::SuppressorRegistry","","ActiveRecord/SuppressorRegistry.html","",""],["ActiveRecord::TableMetadata","","ActiveRecord/TableMetadata.html","",""],["ActiveRecord::Tasks","","ActiveRecord/Tasks.html","",""],["ActiveRecord::Tasks::DatabaseAlreadyExists","","ActiveRecord/Tasks/DatabaseAlreadyExists.html","",""],["ActiveRecord::Tasks::DatabaseNotSupported","","ActiveRecord/Tasks/DatabaseNotSupported.html","",""],["ActiveRecord::Tasks::DatabaseTasks","","ActiveRecord/Tasks/DatabaseTasks.html","","<p>ActiveRecord::Tasks::DatabaseTasks is a utility class, which encapsulates\nlogic behind common tasks used …\n"],["ActiveRecord::Tasks::MySQLDatabaseTasks","","ActiveRecord/Tasks/MySQLDatabaseTasks.html","",""],["ActiveRecord::Tasks::PostgreSQLDatabaseTasks","","ActiveRecord/Tasks/PostgreSQLDatabaseTasks.html","",""],["ActiveRecord::Tasks::SQLiteDatabaseTasks","","ActiveRecord/Tasks/SQLiteDatabaseTasks.html","",""],["ActiveRecord::TestFixtures","","ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection","","ActiveRecord/ThroughCantAssociateThroughHasOneOrManyReflection.html","",""],["ActiveRecord::ThroughNestedAssociationsAreReadonly","","ActiveRecord/ThroughNestedAssociationsAreReadonly.html","",""],["ActiveRecord::Timestamp","","ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::TouchLater","","ActiveRecord/TouchLater.html","","<p>Active Record Touch Later\n"],["ActiveRecord::TransactionIsolationError","","ActiveRecord/TransactionIsolationError.html","","<p>TransactionIsolationError will be raised under the following conditions:\n<p>The adapter does not support …\n"],["ActiveRecord::Transactions","","ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::Translation","","ActiveRecord/Translation.html","",""],["ActiveRecord::Type","","ActiveRecord/Type.html","",""],["ActiveRecord::Type::AdapterSpecificRegistry","","ActiveRecord/Type/AdapterSpecificRegistry.html","",""],["ActiveRecord::Type::Date","","ActiveRecord/Type/Date.html","",""],["ActiveRecord::Type::DateTime","","ActiveRecord/Type/DateTime.html","",""],["ActiveRecord::Type::DecorationRegistration","","ActiveRecord/Type/DecorationRegistration.html","",""],["ActiveRecord::Type::HashLookupTypeMap","","ActiveRecord/Type/HashLookupTypeMap.html","",""],["ActiveRecord::Type::Internal","","ActiveRecord/Type/Internal.html","",""],["ActiveRecord::Type::Internal::AbstractJson","","ActiveRecord/Type/Internal/AbstractJson.html","",""],["ActiveRecord::Type::Internal::Timezone","","ActiveRecord/Type/Internal/Timezone.html","",""],["ActiveRecord::Type::Registration","","ActiveRecord/Type/Registration.html","",""],["ActiveRecord::Type::Serialized","","ActiveRecord/Type/Serialized.html","",""],["ActiveRecord::Type::Time","","ActiveRecord/Type/Time.html","",""],["ActiveRecord::Type::Time::Value","","ActiveRecord/Type/Time/Value.html","",""],["ActiveRecord::Type::TypeMap","","ActiveRecord/Type/TypeMap.html","",""],["ActiveRecord::TypeCaster","","ActiveRecord/TypeCaster.html","",""],["ActiveRecord::TypeCaster::Connection","","ActiveRecord/TypeCaster/Connection.html","",""],["ActiveRecord::TypeCaster::Map","","ActiveRecord/TypeCaster/Map.html","",""],["ActiveRecord::TypeConflictError","","ActiveRecord/TypeConflictError.html","",""],["ActiveRecord::UnknownMigrationVersionError","","ActiveRecord/UnknownMigrationVersionError.html","",""],["ActiveRecord::UnknownPrimaryKey","","ActiveRecord/UnknownPrimaryKey.html","","<p>Raised when a primary key is needed, but not specified in the schema or\nmodel.\n"],["ActiveRecord::VERSION","","ActiveRecord/VERSION.html","",""],["ActiveRecord::Validations","","ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\nActiveModel::Validations …\n"],["ActiveRecord::Validations::AbsenceValidator","","ActiveRecord/Validations/AbsenceValidator.html","",""],["ActiveRecord::Validations::AssociatedValidator","","ActiveRecord/Validations/AssociatedValidator.html","",""],["ActiveRecord::Validations::ClassMethods","","ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::Validations::LengthValidator","","ActiveRecord/Validations/LengthValidator.html","",""],["ActiveRecord::Validations::PresenceValidator","","ActiveRecord/Validations/PresenceValidator.html","",""],["ActiveRecord::Validations::UniquenessValidator","","ActiveRecord/Validations/UniquenessValidator.html","",""],["ActiveRecord::ValueTooLong","","ActiveRecord/ValueTooLong.html","","<p>Raised when a record cannot be inserted or updated because a value too long\nfor a column type.\n"],["ActiveRecord::WrappedDatabaseException","","ActiveRecord/WrappedDatabaseException.html","","<p>Defunct wrapper class kept for compatibility. StatementInvalid wraps the\noriginal exception now.\n"],["ArJdbcMySQL","","ArJdbcMySQL.html","",""],["ArJdbcMySQL::Error","","ArJdbcMySQL/Error.html","",""],["Arel","","Arel.html","",""],["Mysql2","","Mysql2.html","",""],["<<","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-3C-3C","(*records)","<p>Adds one or more <code>records</code> to the collection by setting their\nforeign keys to the association&#39;s primary …\n"],["<=>","ActiveRecord::ConnectionAdapters::AbstractAdapter::Version","ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveRecord::Core","ActiveRecord/Core.html#method-i-3C-3D-3E","(other_object)","<p>Allows sort on objects\n"],["==","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-3D-3D","(other)",""],["==","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-3D-3D","(other)","<p>Equivalent to <code>Array#==</code>. Returns <code>true</code> if the two\narrays contain the same number of elements and if each …\n"],["==","ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata","ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-3D-3D","(other)",""],["==","ActiveRecord::Core","ActiveRecord/Core.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],["==","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-3D-3D","(other)","<p>Compares two relations for equality.\n"],["===","ActiveRecord::Core::ClassMethods","ActiveRecord/Core/ClassMethods.html#method-i-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["[]","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-5B-5D","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-5B-5D","(x)",""],["[]","ActiveRecord::FixtureSet::ClassCache","ActiveRecord/FixtureSet/ClassCache.html#method-i-5B-5D","(fs_name)",""],["[]","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-5B-5D","(version)",""],["[]","ActiveRecord::Result","ActiveRecord/Result.html#method-i-5B-5D","(idx)",""],["[]=","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-5B-5D-3D","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. (Alias for the protected #write_attribute …\n"],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-5B-5D-3D","(k,v)",""],["_create_record","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-_create_record","(*)",""],["_create_record","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-_create_record","(attribute_names = self.attribute_names)","<p>Creates a record with values matching those of the instance attributes and\nreturns its id.\n"],["_create_record","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-_create_record","()",""],["_ensure_no_duplicate_errors","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-_ensure_no_duplicate_errors","()",""],["_enum_methods_module","ActiveRecord::Enum","ActiveRecord/Enum.html#method-i-_enum_methods_module","()",""],["_quote","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-_quote","(value)",""],["_quote","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-_quote","(value)",""],["_raise_record_not_destroyed","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-_raise_record_not_destroyed","()",""],["_read_attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-_read_attribute","(attr_name, &block)","<p>This form is significantly faster on JRuby, and this is one of our biggest\nhotspots. github.com/jruby/jruby/pull/2562 …\n"],["_type_cast","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-_type_cast","(value)",""],["_type_cast","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-_type_cast","(value)",""],["_update_record","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-_update_record","(attribute_names = self.attribute_names)","<p>Updates the associated record with values matching those of the instance\nattributes. Returns the number …\n"],["_update_record","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-_update_record","(*args, touch: true, **options)",""],["abstract_class?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["accept","ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor","ActiveRecord/ConnectionAdapters/DetermineIfPreparableVisitor.html#method-i-accept","(*)",""],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s).\n<p>Supported options:\n<p>:allow_destroy &mdash; If true, …\n"],["accessed_fields","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-accessed_fields","()","<p>Returns the name of all database fields which have been read from this\nmodel. This can be useful in development …\n"],["acquire_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-acquire_connection","(checkout_timeout)","<p>Acquire a connection by one of 1) immediately removing one from the queue\nof available connections, 2) …\n"],["act_on_order_or_limit_ignored","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-act_on_order_or_limit_ignored","(error_on_ignore)",""],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()",""],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-active-3F","()",""],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Is there an open connection that is being used for the current thread?\n<p>This method only works for connections …\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","()","<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],["add","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-add","(element)","<p>Add <code>element</code> to the queue.  Never blocks.\n"],["add","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-add","(table_name)","<p>Add internal cache for table with <code>table_name</code>.\n"],["add_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_belongs_to","(table_name, *args)",""],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Add a new <code>type</code> column named <code>column_name</code> to\n<code>table_name</code>.\n<p>The <code>type</code> parameter is normally one of the migrations …\n"],["add_column_options!","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-add_column_options-21","(sql, options)",""],["add_column_options!","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaCreation.html#method-i-add_column_options-21","(sql, options)",""],["add_column_options!","ActiveRecord::ConnectionAdapters::SQLite3::SchemaCreation","ActiveRecord/ConnectionAdapters/SQLite3/SchemaCreation.html#method-i-add_column_options-21","(sql, options)",""],["add_column_position!","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-add_column_position-21","(sql, options)",""],["add_column_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-add_column_sql","(table_name, column_name, type, options = {})",""],["add_foreign_key","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_foreign_key","(from_table, to_table, options = {})","<p>Adds a new foreign key. <code>from_table</code> is the table with the key\ncolumn, <code>to_table</code> contains the referenced …\n"],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index will …\n"],["add_index_length","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-add_index_length","(quoted_columns, **options)",""],["add_index_sort_order","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_sort_order","(quoted_columns, **options)",""],["add_index_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-add_index_sql","(table_name, column_name, options = {})",""],["add_join_records","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-add_join_records","(rows, row, association)",""],["add_options_for_index_columns","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-add_options_for_index_columns","(quoted_columns, **options)",""],["add_options_for_index_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_options_for_index_columns","(quoted_columns, **options)","<p>Overridden by the MySQL adapter for supporting index lengths\n"],["add_pg_decoders","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-add_pg_decoders","()",""],["add_pg_encoders","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-add_pg_encoders","()",""],["add_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference","(table_name, *args)","<p>Adds a reference. The reference column is an integer by default, the\n<code>:type</code> option can be used to specify …\n"],["add_table_options!","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-add_table_options-21","(create_sql, options)",""],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name, options = {})","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to <code>table_name</code>. Additional options (like\n<code>:null</code>) are …\n"],["add_timestamps_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-add_timestamps_sql","(table_name, options = {})",""],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["adopt_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-adopt_connection","(conn)",""],["after_commit","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)","<p>This callback is called after a record has been created, updated, or\ndestroyed.\n<p>You can specify that the …\n"],["after_create_commit","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_create_commit","(*args, &block)","<p>Shortcut for <code>after_commit :hook, on: :create</code>.\n"],["after_destroy_commit","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_destroy_commit","(*args, &block)","<p>Shortcut for <code>after_commit :hook, on: :destroy</code>.\n"],["after_rollback","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)","<p>This callback is called after a create, update, or destroy are rolled back.\n<p>Please check the documentation …\n"],["after_update_commit","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_update_commit","(*args, &block)","<p>Shortcut for <code>after_commit :hook, on: :update</code>.\n"],["aggregate_column","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-aggregate_column","(column_name)",""],["aliased_types","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-aliased_types","(name, fallback)",""],["all","ActiveRecord::Scoping::Named::ClassMethods","ActiveRecord/Scoping/Named/ClassMethods.html#method-i-all","()","<p>Returns an ActiveRecord::Relation scope object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">posts</span> = <span class=\"ruby-constant\">Post</span>.<span class=\"ruby-identifier\">all</span>\n<span class=\"ruby-identifier\">posts</span>.<span class=\"ruby-identifier\">size</span> <span class=\"ruby-comment\"># Fires &quot;select count(*) from ...</span>\n</pre>\n"],["all_timestamp_attributes","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-all_timestamp_attributes","()",""],["all_timestamp_attributes_in_model","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-all_timestamp_attributes_in_model","()",""],["allocate","ActiveRecord::Core::ClassMethods","ActiveRecord/Core/ClassMethods.html#method-i-allocate","()",""],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-allowed_index_name_length","()","<p>Returns the maximum allowed length for an index name. This limit is\nenforced by Rails and is less than …\n"],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-allowed_index_name_length","()","<p>Returns 62. SQLite supports index names up to 64 characters. The rest is\nused by rails internally to …\n"],["announce","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-announce","(message)",""],["any?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-any-3F","(&block)","<p>Returns <code>true</code> if the collection is not empty.\n\n<pre>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count ...</pre>\n"],["any?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any-3F","()","<p>Test if the queue currently contains any elements.\n"],["any?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-any-3F","()","<p>Returns true if there are any records.\n"],["any_waiting?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any_waiting-3F","()","<p>Test if any threads are currently waiting on the queue.\n"],["append","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-append","(*records)",""],["apply_join_dependency","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-apply_join_dependency","(relation, join_dependency)",""],["apply_limits","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-apply_limits","(relation, start, finish)",""],["arel_attributes_with_values","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-arel_attributes_with_values","(attribute_names)","<p>Returns a Hash of the Arel::Attributes and attribute values that have been\ntypecasted for use in an  …\n"],["arel_columns","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-arel_columns","(columns)",""],["assert_mutability!","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-assert_mutability-21","()",""],["assert_valid_transaction_action","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-assert_valid_transaction_action","(actions)",""],["assign_multiparameter_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-assign_multiparameter_attributes","(pairs)","<p>Instantiates objects for all attribute classes that needs more than one\nconstructor parameter. This is …\n"],["assign_nested_parameter_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-assign_nested_parameter_attributes","(pairs)","<p>Assign any deferred nested attributes after the base attributes have been\nset.\n"],["associated_records_to_validate_or_save","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-associated_records_to_validate_or_save","(association, new_record, autosave)","<p>Returns the record for an association collection that should be validated\nor saved. If <code>autosave</code> is <code>false</code> …\n"],["association_for_table","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-association_for_table","(table_name)",""],["association_valid?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-association_valid-3F","(reflection, record, index=nil)","<p>Returns whether or not the association is valid and applies any errors to\nthe parent, <code>self</code>, if it wasn&#39;t. …\n"],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_paths)",""],["attempt_to_checkout_all_existing_connections","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-attempt_to_checkout_all_existing_connections","(raise_on_acquisition_timeout = true)",""],["attr_readonly","ActiveRecord::ReadonlyAttributes::ClassMethods","ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-attribute","(attr_name, &block)",""],["attribute","ActiveRecord::Attributes::ClassMethods","ActiveRecord/Attributes/ClassMethods.html#method-i-attribute","(name, cast_type, **options)","<p>Defines an attribute with a type on this model. It will override the type\nof existing attributes if needed. …\n"],["attribute=","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-attribute-3D","(attribute_name, value)","<p>Handle *= for method_missing.\n"],["attribute?","ActiveRecord::AttributeMethods::Query","ActiveRecord/AttributeMethods/Query.html#method-i-attribute-3F","(attribute_name)","<p>Handle *? for method_missing.\n"],["attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attribute_before_type_cast","(attribute_name)","<p>Handle *_before_type_cast for method_missing.\n"],["attribute_came_from_user?","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attribute_came_from_user-3F","(attribute_name)",""],["attribute_for_inspect","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are truncated …\n"],["attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method\nand table exists, <code>false</code> otherwise.\n\n<pre>class Person &lt; ActiveRecord::Base ...</pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_names","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object.\n\n<pre>class Person &lt; ActiveRecord::Base ...</pre>\n"],["attribute_names","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of column names as strings if it&#39;s not an abstract\nclass and table exists. Otherwise …\n"],["attribute_present?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attribute_present-3F","(attribute)","<p>Returns <code>true</code> if the specified <code>attribute</code> has been\nset by the user or by a database load and is neither …\n"],["attributes","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],["attributes=","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-attributes-3D","(attributes)","<p>Alias for ActiveModel::AttributeAssignment#assign_attributes. See\nActiveModel::AttributeAssignment.\n"],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n\n<pre>class Task &lt; ActiveRecord::Base\nend ...</pre>\n"],["attributes_for_create","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attributes_for_create","(attribute_names)","<p>Filters out the primary keys, from the attribute names, when the primary\nkey is to be generated (e.g. …\n"],["attributes_for_hash","ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata","ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-attributes_for_hash","()",""],["attributes_for_update","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attributes_for_update","(attribute_names)","<p>Filters the primary keys and readonly attributes from the attribute names.\n"],["attributes_hash","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-attributes_hash","()","<p>Given that the parameters starts with `_`, the finder needs to use the same\nparameter name.\n"],["autosave=","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-autosave-3D","(autosave)",""],["average","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-average","(column_name)","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere&#39;s no row. See #calculate for …\n"],["base_class","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class","()","<p>Returns the class descending directly from ActiveRecord::Base, or an\nabstract class, if any, in the inheritance …\n"],["basename","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-basename","()",""],["batch_order","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-batch_order","()",""],["becomes","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["becomes!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-becomes-21","(klass)","<p>Wrapper around #becomes that also changes the instance&#39;s sti column\nvalue. This is especially useful …\n"],["before_save_collection_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-before_save_collection_association","()","<p>Is used as a before_save callback to check while saving a collection\nassociation whether or not the parent …\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-begin_db_transaction","()",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-begin_isolated_db_transaction","(isolation)",""],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)","<p>Begins the transaction with the isolation level set. Raises an error by\ndefault; adapters that support …\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)",""],["belongs_to","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args, **options)",""],["belongs_to_touch_method","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-belongs_to_touch_method","()",""],["belongs_to_touch_method","ActiveRecord::TouchLater","ActiveRecord/TouchLater.html#method-i-belongs_to_touch_method","()",""],["bigserial","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bigserial","(*args, **options)",""],["binary?","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-binary-3F","()",""],["bit","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bit","(*args, **options)",""],["bit_varying","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bit_varying","(*args, **options)",""],["blank?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-blank-3F","()","<p>Returns true if relation is blank.\n"],["blob","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-blob","(*args, **options)",""],["body","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-body","()",""],["bound_attributes","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-bound_attributes","()",""],["box","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-box","(*args, **options)",""],["build","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-build","(*args, &block)",""],["build","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-build","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\n<code>attributes</code> and linked to …\n"],["build","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build_arel","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_arel","()",""],["build_count_subquery","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-build_count_subquery","(relation, column_name, distinct)",""],["build_from","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_from","()",""],["build_join_query","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_join_query","(manager, buckets, join_type)",""],["build_joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_joins","(manager, joins)",""],["build_left_outer_joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_left_outer_joins","(manager, outer_joins)",""],["build_order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_order","(arel)",""],["build_preloader","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-build_preloader","()",""],["build_select","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_select","(arel)",""],["bulk_make_new_connections","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-bulk_make_new_connections","(num_new_conns_needed)",""],["cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],["cache_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-cache_for_connection","(connection)",""],["cache_key","ActiveRecord::Integration","ActiveRecord/Integration.html#method-i-cache_key","(*timestamp_names)","<p>Returns a cache key that can be used to identify this record.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Product</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">cache_key</span>     <span class=\"ruby-comment\"># =&gt; &quot;products/new&quot; ...</span>\n</pre>\n"],["cache_key","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-cache_key","(timestamp_column = :updated_at)","<p>Returns a cache key that can be used to identify the records fetched by\nthis query. The cache key is …\n"],["cache_sql","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache_sql","(sql, binds)",""],["cached_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["calculate","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-calculate","(operation, column_name)",""],["calculate","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name)","<p>This calculates aggregate values in the given column. Methods for #count,\n#sum, #average, #minimum, and …\n"],["call","ActiveRecord::Migration::CheckPending","ActiveRecord/Migration/CheckPending.html#method-i-call","(env)",""],["can_perform_case_insensitive_comparison_for?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-can_perform_case_insensitive_comparison_for-3F","(column)",""],["can_perform_case_insensitive_comparison_for?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-can_perform_case_insensitive_comparison_for-3F","(column)",""],["can_perform_case_insensitive_comparison_for?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-can_perform_case_insensitive_comparison_for-3F","(column)",""],["can_remove_index_by_name?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-can_remove_index_by_name-3F","(options)",""],["can_remove_no_wait?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-can_remove_no_wait-3F","()","<p>A thread can remove an element from the queue without waiting if and only\nif the number of currently …\n"],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_comparison","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-case_sensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_comparison","(table, attribute, column, value)",""],["change","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options.\n\n<pre>t.change(:name, :string, limit: 80) ...</pre>\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default_or_changes)","<p>Sets a new default value for a column:\n\n<pre>change_column_default(:suppliers, :qualification, &#39;new&#39;)\nchange_column_default(:accounts, ...</pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)","<p>Sets or removes a <code>NOT NULL</code> constraint on a column. The\n<code>null</code> flag indicates whether the value can be  …\n"],["change_column_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-change_column_sql","(table_name, column_name, type, options = {})",""],["change_default","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default_or_changes)","<p>Sets a new default value for a column.\n\n<pre>t.change_default(:qualification, &#39;new&#39;)\nt.change_default(:authorized, ...</pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, options = {})","<p>A block for changing columns in <code>table</code>.\n\n<pre># change_table() yields a Table instance\nchange_table(:suppliers) ...</pre>\n"],["change_table_comment","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table_comment","(table_name, comment)","<p>Changes the comment for a table or removes it if <code>nil</code>.\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["charset","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-charset","()","<p>Returns the database character set.\n"],["charset","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset","(*arguments)",""],["charset_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset_current","(environment = env)",""],["check_if_method_has_arguments!","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-check_if_method_has_arguments-21","(method_name, args)","<p>Checks to make sure that the arguments are not blank. Note that if some\nblank-like object were initially …\n"],["check_pending!","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-check_pending-21","(connection = Base.connection)","<p>Raises <code>ActiveRecord::PendingMigrationError</code> error if any\nmigrations are pending.\n"],["check_protected_environments!","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_protected_environments-21","()",""],["check_schema_file","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_schema_file","(filename)",""],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","(checkout_timeout = @checkout_timeout)","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["checkout_and_verify","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout_and_verify","(c)",""],["checkout_for_exclusive_access","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout_for_exclusive_access","(checkout_timeout)",""],["checkout_new_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout_new_connection","()",""],["cidr","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-cidr","(*args, **options)",""],["circle","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-circle","(*args, **options)",""],["citext","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-citext","(*args, **options)",""],["class_for_adapter","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-class_for_adapter","(adapter)",""],["clear","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-clear","()","<p>Equivalent to <code>delete_all</code>. The difference is that returns\n<code>self</code>, instead of an array with the deleted objects, …\n"],["clear","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-clear","()","<p>Remove all elements from the queue.\n"],["clear!","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21","()","<p>Clears out internal caches\n"],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_data_source_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_data_source_cache-21","(name)","<p>Clear out internal caches for the data source <code>name</code>.\n"],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections","(raise_on_acquisition_timeout = true)","<p>Clears the cache which maps classes and re-connects connections that\nrequire reloading.\n<p>Raises:\n<p>ActiveRecord::ExclusiveConnectionTimeoutError …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n<p>See ConnectionPool#clear_reloadable_connections! for details.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes and re-connects connections that\nrequire reloading.\n<p>The pool first …\n"],["clear_table_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_table_cache-21","(name)",""],["clear_timestamp_attributes","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-clear_timestamp_attributes","()","<p>Clear attributes and changed_attributes\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveRecord::Core","ActiveRecord/Core.html#method-i-clone","","<p>Identical to Ruby&#39;s clone method.  This is a “shallow” copy.  Be warned\nthat your attributes …\n"],["close","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close","()","<p>Check the connection back in to the connection pool\n"],["collation","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collation","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-collation","()","<p>Returns the current database collation.\n"],["collation","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation","(*arguments)",""],["collation_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation_current","(environment = env)",""],["collector","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-collector","()",""],["colorize_payload_name","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-colorize_payload_name","(name, payload_name)",""],["column","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">column</span>(:<span class=\"ruby-identifier\">name</span>, :<span class=\"ruby-identifier\">string</span>)\n</pre>\n<p>See TableDefinition#column for details of …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. See connection.add_column for\navailable options.\n<p>Additional options …\n"],["column_alias_for","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-column_alias_for","(keys)","<p>Converts the given keys to the value that the database adapter returns as a\nusable column name:\n\n<pre>column_alias_for(&quot;users.id&quot;) ...</pre>\n"],["column_defaults","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n\n<pre># Check a column exists\ncolumn_exists?(:suppliers, ...</pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = {})","<p>Checks to see if a column exists.\n<p>t.string(:name) unless t.column_exists?(:name, :string)\n<p>See connection.column_exists? …\n"],["column_for_attribute","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute. Returns a\n<code>ActiveRecord::ConnectionAdapters::NullColumn</code> …\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>Returns the maximum length of a column name.\n"],["column_names","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-column_names","()",""],["column_names","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["column_options","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-column_options","(o)",""],["column_options","ActiveRecord::ConnectionAdapters::SQLite3::SchemaCreation","ActiveRecord/ConnectionAdapters/SQLite3/SchemaCreation.html#method-i-column_options","(o)",""],["column_spec","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-column_spec","(column)",""],["column_spec_for_primary_key","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-column_spec_for_primary_key","(column)",""],["column_spec_for_primary_key","ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper","ActiveRecord/ConnectionAdapters/MySQL/ColumnDumper.html#method-i-column_spec_for_primary_key","(column)",""],["column_spec_for_primary_key","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDumper","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDumper.html#method-i-column_spec_for_primary_key","(column)",""],["column_type","ActiveRecord::Result","ActiveRecord/Result.html#method-i-column_type","(name, type_overrides = {})",""],["columns","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns","(table_name)","<p>Get the columns for a table\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-columns","()","<p>Returns an array of ColumnDefinition objects for the columns of the table.\n"],["columns","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns","()",""],["columns_hash","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash","(table_name)","<p>Get the columns for a table as a hash, key is the column name value is the\ncolumn object.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>Returns the maximum number of columns in a multicolumn index.\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>Returns the maximum number of columns per table.\n"],["commit","ActiveRecord::ConnectionAdapters::RealTransaction","ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-commit","()",""],["commit","ActiveRecord::ConnectionAdapters::SavepointTransaction","ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-commit","()",""],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["committed?","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-committed-3F","()",""],["compile","ActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector","ActiveRecord/ConnectionAdapters/AbstractAdapter/BindCollector.html#method-i-compile","(bvs, conn)",""],["compile","ActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString","ActiveRecord/ConnectionAdapters/AbstractAdapter/SQLString.html#method-i-compile","(bvs, conn)",""],["complete","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-c-complete","((caching_pool, caching_was_enabled, connection_id))",""],["completed?","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-completed-3F","()",""],["composed_of","ActiveRecord::Aggregations::ClassMethods","ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compute_class","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-compute_class","(name)",""],["compute_table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-compute_table_name","()","<p>Computes and returns a table name according to default conventions.\n"],["compute_type","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-concat","(*records)","<p>Add one or more records to the collection by setting their foreign keys to\nthe association&#39;s primary …\n"],["configurations","ActiveRecord::Core","ActiveRecord/Core.html#method-c-configurations","()","<p>Returns fully resolved configurations hash\n"],["configurations=","ActiveRecord::Core","ActiveRecord/Core.html#method-c-configurations-3D","(config)","<p>Contains the database configuration - as is typically stored in\nconfig/database.yml - as a Hash.\n<p>For example, …\n"],["configure_connection","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-configure_connection","()",""],["configure_connection","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-configure_connection","()",""],["configure_connection","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-configure_connection","()","<p>Configures the encoding, verbosity, schema search path, and time zone of\nthe connection. This is called …\n"],["configure_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-configure_query_cache-21","()",""],["connect","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-connect","()",""],["connect","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-connect","()","<p>Connects to a PostgreSQL server and sets up the adapter depending on the\nconnected server&#39;s characteristics. …\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(spec_name)","<p>Returns true if a connection that&#39;s accessible to this class has\nalready been opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connected?","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connected-3F","()","<p>Returns <code>true</code> if Active Record is connected.\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-connection","()",""],["connection","ActiveRecord::Migration::CheckPending","ActiveRecord/Migration/CheckPending.html#method-i-connection","()",""],["connection_active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-connection_active-3F","()",""],["connection_cache_key","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection_cache_key","(thread)",""],["connection_config","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_config","()","<p>Returns the configuration of the associated connection as a hash:\n\n<pre>ActiveRecord::Base.connection_config ...</pre>\n"],["connection_handler","ActiveRecord::Core","ActiveRecord/Core.html#method-i-connection_handler","()",""],["connection_handler","ActiveRecord::Core","ActiveRecord/Core.html#method-c-connection_handler","()",""],["connection_handler=","ActiveRecord::Core","ActiveRecord/Core.html#method-c-connection_handler-3D","(handler)",""],["connection_id","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_id","()",""],["connection_id=","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_id-3D","(connection_id)",""],["connection_pool","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_pool","()",""],["connection_pool_list","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pool_list","()",""],["connection_pools","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pools","()",""],["connection_specification_name","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_specification_name","()","<p>Return the specification id from this class otherwise look it up in the\nparent.\n"],["construct_coder","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-construct_coder","(row, coder_class)",""],["construct_join_dependency","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_join_dependency","(joins = [])",""],["construct_relation_for_association_calculations","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_calculations","()",""],["content_columns","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["context_class","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-context_class","()","<p>Superclass for the evaluation contexts used by ERB fixtures.\n"],["convert","ActiveRecord::LegacyYamlAdapter","ActiveRecord/LegacyYamlAdapter.html#method-c-convert","(klass, coder)",""],["convert","ActiveRecord::LegacyYamlAdapter::Rails41","ActiveRecord/LegacyYamlAdapter/Rails41.html#method-c-convert","(klass, coder)",""],["convert","ActiveRecord::LegacyYamlAdapter::Rails420","ActiveRecord/LegacyYamlAdapter/Rails420.html#method-c-convert","(klass, coder)",""],["convert_join_strings_to_ast","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-convert_join_strings_to_ast","(table, joins)",""],["copy","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["count","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-count","(column_name = nil)","<p>Count all records using SQL.\n\n<pre>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count ...</pre>\n"],["count","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-count","(column_name = nil)","<p>Count the records.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">count</span>\n<span class=\"ruby-comment\"># =&gt; the total count of all people</span>\n\n<span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">count</span>(:<span class=\"ruby-identifier\">age</span>)\n<span class=\"ruby-comment\"># =&gt; returns the ...</span>\n</pre>\n"],["count_by_sql","ActiveRecord::Querying","ActiveRecord/Querying.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["create","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-create","(*args, &block)",""],["create","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-create","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\nattributes, linked to this …\n"],["create","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-create","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])",""],["create","ActiveRecord::Persistence::ClassMethods","ActiveRecord/Persistence/ClassMethods.html#method-i-create","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-create","(*args, &block)","<p>Tries to create a new record with the same scoped attributes defined in the\nrelation. Returns the initialized …\n"],["create","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-create","(*arguments)",""],["create!","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-create-21","(*args, &block)",""],["create!","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-create-21","(attributes = {}, &block)","<p>Like #create, except that if the record is invalid, raises an exception.\n\n<pre>class Person\n  has_many :pets ...</pre>\n"],["create!","ActiveRecord::Persistence::ClassMethods","ActiveRecord/Persistence/ClassMethods.html#method-i-create-21","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. Raises a  …\n"],["create!","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-create-21","(*args, &block)","<p>Similar to #create, but calls create! on the base class. Raises an\nexception if a validation error occurs. …\n"],["create_all","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_all","()",""],["create_alter_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_alter_table","(name)",""],["create_column_definition","ActiveRecord::ConnectionAdapters::MySQL::TableDefinition","ActiveRecord/ConnectionAdapters/MySQL/TableDefinition.html#method-i-create_column_definition","(name, type)",""],["create_column_definition","ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition","ActiveRecord/ConnectionAdapters/PostgreSQL/TableDefinition.html#method-i-create_column_definition","(name, type)",""],["create_column_definition","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-create_column_definition","(name, type)",""],["create_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_current","(environment = env)",""],["create_database","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database. Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code> (defaults to utf8),\n<code>:collation</code> …\n"],["create_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-create_fixtures","(fixtures_directory, fixture_set_names, class_names = {}, config = ActiveRecord::Base)",""],["create_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table","(table_1, table_2, options = {})","<p>Creates a new join table with the name created using the lexical order of\nthe first two arguments. These …\n"],["create_or_update","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-create_or_update","(*args)",""],["create_savepoint","ActiveRecord::ConnectionAdapters::Savepoints","ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-create_savepoint","(name = current_savepoint_name)",""],["create_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-create_schema","(schema_name)","<p>Creates a schema for the given schema name.\n"],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, comment: nil, **options)","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_table_definition","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table_definition","(*args)",""],["create_time_zone_conversion_attribute?","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-create_time_zone_conversion_attribute-3F","(name, cast_type)",""],["create_with","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-create_with","(value)","<p>Sets attributes to be used when creating new records from a relation\nobject.\n\n<pre>users = User.where(name: ...</pre>\n"],["ctype","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-ctype","()","<p>Returns the current database ctype.\n"],["current_adapter_name","ActiveRecord::Type","ActiveRecord/Type.html#method-c-current_adapter_name","()",""],["current_config","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-current_config","(options = {})",""],["current_database","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::Savepoints","ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-current_savepoint_name","()",""],["current_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-current_schema","()","<p>Returns the current schema name.\n"],["current_time_from_proper_timezone","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-current_time_from_proper_timezone","()",""],["current_version","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-current_version","()",""],["custom_inspect_method_defined?","ActiveRecord::Core","ActiveRecord/Core.html#method-i-custom_inspect_method_defined-3F","()",""],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F","(method_name)",""],["dangerous_class_method?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-dangerous_class_method-3F","(method_name)","<p>A class method is &#39;dangerous&#39; if it is already (re)defined by\nActive Record, but not by any ancestors. …\n"],["data_source_exists?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-data_source_exists-3F","(table_name)",""],["data_source_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-data_source_exists-3F","(name)",""],["data_source_exists?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-data_source_exists-3F","(table_name)",""],["data_source_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-data_source_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["data_source_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-data_source_exists-3F","(name)","<p>Checks to see if the data source <code>name</code> exists on the database.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">data_source_exists?</span>(:<span class=\"ruby-identifier\">ebooks</span>)\n</pre>\n"],["data_sources","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-data_sources","()",""],["data_sources","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-data_sources","()",""],["data_sources","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-data_sources","()",""],["data_sources","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-data_sources","(name)",""],["data_sources","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-data_sources","()","<p>Returns the relation names useable to back Active Record models. For most\nadapters this means all #tables …\n"],["daterange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-daterange","(*args, **options)",""],["db_dir","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-db_dir","()",""],["dealloc","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-dealloc","(key)",""],["dealloc","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-dealloc","(stmt)",""],["decrement","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around #decrement that saves the record. This method differs from\nits non-bang version in the …\n"],["decrement_counter","ActiveRecord::CounterCache::ClassMethods","ActiveRecord/CounterCache/ClassMethods.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a numeric field by one, via a direct SQL update.\n<p>This works the same as #increment_counter but …\n"],["default_fixture_model","ActiveRecord::FixtureSet::ClassCache","ActiveRecord/FixtureSet/ClassCache.html#method-i-default_fixture_model","(fs_name, config)",""],["default_primary_key?","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-default_primary_key-3F","(column)",""],["default_primary_key?","ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper","ActiveRecord/ConnectionAdapters/MySQL/ColumnDumper.html#method-i-default_primary_key-3F","(column)",""],["default_primary_key?","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDumper","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDumper.html#method-i-default_primary_key-3F","(column)",""],["default_scope","ActiveRecord::Scoping::Default::ClassMethods","ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope","(scope = nil)","<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre>class Article &lt; ActiveRecord::Base ...</pre>\n"],["default_timezone","ActiveRecord::Type::Internal::Timezone","ActiveRecord/Type/Internal/Timezone.html#method-i-default_timezone","()",""],["default_validation_context","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-default_validation_context","()",""],["define","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-define","()",""],["define","ActiveRecord::Schema","ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_attribute","ActiveRecord::Attributes::ClassMethods","ActiveRecord/Attributes/ClassMethods.html#method-i-define_attribute","( name, cast_type, default: NO_DEFAULT_PROVIDED, user_provided_default: true )","<p>This is the low level API which sits beneath <code>attribute</code>. It\nonly accepts type objects, and will do its …\n"],["define_default_attribute","ActiveRecord::Attributes::ClassMethods","ActiveRecord/Attributes/ClassMethods.html#method-i-define_default_attribute","(name, value, type, from_user:)",""],["define_method_attribute","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(name)","<p>We want to generate the methods via module_eval rather than define_method,\nbecause define_method is slower …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(name)",""],["delete","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-delete","(*records)","<p>Deletes the <code>records</code> supplied from the collection according to\nthe strategy specified by the <code>:dependent</code> …\n"],["delete","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-delete","(element)","<p>If <code>element</code> is in the queue, remove and return it, or nil.\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete_all","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-delete_all","(dependent = nil)","<p>Deletes all the records from the collection according to the strategy\nspecified by the <code>:dependent</code> option. …\n"],["delete_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records without instantiating the records first, and hence not\ncalling the #destroy method …\n"],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(arel, name = nil, binds = [])",""],["derive_class_name","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-derive_class_name","()",""],["descends_from_active_record?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F","()","<p>Returns <code>true</code> if this does not need STI type condition. Returns\n<code>false</code> if STI type condition needs to be …\n"],["destroy","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-destroy","(*records)","<p>Destroys the <code>records</code> supplied and removes them from the\ncollection. This method will <em>always</em> remove record …\n"],["destroy","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id. The object\nis instantiated first, therefore …\n"],["destroy!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy-21","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy_all","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-destroy_all","()","<p>Deletes the records of the collection directly from the database ignoring\nthe <code>:dependent</code> option. Records …\n"],["destroy_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records by instantiating each record and calling its #destroy\nmethod. Each object&#39;s …\n"],["destroy_associations","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy_associations","()","<p>A hook to be overridden by association modules.\n"],["destroy_row","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-destroy_row","()",""],["destroy_row","ActiveRecord::Locking::Optimistic","ActiveRecord/Locking/Optimistic.html#method-i-destroy_row","()",""],["destroy_row","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy_row","()",""],["destroyed?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["destroyed_by_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association","()","<p>Returns the association for the parent being destroyed.\n<p>Used to avoid updating the counter cache unnecessarily. …\n"],["destroyed_by_association=","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association-3D","(reflection)","<p>Records the association that is being destroyed and destroying this record\nin the process.\n"],["detect_enum_conflict!","ActiveRecord::Enum","ActiveRecord/Enum.html#method-i-detect_enum_conflict-21","(enum_name, method_name, klass_method = false)",""],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["disable_ddl_transaction!","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-disable_ddl_transaction-21","()","<p>Disable the transaction wrapping this migration. You can still create your\nown transactions even after …\n"],["disable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["disable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disable_extension","(name)",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["disconnect","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect","(raise_on_acquisition_timeout = true)","<p>Disconnects all connections in the pool, and clears the pool.\n<p>Raises:\n<p>ActiveRecord::ExclusiveConnectionTimeoutError …\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n<p>The pool first tries to gain ownership of …\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["discriminate_class_for_record","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-discriminate_class_for_record","(record)","<p>Called by <code>instantiate</code> to decide which class to use for a new\nrecord instance. For single-table inheritance, …\n"],["discriminate_class_for_record","ActiveRecord::Persistence::ClassMethods","ActiveRecord/Persistence/ClassMethods.html#method-i-discriminate_class_for_record","(record)","<p>Called by <code>instantiate</code> to decide which class to use for a new\nrecord instance.\n<p>See +ActiveRecord::Inheritance#discriminate_class_for_record+ …\n"],["distinct","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-distinct","()","<p>Specifies whether the records should be unique or not.\n\n<pre>class Person &lt; ActiveRecord::Base\n  has_many :pets ...</pre>\n"],["distinct","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-distinct","(value = true)","<p>Specifies whether the records should be unique or not. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">select</span>(:<span class=\"ruby-identifier\">name</span>)\n<span class=\"ruby-comment\"># Might return ...</span>\n</pre>\n"],["does_not_support_reverse?","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-does_not_support_reverse-3F","(order)",""],["down","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-down","()",""],["drop","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop","(*arguments)",""],["drop_all","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_all","()",""],["drop_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_current","(environment = env)",""],["drop_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_join_table","(table_1, table_2, options = {})","<p>Drops the join table specified by the given arguments. See\n#create_join_table for details.\n<p>Although this …\n"],["drop_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-drop_schema","(schema_name, options = {})","<p>Drops the schema for the given schema name.\n"],["drop_table","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n<p>:force &mdash; Set to <code>:cascade</code> to drop dependent objects as well. Defaults to\n…\n"],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n<p>:force &mdash; Set to <code>:cascade</code> to drop dependent objects as well. Defaults to\n…\n"],["dup","ActiveRecord::Core","ActiveRecord/Core.html#method-i-dup","","<p>Duped objects have no id assigned and are treated as new records. Note that\nthis is a “shallow” …\n"],["each","ActiveRecord::Batches::BatchEnumerator","ActiveRecord/Batches/BatchEnumerator.html#method-i-each","()","<p>Yields an ActiveRecord::Relation object for each batch of records.\n\n<pre>Person.in_batches.each do |relation| ...</pre>\n"],["each","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","ActiveRecord/Result.html#method-i-each","()",""],["each_counter_cached_associations","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-each_counter_cached_associations","()",""],["each_current_configuration","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-each_current_configuration","(environment)",""],["each_local_configuration","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-each_local_configuration","()",""],["each_record","ActiveRecord::Batches::BatchEnumerator","ActiveRecord/Batches/BatchEnumerator.html#method-i-each_record","()","<p>Looping through a collection of records from the database (using the\n<code>all</code> method, for example) is very …\n"],["eager_load","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)","<p>Forces eager loading by performing a LEFT OUTER JOIN on <code>args</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">eager_load</span>(:<span class=\"ruby-identifier\">posts</span>)\n<span class=\"ruby-comment\"># SELECT &quot;users&quot;.&quot;id&quot; ...</span>\n</pre>\n"],["eager_load!","ActiveRecord","ActiveRecord.html#method-c-eager_load-21","()",""],["eager_loading?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-eager_loading-3F","()","<p>Returns true if relation needs eager loading.\n"],["empty?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the collection is empty. If the collection has\nbeen loaded it is equivalent to <code>collection.size.zero?</code> …\n"],["empty?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveRecord::Result","ActiveRecord/Result.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-empty_insert_statement_value","()",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the Mysql2Adapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-enable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["enable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-enable_extension","(name)",""],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-enable_query_cache-21","()",""],["encode_with","ActiveRecord::Core","ActiveRecord/Core.html#method-i-encode_with","(coder)","<p>Populate <code>coder</code> with attributes about this record that should\nbe serialized. The structure of <code>coder</code> defined …\n"],["encode_with","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-encode_with","(coder)","<p>Serializes the relation objects Array.\n"],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-encoding","()","<p>Returns the current database encoding format as a string, eg:\n&#39;UTF-8&#39;\n"],["enlist_fixture_connections","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-enlist_fixture_connections","()",""],["ensure_proper_type","ActiveRecord::Inheritance","ActiveRecord/Inheritance.html#method-i-ensure_proper_type","()","<p>Sets the attribute used for single table inheritance to this class name if\nthis is not the ActiveRecord::Base …\n"],["enum","ActiveRecord::Enum","ActiveRecord/Enum.html#method-i-enum","(definitions)",""],["env","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-env","()",""],["eql?","ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata","ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-eql-3F","(other)",""],["eql?","ActiveRecord::Core","ActiveRecord/Core.html#method-i-eql-3F","(comparison_object)",""],["error_number","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number","(exception)",""],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(spec)",""],["establish_connection","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-establish_connection","(spec = nil)","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["except","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n\n<pre>Post.order(&#39;id asc&#39;).except(:order)       ...</pre>\n"],["exec_cache","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_cache","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)","<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_delete","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)","<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_insert","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_migration","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-exec_migration","(conn, direction)",""],["exec_no_cache","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_no_cache","(sql, name, binds)",""],["exec_queries","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-exec_queries","()",""],["exec_queries","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-exec_queries","()",""],["exec_queries","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-exec_queries","(&block)",""],["exec_queries","ActiveRecord::Relation::RecordFetchWarning","ActiveRecord/Relation/RecordFetchWarning.html#method-i-exec_queries","()","<p>When this module is prepended to ActiveRecord::Relation and\n`config.active_record.warn_on_records_fetched_greater_than` …\n"],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [], prepare: false)","<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes. <code>name</code> is …\n"],["exec_query","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [], prepare: false)",""],["exec_query","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [], prepare: false)",""],["exec_query","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_query","(sql, name = nil, binds = [], prepare: false)",""],["exec_rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_rollback_db_transaction","()","<p>Aborts a transaction.\n"],["exec_rollback_to_savepoint","ActiveRecord::ConnectionAdapters::Savepoints","ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-exec_rollback_to_savepoint","(name = current_savepoint_name)",""],["exec_stmt_and_free","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-exec_stmt_and_free","(sql, name, binds, cache_stmt: false)",""],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)","<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_update","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["execute","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection and returns\nthe raw result from the connection …\n"],["execute","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["execute_and_clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-execute_and_clear","(sql, name, binds, prepare: false)",""],["execute_block","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-execute_block","()",""],["execute_callstack_for_multiparameter_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-execute_callstack_for_multiparameter_attributes","(callstack)",""],["exists?","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-exists-3F","(conditions = :none)","<p>Returns true if a record exists in the table that matches the\n<code>id</code> or conditions given, or false otherwise. …\n"],["expand_hash_conditions_for_aggregates","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a #composed_of relationship …\n"],["expire","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire","()","<p>this method must only be called while holding connection pool&#39;s mutex\n"],["explain","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-explain","()","<p>Runs EXPLAIN on the query or queries triggered by this relation and returns\nthe result as a string.  …\n"],["extending","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-extending","(*modules, &block)","<p>Used to extend a scope with additional methods, either through a module or\nthrough a block provided. …\n"],["extension_enabled?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extension_enabled-3F","(name)",""],["extensions","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-extensions","()","<p>A list of extensions, to be filled in by adapters that support them.\n"],["extensions","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extensions","()",""],["extract_callstack_for_multiparameter_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-extract_callstack_for_multiparameter_attributes","(pairs)",""],["extract_new_default_value","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-extract_new_default_value","(default_or_changes)",""],["extract_precision","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-extract_precision","(sql_type)",""],["fetch_type_metadata","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-fetch_type_metadata","(sql_type, extra = \"\")",""],["fetch_type_metadata","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-fetch_type_metadata","(column_name, sql_type, oid, fmod)",""],["fetch_type_metadata","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-fetch_type_metadata","(sql_type)",""],["fifth","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-fifth","(*args)","<p>Same as #first except returns only the fifth record.\n"],["fifth","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-fifth","()","<p>Find the fifth record. If no order is defined it will order by primary key.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">fifth</span> <span class=\"ruby-comment\"># returns the ...</span>\n</pre>\n"],["fifth!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-fifth-21","()","<p>Same as #fifth but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],["finalized?","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-finalized-3F","()",""],["find","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-find","(*args, &block)","<p>Finds an object in the collection responding to the <code>id</code>. Uses\nthe same rules as ActiveRecord::Base.find …\n"],["find","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6),\nor an array of ids ([5, 6, …\n"],["find_by","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_by","(arg, *args)","<p>Finds the first record matching the specified conditions. There is no\nimplied ordering so if order matters, …\n"],["find_by!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_by-21","(arg, *args)","<p>Like #find_by, except that if no record is found, raises an\nActiveRecord::RecordNotFound error.\n"],["find_by_sql","ActiveRecord::Querying","ActiveRecord/Querying.html#method-i-find_by_sql","(sql, binds = [], preparable: nil, &block)","<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],["find_each","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-find_each","(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil)","<p>Looping through a collection of records from the database (using the\nScoping::Named::ClassMethods.all …\n"],["find_in_batches","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-find_in_batches","(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil)","<p>Yields each batch of records that was found by the find options as an\narray.\n\n<pre>Person.where(&quot;age &gt; 21&quot;).find_in_batches ...</pre>\n"],["find_last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_last","(limit)",""],["find_nth","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_nth","(index, offset = nil)",""],["find_nth!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_nth-21","(index)",""],["find_nth_from_last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_nth_from_last","(index)",""],["find_nth_with_limit","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_nth_with_limit","(index, limit)",""],["find_one","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_create_by","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-find_or_create_by","(attributes, &block)","<p>Finds the first record with the given attributes, or creates a record with\nthe attributes if one is not …\n"],["find_or_create_by!","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-find_or_create_by-21","(attributes, &block)","<p>Like #find_or_create_by, but calls create! so an exception is raised if the\ncreated record is invalid. …\n"],["find_or_initialize_by","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-find_or_initialize_by","(attributes, &block)","<p>Like #find_or_create_by, but calls new instead of create.\n"],["find_parameter_position","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-find_parameter_position","(multiparameter_name)",""],["find_some","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_some_ordered","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_some_ordered","(ids)",""],["find_sti_class","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-find_sti_class","(type_name)",""],["find_take","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_take","()",""],["find_with_associations","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_with_associations","()",""],["find_with_ids","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["finder","ActiveRecord::DynamicMatchers::FindBy","ActiveRecord/DynamicMatchers/FindBy.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::FindByBang","ActiveRecord/DynamicMatchers/FindByBang.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-finder","()",""],["first","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-first","(*args)","<p>Returns the first record, or the first <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["first","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-first","(limit = nil)","<p>Find the first record (or first N records if a parameter is supplied). If\nno order is defined it will …\n"],["first","ActiveRecord::Result","ActiveRecord/Result.html#method-i-first","()",""],["first!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as #first but raises ActiveRecord::RecordNotFound if no record is\nfound. Note that #first! accepts …\n"],["fixture_is_cached?","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*fixture_set_names)",""],["fixtures_path","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-fixtures_path","()",""],["foreign_key_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-foreign_key_exists-3F","(from_table, options_or_to_table = {})","<p>Checks to see if a foreign key exists on a table for a given foreign key\ndefinition.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Check a foreign ...</span>\n</pre>\n"],["foreign_keys","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-foreign_keys","(table_name)",""],["foreign_keys","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-foreign_keys","(table_name)",""],["foreign_keys","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-foreign_keys","(table_name)","<p>Returns an array of foreign keys for the given table. The foreign keys are\nrepresented as ForeignKeyDefinition …\n"],["forty_two","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-forty_two","(*args)","<p>Same as #first except returns only the forty second record. Also known as\naccessing “the reddit”. …\n"],["forty_two","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-forty_two","()","<p>Find the forty-second record. Also known as accessing “the reddit”. If no\norder is defined …\n"],["forty_two!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-forty_two-21","()","<p>Same as #forty_two but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],["fourth","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-fourth","(*args)","<p>Same as #first except returns only the fourth record.\n"],["fourth","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-fourth","()","<p>Find the fourth record. If no order is defined it will order by primary\nkey.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">fourth</span> <span class=\"ruby-comment\"># returns the ...</span>\n</pre>\n"],["fourth!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-fourth-21","()","<p>Same as #fourth but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],["freeze","ActiveRecord::Core","ActiveRecord/Core.html#method-i-freeze","()","<p>Clone and freeze the attributes hash such that associations are still\naccessible, even on destroyed records, …\n"],["from","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-from","(value, subquery_name = nil)","<p>Specifies table from which the records will be fetched. For example:\n\n<pre>Topic.select(&#39;title&#39;).from(&#39;posts&#39;) ...</pre>\n"],["frozen?","ActiveRecord::Core","ActiveRecord/Core.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["full_rollback?","ActiveRecord::ConnectionAdapters::SavepointTransaction","ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-full_rollback-3F","()",""],["full_version","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-full_version","()",""],["gem_version","ActiveRecord","ActiveRecord.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Active Record as a\n<code>Gem::Version</code>\n"],["generate_association_writer","ActiveRecord::NestedAttributes::ClassMethods","ActiveRecord/NestedAttributes/ClassMethods.html#method-i-generate_association_writer","(association_name, type)","<p>Generates a writer method for this association. Serves as a point for\naccessing the objects in the association. …\n"],["generate_unique_secure_token","ActiveRecord::SecureToken::ClassMethods","ActiveRecord/SecureToken/ClassMethods.html#method-i-generate_unique_secure_token","()",""],["generated_association_methods","ActiveRecord::Core::ClassMethods","ActiveRecord/Core/ClassMethods.html#method-i-generated_association_methods","()",""],["group","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-group","(*args)","<p>Allows to specify a group attribute:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">group</span>(:<span class=\"ruby-identifier\">name</span>)\n<span class=\"ruby-comment\"># SELECT &quot;users&quot;.* FROM &quot;users&quot; GROUP BY name</span>\n</pre>\n<p>Returns …\n"],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_attribute?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-has_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the given attribute is in the attributes hash,\notherwise <code>false</code>.\n\n<pre>class Person &lt; ActiveRecord::Base ...</pre>\n"],["has_attribute?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-has_attribute-3F","(attr_name)","<p>Returns true if the given attribute exists, otherwise false.\n\n<pre>class Person &lt; ActiveRecord::Base\nend\n\nPerson.has_attribute?(&#39;name&#39;) ...</pre>\n"],["has_defer_touch_attrs?","ActiveRecord::TouchLater","ActiveRecord/TouchLater.html#method-i-has_defer_touch_attrs-3F","()",""],["has_include?","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-has_include-3F","(column_name)",""],["has_many","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["has_primary_key_column?","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-has_primary_key_column-3F","()",""],["has_secure_token","ActiveRecord::SecureToken::ClassMethods","ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token","(attribute = :token)","<p>Example using #has_secure_token\n\n<pre># Schema: User(token:string, auth_token:string)\nclass User &lt; ActiveRecord::Base ...</pre>\n"],["hash","ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata","ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-hash","()",""],["hash","ActiveRecord::Core","ActiveRecord/Core.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre>[ Person.find(1), ...</pre>\n"],["hash_rows","ActiveRecord::Result","ActiveRecord/Result.html#method-i-hash_rows","()",""],["having","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)","<p>Allows to specify a HAVING clause. Note that you can&#39;t use HAVING\nwithout also specifying a GROUP …\n"],["having_clause_factory","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-having_clause_factory","()",""],["hex?","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-hex-3F","()",""],["hstore","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-hstore","(*args, **options)",""],["id","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id","()","<p>Returns the primary key value.\n"],["id=","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D","(value)","<p>Sets the primary key value.\n"],["id?","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F","()","<p>Queries the primary key value.\n"],["id_before_type_cast","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_before_type_cast","()","<p>Returns the primary key value before type cast.\n"],["id_was","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_was","()","<p>Returns the primary key previous value.\n"],["identify","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-identify","(label, column_type = :integer)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Integer identifiers are values less …\n"],["ids","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-ids","()","<p>Pluck all the ID&#39;s for the relation using the table&#39;s primary key\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">ids</span> <span class=\"ruby-comment\"># SELECT people.id ...</span>\n</pre>\n"],["ignored_columns","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-ignored_columns","","<p>The list of columns names the model should ignore. Ignored columns\nwon&#39;t have attribute accessors …\n"],["ignored_columns=","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-ignored_columns-3D","","<p>Sets the columns names the model should ignore. Ignored columns won&#39;t\nhave attribute accessors defined, …\n"],["in_batches","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-in_batches","(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil)","<p>Yields ActiveRecord::Relation objects to work with a batch of records.\n\n<pre>Person.where(&quot;age &gt; 21&quot;).in_batches ...</pre>\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means\nno limit.\n"],["in_transaction?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-in_transaction-3F","()",""],["include?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-include-3F","(record)","<p>Returns <code>true</code> if the given <code>record</code> is present in\nthe collection.\n\n<pre>class Person &lt; ActiveRecord::Base\n  has_many ...</pre>\n"],["includes","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-includes","(*args)","<p>Specify relationships to be included in the result set. For example:\n\n<pre>users = User.includes(:address)\nusers.each ...</pre>\n"],["increment","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around #increment that saves the record. This method differs from\nits non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache::ClassMethods","ActiveRecord/CounterCache/ClassMethods.html#method-i-increment_counter","(counter_name, id)","<p>Increment a numeric field by one, via a direct SQL update.\n<p>This method is used primarily for maintaining …\n"],["increment_lock","ActiveRecord::Locking::Optimistic","ActiveRecord/Locking/Optimistic.html#method-i-increment_lock","()",""],["index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n\n<pre>t.index(:name) ...</pre>\n"],["index","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-index","(column_name, options = {})","<p>Adds index options to the indexes hash, keyed by column name This is\nprimarily used to track indexes …\n"],["index_algorithms","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-index_algorithms","()",""],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-index_algorithms","()","<p>A list of index algorithms, to be filled by adapters that support them.\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_algorithms","()",""],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition.\n\n<pre># Check an index exists\nindex_exists?(:suppliers, ...</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists.\n<p>unless t.index_exists?(:branch_id)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">index</span>(:<span class=\"ruby-identifier\">branch_id</span>)\n</pre>\n"],["index_in_create","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-index_in_create","(table_name, column_name, options)",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verifies existence of an index with a given name.\n"],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verifies the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_for_remove","(table_name, options = {})",""],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>Returns the maximum number of indexes per table.\n"],["inet","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-inet","(*args, **options)",""],["inheritance_column","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column","()","<p>Defines the name of the table column which will store the class name on\nsingle-table inheritance situations. …\n"],["inheritance_column=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column-3D","(value)","<p>Sets the value of inheritance_column\n"],["inheritance_column_name","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-inheritance_column_name","()",""],["inherited","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-inherited","(subclass)",""],["inherited","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-inherited","(subclass)","<p>We need to apply this decorator here, rather than on module inclusion. The\nclosure created by the matcher …\n"],["init_internals","ActiveRecord::Core","ActiveRecord/Core.html#method-i-init_internals","()",""],["init_with","ActiveRecord::Core","ActiveRecord/Core.html#method-i-init_with","(coder)","<p>Initialize an empty model object from <code>coder</code>.\n<code>coder</code> should be the result of previously encoding an Active …\n"],["initialize_copy","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Result","ActiveRecord/Result.html#method-i-initialize_copy","(other)",""],["initialize_dup","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-initialize_dup","(other)",""],["initialize_dup","ActiveRecord::Inheritance","ActiveRecord/Inheritance.html#method-i-initialize_dup","(other)",""],["initialize_internal_metadata_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_internal_metadata_table","()",""],["initialize_internals_callback","ActiveRecord::Core","ActiveRecord/Core.html#method-i-initialize_internals_callback","()",""],["initialize_internals_callback","ActiveRecord::Inheritance","ActiveRecord/Inheritance.html#method-i-initialize_internals_callback","()",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Executes an INSERT query and returns the new record&#39;s ID\n<p><code>id_value</code> will be returned unless the value …\n"],["insert_class","ActiveRecord::FixtureSet::ClassCache","ActiveRecord/FixtureSet/ClassCache.html#method-i-insert_class","(class_names, name, klass)",""],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])",""],["inspect","ActiveRecord::Core","ActiveRecord/Core.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveRecord::Core::ClassMethods","ActiveRecord/Core/ClassMethods.html#method-i-inspect","()","<p>Returns a string like &#39;Post(id:integer, title:string, body:text)&#39;\n"],["inspect","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-inspect","()",""],["install_executor_hooks","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-c-install_executor_hooks","(executor = ActiveSupport::Executor)",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Raises an ActiveRecord::DangerousAttributeError exception when an Active\nRecord method is defined in …\n"],["instantiate","ActiveRecord::Persistence::ClassMethods","ActiveRecord/Persistence/ClassMethods.html#method-i-instantiate","(attributes, column_types = {}, &block)","<p>Given an attributes hash, <code>instantiate</code> returns a new instance\nof the appropriate class. Accepts only keys …\n"],["instantiate_all_loaded_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-instantiate_fixtures","(object, fixture_set, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-instantiate_fixtures","()",""],["int4range","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-int4range","(*args, **options)",""],["int8range","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-int8range","(*args, **options)",""],["internal_metadata_table_name","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-internal_metadata_table_name","","<p>The name of the internal metadata table. By default, the value is\n<code>&quot;ar_internal_metadata&quot;</code>.\n"],["internal_metadata_table_name=","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-internal_metadata_table_name-3D","","<p>Sets the name of the internal metadata table.\n"],["internal_poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-internal_poll","(timeout)",""],["inverse_of","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-inverse_of","(command, args, &block)","<p>Returns the inverse of the given command. For example:\n\n<pre>recorder.inverse_of(:rename_table, [:old, :new]) ...</pre>\n"],["invert_add_foreign_key","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_add_foreign_key","(args)",""],["invert_add_index","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_add_index","(args)",""],["invert_change_column_default","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_change_column_default","(args)",""],["invert_change_column_null","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_change_column_null","(args)",""],["invert_drop_table","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_drop_table","(args, &block)",""],["invert_remove_column","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_remove_column","(args)",""],["invert_remove_foreign_key","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_remove_foreign_key","(args)",""],["invert_remove_index","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_remove_index","(args)",""],["invert_rename_column","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_rename_column","(args)",""],["invert_rename_index","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_rename_index","(args)",""],["invert_rename_table","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_rename_table","(args)",""],["is_cached_plan_failure?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-is_cached_plan_failure-3F","(e)",""],["is_utc?","ActiveRecord::Type::Internal::Timezone","ActiveRecord/Type/Internal/Timezone.html#method-i-is_utc-3F","()",""],["joined_includes_values","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],["joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-joins","(*args)","<p>Performs a joins on <code>args</code>. The given symbol(s) should match the\nname of the association(s).\n\n<pre>User.joins(:posts) ...</pre>\n"],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>Returns maximum number of joins in a single query.\n"],["json","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-json","(*args, **options)",""],["json","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-json","(*args, **options)",""],["jsonb","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-jsonb","(*args, **options)",""],["klass","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, class_name: &#39;Money&#39;</code> returns the\nMoney class …\n"],["klasses","ActiveRecord::NoTouching","ActiveRecord/NoTouching.html#method-c-klasses","()",""],["last","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-last","(*args)","<p>Returns the last record, or the last <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-last","(limit = nil)","<p>Find the last record (or last N records if a parameter is supplied). If no\norder is defined it will order …\n"],["last","ActiveRecord::Result","ActiveRecord/Result.html#method-i-last","()",""],["last!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as #last but raises ActiveRecord::RecordNotFound if no record is\nfound. Note that #last! accepts …\n"],["last_inserted_id","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-last_inserted_id","(result)",""],["lease","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease","()","<p>this method must only be called while holding connection pool&#39;s mutex\n"],["left_joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-left_joins","(*args)",""],["left_outer_joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-left_outer_joins","(*args)","<p>Performs a left outer joins on <code>args</code>:\n\n<pre>User.left_outer_joins(:posts)\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; LEFT ...</pre>\n"],["length","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-length","()","<p>Returns the size of the collection calling <code>size</code> on the target.\nIf the collection has been already loaded, …\n"],["length","ActiveRecord::Result","ActiveRecord/Result.html#method-i-length","()",""],["limit","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-limit","(value)","<p>Specifies a limit for the number of records to retrieve.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">limit</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-comment\"># generated SQL has &#39;LIMIT 10&#39; ...</span>\n</pre>\n"],["limited_ids_for","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-limited_ids_for","(relation)",""],["line","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-line","(*args, **options)",""],["load","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-load","(&block)","<p>Causes the records to be loaded from the database if they have not been\nloaded already. You can use this …\n"],["load_fixtures","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-load_fixtures","(config)",""],["load_instances?","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-load_instances-3F","()",""],["load_migration","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-load_migration","()",""],["load_records","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-load_records","(records)",""],["load_schema","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-load_schema","()",""],["load_schema!","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-load_schema-21","()",""],["load_schema_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema_current","(format = ActiveRecord::Base.schema_format, file = nil, environment = env)",""],["load_schema_for","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema_for","(*args)",""],["load_schema_if_pending!","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-load_schema_if_pending-21","()",""],["load_seed","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_seed","()",""],["load_target","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-load_target","()",""],["loaded?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-loaded-3F","()","<p>Returns <code>true</code> if the association has been loaded, otherwise\n<code>false</code>.\n\n<pre>person.pets.loaded? # =&gt; false\nperson.pets ...</pre>\n"],["local_database?","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-local_database-3F","(configuration)",""],["lock","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)","<p>Specifies locking settings (default to <code>true</code>). For more\ninformation on locking, please see ActiveRecord::Locking …\n"],["lock!","ActiveRecord::Locking::Pessimistic","ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locked?","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-locked-3F","(arel)","<p>If arel is locked this is a SELECT … FOR UPDATE or somesuch. Such queries\nshould not be cached.\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_column=","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D","(value)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [], statement_name = nil)",""],["logger","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["longblob","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-longblob","(*args, **options)",""],["longtext","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-longtext","(*args, **options)",""],["lseg","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-lseg","(*args, **options)",""],["ltree","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-ltree","(*args, **options)",""],["macaddr","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-macaddr","(*args, **options)",""],["many?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-many-3F","(&block)","<p>Returns true if the collection has more than one record. Equivalent to\n<code>collection.size &gt; 1</code>.\n\n<pre>class Person ...</pre>\n"],["many?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-many-3F","()","<p>Returns true if there is more than one record.\n"],["mark_for_destruction","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parent&#39;s save\ntransaction. This does <em>not</em> actually …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the\nparent&#39;s save transaction.\n<p>Only …\n"],["marshal_dump","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_dump","()",""],["marshal_load","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_load","(array)",""],["match","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-c-match","(model, name)",""],["max_updated_column_timestamp","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-max_updated_column_timestamp","(timestamp_names = timestamp_attributes_for_update)",""],["maximum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-maximum","(column_name)","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["mediumblob","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-mediumblob","(*args, **options)",""],["mediumtext","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-mediumtext","(*args, **options)",""],["merge","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-merge","(other)","<p>Merges in the conditions from <code>other</code>, if <code>other</code> is\nan ActiveRecord::Relation. Returns an array representing …\n"],["method_missing","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["method_missing","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-method_missing","(method, *args, &block)","<p>Forwards any missing method call to the target.\n"],["migrate","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-migrate","(direction)",""],["migrate","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migrate","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrate","()",""],["migration","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-migration","()",""],["migration_keys","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-migration_keys","()","<p>Lists the valid migration options\n"],["migration_keys","ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper","ActiveRecord/ConnectionAdapters/MySQL/ColumnDumper.html#method-i-migration_keys","()",""],["migration_keys","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDumper","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDumper.html#method-i-migration_keys","()","<p>Adds <code>:array</code> as a valid migration key\n"],["migrations_paths","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrations_paths","()",""],["minimum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-minimum","(column_name)","<p>Calculates the minimum value on a given column. The value is returned with\nthe same data type of the …\n"],["model_class=","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-model_class-3D","(class_name)",""],["money","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-money","(*args, **options)",""],["mtime","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-mtime","()",""],["native_database_types","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a hash of mappings from the abstract data types to the native\ndatabase types. See TableDefinition#column …\n"],["nested_records_changed_for_autosave?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-nested_records_changed_for_autosave-3F","()","<p>go through nested autosave associations that are loaded in memory (without\nloading any new ones), and …\n"],["new","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-new","(*args, &block)",""],["new","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-c-new","(klass, table, predicate_builder, association)",""],["new","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-new","(attributes = {}, &block)",""],["new","ActiveRecord::AttributeAssignmentError","ActiveRecord/AttributeAssignmentError.html#method-c-new","(message = nil, exception = nil, attribute = nil)",""],["new","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::AbstractAdapter::Version","ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-c-new","(lock = Monitor.new)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-c-new","(pool, frequency)",""],["new","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-c-new","(value)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata","ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-c-new","(type_metadata, oid: nil, fmod: nil)",""],["new","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-new","(*)",""],["new","ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-c-new","(*)",""],["new","ActiveRecord::ConnectionAdapters::RealTransaction","ActiveRecord/ConnectionAdapters/RealTransaction.html#method-c-new","(connection, options, *args)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::SavepointTransaction","ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-c-new","(connection, savepoint_name, options, *args)",""],["new","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(name, temporary = false, options = nil, as = nil, comment: nil)",""],["new","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-c-new","(state = nil)",""],["new","ActiveRecord::Core","ActiveRecord/Core.html#method-c-new","(attributes = nil)","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-c-new","(model, name)",""],["new","ActiveRecord::EagerLoadPolymorphicError","ActiveRecord/EagerLoadPolymorphicError.html#method-c-new","(reflection = nil)",""],["new","ActiveRecord::EnvironmentMismatchError","ActiveRecord/EnvironmentMismatchError.html#method-c-new","(current: nil, stored: nil)",""],["new","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-new","(connection, name, class_name, path, config = ActiveRecord::Base)",""],["new","ActiveRecord::FixtureSet::ClassCache","ActiveRecord/FixtureSet/ClassCache.html#method-c-new","(class_names, config)",""],["new","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-new","(*args, &block)","<p>Determines if one of the attributes passed in is the inheritance column,\nand if the inheritance column …\n"],["new","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-new","(name = self.class.name, version = nil)",""],["new","ActiveRecord::Migration::CheckPending","ActiveRecord/Migration/CheckPending.html#method-c-new","(app)",""],["new","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-c-new","(name, version, filename, scope)",""],["new","ActiveRecord::MultiparameterAssignmentErrors","ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors = nil)",""],["new","ActiveRecord::QueryMethods::WhereChain","ActiveRecord/QueryMethods/WhereChain.html#method-c-new","(scope)",""],["new","ActiveRecord::RecordInvalid","ActiveRecord/RecordInvalid.html#method-c-new","(record = nil)",""],["new","ActiveRecord::RecordNotDestroyed","ActiveRecord/RecordNotDestroyed.html#method-c-new","(message = nil, record = nil)",""],["new","ActiveRecord::RecordNotFound","ActiveRecord/RecordNotFound.html#method-c-new","(message = nil, model = nil, primary_key = nil, id = nil)",""],["new","ActiveRecord::RecordNotSaved","ActiveRecord/RecordNotSaved.html#method-c-new","(message = nil, record = nil)",""],["new","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-c-new","(name, scope, options, active_record)",""],["new","ActiveRecord::Relation","ActiveRecord/Relation.html#method-c-new","(klass, table, predicate_builder, values = {})",""],["new","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-new","(*args, &block)","<p>Initializes new record from relation while maintaining the current scope.\n<p>Expects arguments in the same …\n"],["new","ActiveRecord::Result","ActiveRecord/Result.html#method-c-new","(columns, rows, column_types = {})",""],["new","ActiveRecord::StaleObjectError","ActiveRecord/StaleObjectError.html#method-c-new","(record = nil, attempted_action = nil)",""],["new","ActiveRecord::StatementInvalid","ActiveRecord/StatementInvalid.html#method-c-new","(message = nil, original_exception = nil)",""],["new","ActiveRecord::UnknownPrimaryKey","ActiveRecord/UnknownPrimaryKey.html#method-c-new","(model = nil, description = nil)",""],["new_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-new_connection","()",""],["new_from_clause","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-new_from_clause","()",""],["new_having_clause","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-new_having_clause","()",""],["new_record?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn&#39;t been saved yet – that is, a record\nfor the object doesn&#39;t …\n"],["new_where_clause","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-new_where_clause","()",""],["next_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-next_key","()",""],["next_migration_number","ActiveRecord::Generators::Migration::ClassMethods","ActiveRecord/Generators/Migration/ClassMethods.html#method-i-next_migration_number","(dirname)","<p>Implement the required interface for Rails::Generators::Migration.\n"],["next_migration_number","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-next_migration_number","(number)","<p>Determines the version number of the next migration.\n"],["next_sequence_value","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-next_sequence_value","()","<p>Returns the next value that will be used as the primary key on an insert\nstatement.\n"],["no_touching","ActiveRecord::NoTouching::ClassMethods","ActiveRecord/NoTouching/ClassMethods.html#method-i-no_touching","(&block)","<p>Lets you selectively disable calls to `touch` for the duration of a block.\n<p>Examples\n\n<pre>ActiveRecord::Base.no_touching ...</pre>\n"],["no_touching?","ActiveRecord::NoTouching","ActiveRecord/NoTouching.html#method-i-no_touching-3F","()",""],["no_wait_poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-no_wait_poll","()","<p>Remove and return the head the queue if the number of available elements is\nstrictly greater than the …\n"],["none","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-none","()","<p>Returns a chainable relation with zero records.\n<p>The returned relation implements the Null Object pattern. …\n"],["none?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-none-3F","()","<p>Returns true if there are no records.\n"],["normalize_reflection_attribute","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-normalize_reflection_attribute","(indexed_attribute, reflection, index, attribute)",""],["not","ActiveRecord::QueryMethods::WhereChain","ActiveRecord/QueryMethods/WhereChain.html#method-i-not","(opts, *rest)","<p>Returns a new relation expressing WHERE + NOT condition according to the\nconditions in the arguments. …\n"],["null_scope?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-null_scope-3F","()",""],["num_waiting","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-num_waiting","()","<p>Returns the number of threads currently waiting on this queue.\n"],["numrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-numrange","(*args, **options)",""],["offset","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-offset","(value)","<p>Specifies the number of rows to skip before returning rows.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">offset</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-comment\"># generated SQL has &quot;OFFSET ...</span>\n</pre>\n"],["offset_index","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-offset_index","()",""],["one?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-one-3F","()","<p>Returns true if there is exactly one record.\n"],["only","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n\n<pre>Post.order(&#39;id asc&#39;).only(:where) ...</pre>\n"],["operation_over_aggregate_column","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-operation_over_aggregate_column","(column, operation, distinct)",""],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["or","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-or","(other)","<p>Returns a new relation, which is the logical union of this relation and the\none passed as an argument. …\n"],["order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-order","(*args)","<p>Allows to specify an order attribute:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">order</span>(:<span class=\"ruby-identifier\">name</span>)\n<span class=\"ruby-comment\"># SELECT &quot;users&quot;.* FROM &quot;users&quot; ORDER BY &quot;users&quot;.&quot;name&quot; ...</span>\n</pre>\n"],["original_exception","ActiveRecord::StatementInvalid","ActiveRecord/StatementInvalid.html#method-i-original_exception","()",""],["owner_to_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-owner_to_pool","()",""],["path","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-path","(*args, **options)",""],["pattern","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-c-pattern","()",""],["perform_calculation","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-perform_calculation","(operation, column_name)",""],["persisted?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns true if the record is persisted, i.e. it&#39;s not a new record and\nit was not destroyed, otherwise …\n"],["pk_attribute?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-pk_attribute-3F","(name)",""],["pluck","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-pluck","(*column_names)",""],["pluck","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-pluck","(*column_names)","<p>Use #pluck as a shortcut to select one or more attributes without loading a\nbunch of records just to …\n"],["pluralize_table_names","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-pluralize_table_names","","<p>Indicates whether table names should be the pluralized versions of the\ncorresponding class names. If …\n"],["pluralize_table_names=","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-pluralize_table_names-3D","","<p>Set whether table names should be the pluralized versions of the\ncorresponding class names. If true, …\n"],["point","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-point","(*args, **options)",""],["poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-poll","(timeout = nil)","<p>Remove the head of the queue.\n<p>If <code>timeout</code> is not given, remove and return the head the queue\nif the number …\n"],["polygon","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-polygon","(*args, **options)",""],["pool_from_any_process_for","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-pool_from_any_process_for","(spec_name)",""],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL server.\n"],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefetch_primary_key?","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-prefetch_primary_key-3F","()","<p>Determines if the primary key values should be selected from their\ncorresponding sequence before the …\n"],["prefix","ActiveRecord::DynamicMatchers::FindBy","ActiveRecord/DynamicMatchers/FindBy.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::FindByBang","ActiveRecord/DynamicMatchers/FindByBang.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-c-prefix","()",""],["preload","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-preload","(*args)","<p>Allows preloading of <code>args</code>, in the same way that #includes\ndoes:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">preload</span>(:<span class=\"ruby-identifier\">posts</span>)\n<span class=\"ruby-comment\"># SELECT &quot;posts&quot;.* ...</span>\n</pre>\n"],["prepare_column_options","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-prepare_column_options","(column)","<p>This can be overridden on an Adapter level basis to support other extended\ndatatypes (Example: Adding …\n"],["prepare_column_options","ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper","ActiveRecord/ConnectionAdapters/MySQL/ColumnDumper.html#method-i-prepare_column_options","(column)",""],["prepare_column_options","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDumper","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDumper.html#method-i-prepare_column_options","(column)","<p>Adds <code>:array</code> option to the default set\n"],["prepare_data_sources","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-prepare_data_sources","()",""],["prepare_statement","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-prepare_statement","(sql)","<p>Prepare the statement if it hasn&#39;t been prepared, return the statement\nkey.\n"],["prepend","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-prepend","(*args)",""],["preprocess_order_args","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-preprocess_order_args","(order_args)",""],["pretty_print","ActiveRecord::Core","ActiveRecord/Core.html#method-i-pretty_print","(pp)","<p>Takes a PP and prettily prints this record to it, allowing you to get a\nnice result from <code>pp record</code> when …\n"],["pretty_print","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-pretty_print","(q)",""],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::ColumnMethods","ActiveRecord/ConnectionAdapters/ColumnMethods.html#method-i-primary_key","(name, type = :primary_key, **options)","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-primary_key","(name, type = :primary_key, **options)",""],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-primary_key","(name, type = :primary_key, **options)","<p>Defines the primary key field. Use of the native PostgreSQL UUID type is\nsupported, and can be used by …\n"],["primary_key","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-primary_key","(table_name)","<p>Returns just a table&#39;s primary key\n"],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Sets the name of the primary key column.\n\n<pre>class Project &lt; ActiveRecord::Base\n  self.primary_key = &#39;sysid&#39; ...</pre>\n"],["primary_key_name","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-primary_key_name","()",""],["primary_key_prefix_type","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-primary_key_prefix_type","","<p>The prefix type that will be prepended to every primary key column name.\nThe options are <code>:table_name</code> …\n"],["primary_key_prefix_type=","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-primary_key_prefix_type-3D","","<p>Sets the prefix type that will be prepended to every primary key column\nname. The options are <code>:table_name</code> …\n"],["primary_key_type","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-primary_key_type","()",""],["primary_key_type","ActiveRecord::Generators::Migration","ActiveRecord/Generators/Migration.html#method-i-primary_key_type","()",""],["primary_keys","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-primary_keys","(table_name)",""],["proper_table_name","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-proper_table_name","(name, options = {})","<p>Finds the correct table name given an Active Record object. Uses the Active\nRecord object&#39;s own  …\n"],["protected_environments","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-protected_environments","","<p>The array of names of environments where destructive actions should be\nprohibited. By default, the value …\n"],["protected_environments=","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-protected_environments-3D","","<p>Sets an array of names of environments where destructive actions should be\nprohibited.\n"],["proxy_association","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-proxy_association","()",""],["proxy_association","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-proxy_association","()",""],["purge","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge","(configuration)",""],["purge_all","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge_all","()",""],["purge_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge_current","(environment = env)",""],["push","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-push","(*records)",""],["query_attribute","ActiveRecord::AttributeMethods::Query","ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["query_cache_enabled","ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration","ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-query_cache_enabled","()",""],["quote","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_schema_name","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-quote_schema_name","(name)","<p>Quotes schema names for use in SQL queries.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)",""],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any &#39; (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)","<p>Override to return the quoted table name for assignment. Defaults to table\nquoting.\n<p>This works for mysql2 …\n"],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, **options)",""],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)","<p>Quote date/time values for use in SQL input. Includes microseconds if the\nvalue is a Time responding …\n"],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["raise_conflict_error","ActiveRecord::Enum","ActiveRecord/Enum.html#method-i-raise_conflict_error","(enum_name, method_name, type: 'instance', source: 'Active Record')",""],["raise_in_transactional_callbacks","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-raise_in_transactional_callbacks","()",""],["raise_in_transactional_callbacks=","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-raise_in_transactional_callbacks-3D","(value)",""],["raise_validation_error","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-raise_validation_error","()",""],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["read_attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name, &block)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nbefore typecasting and deserialization.\n\n<pre>class ...</pre>\n"],["read_fixture_files","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-read_fixture_files","(path)","<p>Loads the fixtures from the YAML file at <code>path</code>. If the file\nsets the <code>model_class</code> and current instance …\n"],["read_store_attribute","ActiveRecord::Store","ActiveRecord/Store.html#method-i-read_store_attribute","(store_attribute, key)",""],["reader_method","ActiveRecord::Aggregations::ClassMethods","ActiveRecord/Aggregations/ClassMethods.html#method-i-reader_method","(name, class_name, mapping, allow_nil, constructor)",""],["readonly","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)","<p>Sets readonly attributes for the returned relation. If value is true\n(default), attempting to update …\n"],["readonly!","ActiveRecord::Core","ActiveRecord/Core.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Core","ActiveRecord/Core.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly_attribute?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-readonly_attribute-3F","(name)",""],["readonly_attributes","ActiveRecord::ReadonlyAttributes::ClassMethods","ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["reap","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-reap","()","<p>Recover lost connections for the pool. A lost connection can occur if a\nprogrammer forgets to checkin …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command, &block)","<p>Record <code>command</code>. <code>command</code> should be a method name\nand arguments. For example:\n\n<pre>recorder.record(:method_name, ...</pre>\n"],["record_changed?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-record_changed-3F","(reflection, record, key)","<p>If the record is new or it has changed, returns true.\n"],["recreate_database","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],["references","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">references</span>(:<span class=\"ruby-identifier\">user</span>)\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">belongs_to</span>(:<span class=\"ruby-identifier\">supplier</span>, <span class=\"ruby-identifier\">foreign_key</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">true</span>)\n</pre>\n<p>See connection.add_reference …\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args, **options)","<p>Adds a reference.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">references</span>(:<span class=\"ruby-identifier\">user</span>)\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">belongs_to</span>(:<span class=\"ruby-identifier\">supplier</span>, <span class=\"ruby-identifier\">foreign_key</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">true</span>)\n</pre>\n<p>See connection.add_reference …\n"],["references","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-references","(*table_names)","<p>Use to indicate that the given <code>table_names</code> are referenced by\nan SQL string, and should therefore be  …\n"],["references_eager_loaded_tables?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-references_eager_loaded_tables-3F","()",""],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre>Account.reflect_on_aggregation(:balance) ...</pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre>Account.reflect_on_association(:owner) ...</pre>\n"],["reflections","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflections","()","<p>Returns a Hash of name of the reflection as the key and an\nAssociationReflection as the value.\n\n<pre>Account.reflections ...</pre>\n"],["register","ActiveRecord::Type","ActiveRecord/Type.html#method-c-register","(type_name, klass = nil, **options, &block)","<p>Add a new type to the registry, allowing it to be referenced as a symbol by\nActiveRecord::Base.attribute …\n"],["register_task","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-register_task","(pattern, task)",""],["relation_for_destroy","ActiveRecord::Locking::Optimistic","ActiveRecord/Locking/Optimistic.html#method-i-relation_for_destroy","()",""],["relation_for_destroy","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-relation_for_destroy","()",""],["release","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release","(conn, owner_thread = conn.owner)",""],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(owner_thread = Thread.current)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::Savepoints","ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-release_savepoint","(name = current_savepoint_name)",""],["reload","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-reload","()","<p>Reloads the collection from the database. Returns <code>self</code>.\nEquivalent to <code>collection(true)</code>.\n\n<pre>class Person &lt; ...</pre>\n"],["reload","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the record from the database.\n<p>This method finds record by its primary key (which could be assigned …\n"],["reload","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-reload","()","<p>Forces reloading of relation.\n"],["reload_schema_from_cache","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-reload_schema_from_cache","()",""],["remove","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-remove","(conn)","<p>Remove a connection from the connection pool. The connection will remain\nopen and active but will no …\n"],["remove","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-remove","()","<p>Removes and returns the head of the queue if possible, or nil.\n"],["remove","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">remove</span>(:<span class=\"ruby-identifier\">qualification</span>)\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">remove</span>(:<span class=\"ruby-identifier\">qualification</span>, :<span class=\"ruby-identifier\">experience</span>)\n</pre>\n"],["remove_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_belongs_to","(table_name, ref_name, foreign_key: false, polymorphic: false, **options)",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, column_name, type = nil, options = {})","<p>Removes the column from the table definition.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">remove_column</span>(:<span class=\"ruby-identifier\">suppliers</span>, :<span class=\"ruby-identifier\">qualification</span>)\n</pre>\n<p>The <code>type</code> and <code>options</code> …\n"],["remove_column","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-remove_column","(name)","<p>remove the column <code>name</code> from the table.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">remove_column</span>(:<span class=\"ruby-identifier\">account_id</span>)\n</pre>\n"],["remove_column_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-remove_column_sql","(table_name, column_name, type = nil, options = {})",""],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)","<p>Removes the given columns from the table definition.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">remove_columns</span>(:<span class=\"ruby-identifier\">suppliers</span>, :<span class=\"ruby-identifier\">qualification</span>, :<span class=\"ruby-identifier\">experience</span>)\n</pre>\n"],["remove_columns_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-remove_columns_sql","(table_name, *column_names)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(spec_name)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_connection","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-remove_connection","(name = nil)",""],["remove_connection_from_thread_cache","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-remove_connection_from_thread_cache","(conn, owner_thread = conn.owner)",""],["remove_foreign_key","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_foreign_key","(from_table, options_or_to_table = {})","<p>Removes the given foreign key from the table. Any option parameters\nprovided will be used to re-add the …\n"],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Removes the given index from the table.\n<p>Removes the index on <code>branch_id</code> in the <code>accounts</code>\ntable if exactly …\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n\n<pre>t.remove_index(:branch_id)\nt.remove_index(column: [:branch_id, ...</pre>\n"],["remove_index_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-remove_index_sql","(table_name, options = {})",""],["remove_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_reference","(table_name, ref_name, foreign_key: false, polymorphic: false, **options)","<p>Removes the reference(s). Also removes a <code>type</code> column if one\nexists. #remove_reference and #remove_belongs_to …\n"],["remove_references","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n\n<pre>t.remove_references(:user)\nt.remove_belongs_to(:supplier, ...</pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name, options = {})","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table definition.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">remove_timestamps</span>(:<span class=\"ruby-identifier\">suppliers</span>)\n</pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","(options = {})","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">remove_timestamps</span>\n</pre>\n<p>See connection.remove_timestamps …\n"],["remove_timestamps_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-remove_timestamps_sql","(table_name, options = {})",""],["rename","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">rename</span>(:<span class=\"ruby-identifier\">description</span>, :<span class=\"ruby-identifier\">name</span>)\n</pre>\n<p>See connection.rename_column\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rename_column</span>(:<span class=\"ruby-identifier\">suppliers</span>, :<span class=\"ruby-identifier\">description</span>, :<span class=\"ruby-identifier\">name</span>)\n</pre>\n"],["rename_column_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column_indexes","(table_name, column_name, new_column_name)",""],["rename_column_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-rename_column_sql","(table_name, column_name, new_column_name)",""],["rename_index","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Renames an index of a table. Raises error if length of new index name is\ngreater than allowed limit. …\n"],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Renames an index.\n<p>Rename the <code>index_people_on_last_name</code> index to\n<code>index_users_on_last_name</code>:\n\n<pre>rename_index ...</pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-rename_index","(index_name, new_index_name)","<p>Renames the given index on the table.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">rename_index</span>(:<span class=\"ruby-identifier\">user_id</span>, :<span class=\"ruby-identifier\">account_id</span>)\n</pre>\n<p>See connection.rename_index …\n"],["rename_table","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rename_table</span>(<span class=\"ruby-string\">&#39;octopuses&#39;</span>, <span class=\"ruby-string\">&#39;octopi&#39;</span>)\n</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table. Also renames a table&#39;s primary key sequence if the\nsequence name exists and matches …\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rename_table</span>(<span class=\"ruby-string\">&#39;octopuses&#39;</span>, <span class=\"ruby-string\">&#39;octopi&#39;</span>)\n</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rename_table</span>(<span class=\"ruby-string\">&#39;octopuses&#39;</span>, <span class=\"ruby-string\">&#39;octopi&#39;</span>)\n</pre>\n"],["rename_table_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table_indexes","(table_name, new_name)",""],["render_bind","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-render_bind","(attribute)",""],["reorder","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reorder","(*args)","<p>Replaces any existing order defined on the relation with the specified\norder.\n\n<pre>User.order(&#39;email DESC&#39;).reorder(&#39;id ...</pre>\n"],["replace","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-replace","(other_array)","<p>Replaces this collection with <code>other_array</code>. This will perform a\ndiff and delete/add only records that …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode.\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-requires_reloading-3F","()",""],["reset","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-reset","()","<p>Unloads the association. Returns <code>self</code>.\n\n<pre>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets ...</pre>\n"],["reset","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset_cache","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-reset_cache","()",""],["reset_column_information","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache::ClassMethods","ActiveRecord/CounterCache/ClassMethods.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery. This is useful when …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["respond_to?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-respond_to-3F","(name, include_private = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["retrieve_connection","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(spec_name)","<p>Retrieving the connection pool happens a lot so we cache it in\n@class_to_pool. This makes retrieving …\n"],["reverse_order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reverse_order","()","<p>Reverse the existing order clause on the relation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-string\">&#39;name ASC&#39;</span>).<span class=\"ruby-identifier\">reverse_order</span> <span class=\"ruby-comment\"># generated SQL ...</span>\n</pre>\n"],["reverse_sql_order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reverse_sql_order","(order_query)",""],["reversible","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-reversible","()","<p>Used to specify an operation that can be run in one direction or another.\nCall the methods <code>up</code> and <code>down</code> …\n"],["revert","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-revert","(*migration_classes)","<p>Reverses the migration commands for the given block and the given\nmigrations.\n<p>The following migration …\n"],["revert","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-revert","()","<p>While executing the given block, the recorded will be in reverting mode.\nAll commands recorded will end …\n"],["reverting?","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-reverting-3F","()",""],["rewhere","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-rewhere","(conditions)","<p>Allows you to change a previously set where condition for a given\nattribute, instead of appending to …\n"],["rollback","ActiveRecord::ConnectionAdapters::RealTransaction","ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-rollback","()",""],["rollback","ActiveRecord::ConnectionAdapters::SavepointTransaction","ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-rollback","()",""],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rolledback?","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-rolledback-3F","()",""],["root","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-root","()",""],["run","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-i-run","()",""],["run","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-run","(*migration_classes)","<p>Runs the given migration classes. Last argument can specify options:\n<p>:direction (default is :up)\n<p>:revert …\n"],["run","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-c-run","()",""],["run_in_transaction?","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["runtime","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["sanitize_conditions","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_conditions","(condition)",""],["sanitize_sql","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql","(condition)",""],["sanitize_sql_array","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment","(assignments, default_table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions","(condition)","<p>Accepts an array or string of SQL conditions and sanitizes them into a\nvalid SQL fragment for a WHERE …\n"],["sanitize_sql_for_order","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_order","(condition)","<p>Accepts an array, or string of SQL conditions and sanitizes them into a\nvalid SQL fragment for an ORDER …\n"],["sanitize_sql_hash_for_assignment","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment","(attrs, table)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre>sanitize_sql_hash_for_assignment({ ...</pre>\n"],["sanitize_sql_like","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_like","(string, escape_character = \"\\\\\")","<p>Sanitizes a <code>string</code> so that it is safe to use within an SQL\nLIKE statement. This method uses <code>escape_character</code> …\n"],["save","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-save","(*args)","<p>Saves the model.\n<p>If the model is new, a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing <code>validate:\nfalse</code>. The regular ActiveRecord::Base#save …\n"],["save!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-save-21","(*args)","<p>Saves the model.\n<p>If the model is new, a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like ActiveRecord::Base#save but will\nraise an ActiveRecord::RecordInvalid …\n"],["save_belongs_to_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-save_belongs_to_association","(reflection)","<p>Saves the associated record if it&#39;s new or <code>:autosave</code> is\nenabled.\n<p>In addition, it will destroy the …\n"],["save_collection_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-save_collection_association","(reflection)","<p>Saves any new associated records, or all loaded autosave associations if\n<code>:autosave</code> is enabled on the …\n"],["save_has_one_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-save_has_one_association","(reflection)","<p>Saves the associated record if it&#39;s new or <code>:autosave</code> is\nenabled on the association.\n<p>In addition, it …\n"],["say","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_with_time","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema_cache=","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_cache-3D","(cache)",""],["schema_collation","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-schema_collation","(column)",""],["schema_collation","ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper","ActiveRecord/ConnectionAdapters/MySQL/ColumnDumper.html#method-i-schema_collation","(column)",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_creation","()",""],["schema_default","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-schema_default","(column)",""],["schema_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_exists-3F","(name)","<p>Returns true if schema exists.\n"],["schema_expression","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-schema_expression","(column)",""],["schema_expression","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDumper","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDumper.html#method-i-schema_expression","(column)",""],["schema_file","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-schema_file","(format = ActiveRecord::Base.schema_format)",""],["schema_limit","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-schema_limit","(column)",""],["schema_loaded?","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-schema_loaded-3F","()",""],["schema_migrations_table_name","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-schema_migrations_table_name","","<p>The name of the schema migrations table. By default, the value is\n<code>&quot;schema_migrations&quot;</code>.\n"],["schema_migrations_table_name=","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-schema_migrations_table_name-3D","","<p>Sets the name of the schema migrations table.\n"],["schema_names","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_names","()","<p>Returns an array of schema names.\n"],["schema_precision","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-schema_precision","(column)",""],["schema_precision","ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper","ActiveRecord/ConnectionAdapters/MySQL/ColumnDumper.html#method-i-schema_precision","(column)",""],["schema_scale","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-schema_scale","(column)",""],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["schema_type","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-schema_type","(column)",""],["schema_type","ActiveRecord::ConnectionAdapters::MySQL::ColumnDumper","ActiveRecord/ConnectionAdapters/MySQL/ColumnDumper.html#method-i-schema_type","(column)",""],["schema_type","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDumper","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDumper.html#method-i-schema_type","(column)",""],["scope","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-scope","()","<p>Returns a <code>Relation</code> object for the records in this association\n"],["scope","ActiveRecord::Scoping::Named::ClassMethods","ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope","(name, body, &block)","<p>Adds a class method for retrieving and querying objects. The method is\nintended to return an ActiveRecord::Relation …\n"],["scope_for","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-scope_for","(klass)",""],["scope_for_create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoping","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-scoping","()","<p>We don&#39;t want this object to be put on the scoping stack, because that\ncould create an infinite loop …\n"],["scoping","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">post_id</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">scoping</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">first</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["second","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-second","(*args)","<p>Same as #first except returns only the second record.\n"],["second","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-second","()","<p>Find the second record. If no order is defined it will order by primary\nkey.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">second</span> <span class=\"ruby-comment\"># returns the ...</span>\n</pre>\n"],["second!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-second-21","()","<p>Same as #second but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],["second_to_last","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-second_to_last","(*args)","<p>Same as #first except returns only the second-to-last record.\n"],["second_to_last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-second_to_last","()","<p>Find the second-to-last record. If no order is defined it will order by\nprimary key.\n\n<pre>Person.second_to_last ...</pre>\n"],["second_to_last!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-second_to_last-21","()","<p>Same as #second_to_last but raises ActiveRecord::RecordNotFound if no\nrecord is found.\n"],["seed_loader","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-seed_loader","()",""],["select","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-select","(*fields, &block)","<p>Works in two ways.\n<p><strong>First:</strong> Specify a subset of fields to be selected from the\nresult set.\n\n<pre>class Person &lt; ...</pre>\n"],["select","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-select","(*fields)","<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like +Array#select+.\n\n<pre>Model.all.select ...</pre>\n"],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [], preparable: nil)","<p>Returns an ActiveRecord::Result instance.\n"],["select_all","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [], preparable: nil)","<p>Returns an ActiveRecord::Result instance.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [], preparable: nil)",""],["select_for_count","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-select_for_count","()",""],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil, binds = [])","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_result","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-select_result","(sql, name = nil, binds = [])",""],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil, binds = [])","<p>Returns a single value from a record\n"],["select_value","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-select_value","(arel, name = nil, binds = [])",""],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil, binds = [])","<p>Returns an array of the values of the first column in a select:\n\n<pre>select_values(&quot;SELECT id FROM companies ...</pre>\n"],["select_values","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-select_values","(arel, name = nil, binds = [])",""],["sequence_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name","()",""],["sequence_name=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D","(value)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["serial","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-serial","(*args, **options)",""],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-serial_sequence","(table, column)",""],["serializable_hash","ActiveRecord::Serialization","ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveRecord::AttributeMethods::Serialization::ClassMethods","ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize","(attr_name, class_name_or_coder = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialize","ActiveRecord::Type::Time","ActiveRecord/Type/Time.html#method-i-serialize","(value)",""],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})","<p>Sets the model class for a fixture when the class name cannot be inferred\nfrom the fixture name.\n<p>Examples: …\n"],["set_options_for_callbacks!","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-set_options_for_callbacks-21","(args, enforced_options = {})",""],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()",""],["set_state","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-set_state","(state)",""],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(fixture_set_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-setup_fixtures","(config = ActiveRecord::Base)",""],["should_record_timestamps?","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-should_record_timestamps-3F","()",""],["show_variable","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE &#39;name&#39;\n"],["signature","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-signature","()","<p>The parameters in the signature may have reserved Ruby words, in order to\nprevent errors, we start each …\n"],["size","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-size","()","<p>Returns the size of the collection. If the collection hasn&#39;t been\nloaded, it executes a <code>SELECT COUNT(*)</code> …\n"],["size","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-size","()",""],["size","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-size","()",""],["size","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["slice","ActiveRecord::Core","ActiveRecord/Core.html#method-i-slice","(*methods)","<p>Returns a hash of the given methods with their names as keys and returned\nvalues as values.\n"],["spawn","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-spawn","()",""],["sql","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_color","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-sql_color","(sql)",""],["sql_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-sql_key","(sql)","<p>Returns the statement identifier for the client side cache of statements\n"],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>Returns the maximum length of an SQL query.\n"],["sql_type","ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata","ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-sql_type","()",""],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-sqlite_version","()",""],["sti_name","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name","()",""],["store","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-store","(store_attribute, options = {})",""],["store_accessor","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-store_accessor","(store_attribute, *keys)",""],["store_accessor_for","ActiveRecord::Store","ActiveRecord/Store.html#method-i-store_accessor_for","(store_attribute)",""],["stored_attributes","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-stored_attributes","()",""],["strict_mode?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-strict_mode-3F","()",""],["string_containing_comma?","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-string_containing_comma-3F","(value)",""],["structurally_incompatible_values_for_or","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-structurally_incompatible_values_for_or","(other)",""],["structure_dump","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_dump","(*arguments)",""],["structure_load","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_load","(*arguments)",""],["subclass_from_attributes","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-subclass_from_attributes","(attrs)","<p>Detect the subclass from the inheritance column of attrs. If the\ninheritance column value is not self …\n"],["subquery_for","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-subquery_for","(key, select)","<p>MySQL is too stupid to create a temporary table for use subquery, so we\nhave to give it some prompting …\n"],["suffix","ActiveRecord::DynamicMatchers::FindByBang","ActiveRecord/DynamicMatchers/FindByBang.html#method-c-suffix","()",""],["suffix","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-c-suffix","()",""],["sum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-sum","(column_name = nil, &block)","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["supports_advisory_locks?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_advisory_locks-3F","()",""],["supports_advisory_locks?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_advisory_locks-3F","()","<p>Does this adapter support application-enforced advisory locking?\n"],["supports_advisory_locks?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_advisory_locks-3F","()",""],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_comments?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_comments-3F","()","<p>Does this adapter support metadata comments on database objects (tables,\ncolumns, indexes)?\n"],["supports_comments?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_comments-3F","()",""],["supports_comments?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_comments-3F","()",""],["supports_comments_in_create?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_comments_in_create-3F","()","<p>Can comments for tables, columns, and indexes be specified in create/alter\ntable statements?\n"],["supports_comments_in_create?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_comments_in_create-3F","()",""],["supports_datetime_with_precision?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_datetime_with_precision-3F","()",""],["supports_datetime_with_precision?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_datetime_with_precision-3F","()","<p>Does this adapter support datetime with precision?\n"],["supports_datetime_with_precision?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_datetime_with_precision-3F","()",""],["supports_datetime_with_precision?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_datetime_with_precision-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F","()","<p>Does this adapter support explain?\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_explain-3F","()",""],["supports_expression_index?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_expression_index-3F","()","<p>Does this adapter support expression indices?\n"],["supports_expression_index?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_expression_index-3F","()",""],["supports_extensions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_extensions-3F","()","<p>Does this adapter support database extensions?\n"],["supports_extensions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_extensions-3F","()",""],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_foreign_keys-3F","()",""],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_foreign_keys-3F","()","<p>Does this adapter support creating foreign key constraints?\n"],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_foreign_keys-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_index_sort_order-3F","()","<p>Technically MySQL allows to create indexes with the sort order syntax but\nat the moment (5.5) it doesn&#39;t …\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Does this adapter support index sort order?\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_indexes_in_create?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_indexes_in_create-3F","()",""],["supports_indexes_in_create?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_indexes_in_create-3F","()","<p>Does this adapter support creating indexes in the same statement as\ncreating the table?\n"],["supports_json?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_json-3F","()","<p>Does this adapter support json data type?\n"],["supports_json?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_json-3F","()",""],["supports_json?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_json-3F","()",""],["supports_materialized_views?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_materialized_views-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations?\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_multi_insert?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_multi_insert-3F","()","<p>Does this adapter support multi-value insert?\n"],["supports_multi_insert?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_multi_insert-3F","()",""],["supports_partial_index?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_partial_index-3F","()","<p>Does this adapter support partial indices?\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_partial_index-3F","()",""],["supports_partial_index?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_partial_index-3F","()",""],["supports_primary_key?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_primary_key-3F","()",""],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_ranges?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ranges-3F","()","<p>Range datatypes weren&#39;t introduced until PostgreSQL 9.2\n"],["supports_rename_index?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_rename_index-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints?\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_savepoints-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_savepoints-3F","()",""],["supports_statement_cache?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_transaction_isolation-3F","()",""],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>Does this adapter support setting the isolation level for a transaction?\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_transaction_isolation-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-supports_views-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_views-3F","()","<p>Does this adapter support views?\n"],["supports_views?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_views-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_views-3F","()",""],["suppress","ActiveRecord::Suppressor::ClassMethods","ActiveRecord/Suppressor/ClassMethods.html#method-i-suppress","(&block)",""],["suppress_composite_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-suppress_composite_primary_key","(pk)",""],["suppress_composite_primary_key","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-suppress_composite_primary_key","(pk)",""],["suppress_messages","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["surreptitiously_touch","ActiveRecord::TouchLater","ActiveRecord/TouchLater.html#method-i-surreptitiously_touch","(attrs)",""],["symbol_unscoping","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-symbol_unscoping","(scope)",""],["synchronize","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-synchronize","(&block)",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["table_comment","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_comment","(table_name)","<p>Returns the table comment that&#39;s stored in database metadata.\n"],["table_exists?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-table_exists-3F","(table_name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-table_exists-3F","(name)","<p>Returns true if table exists. If the schema is not specified as part of\n<code>name</code> then it will only find tables …\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_exists-3F","(table_name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">table_exists?</span>(:<span class=\"ruby-identifier\">developers</span>)\n</pre>\n"],["table_exists?","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D","(value)","<p>Sets the table name explicitly. Example:\n\n<pre>class Project &lt; ActiveRecord::Base\n  self.table_name = &quot;project&quot; ...</pre>\n"],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>Returns the maximum length of a table name.\n"],["table_name_prefix","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-table_name_prefix","","<p>The prefix string to prepend to every table name.\n"],["table_name_prefix=","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-table_name_prefix-3D","","<p>Sets the prefix string to prepend to every table name. So if set to\n“basecamp_”, all table …\n"],["table_name_suffix","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-table_name_suffix","","<p>The suffix string to append to every table name.\n"],["table_name_suffix=","ActiveRecord::ModelSchema","ActiveRecord/ModelSchema.html#method-c-table_name_suffix-3D","","<p>Works like <code>table_name_prefix=</code>, but appends instead of prepends\n(set to “_basecamp” gives “projects_basecamp”, …\n"],["table_options","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_options","(table_name)",""],["table_rows","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-table_rows","()","<p>Returns a hash of rows to be inserted. The key is the table, the value is a\nlist of rows to insert to …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_structure","(table_name)",""],["table_structure_with_collation","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_structure_with_collation","(table_name, basic_structure)",""],["tables","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path.\n"],["tables","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-tables","(name)",""],["tables","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-tables","(name = nil)","<p>Returns an array of table names defined in the database.\n"],["tables_in_string","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-tables_in_string","(string)",""],["take","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-take","(n = nil)","<p>Gives a record (or N records if a parameter is supplied) from the\ncollection using the same rules as …\n"],["take","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-take","(limit = nil)","<p>Gives a record (or N records if a parameter is supplied) without any\nimplied order. The order will depend …\n"],["take!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-take-21","()","<p>Same as #take but raises ActiveRecord::RecordNotFound if no record is\nfound. Note that #take! accepts …\n"],["target","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-target","()",""],["teardown_fixtures","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["thaw","ActiveRecord::Core","ActiveRecord/Core.html#method-i-thaw","()",""],["third","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-third","(*args)","<p>Same as #first except returns only the third record.\n"],["third","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-third","()","<p>Find the third record. If no order is defined it will order by primary key.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">third</span> <span class=\"ruby-comment\"># returns the ...</span>\n</pre>\n"],["third!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-third-21","()","<p>Same as #third but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],["third_to_last","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-third_to_last","(*args)","<p>Same as #first except returns only the third-to-last record.\n"],["third_to_last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-third_to_last","()","<p>Find the third-to-last record. If no order is defined it will order by\nprimary key.\n\n<pre>Person.third_to_last ...</pre>\n"],["third_to_last!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-third_to_last-21","()","<p>Same as #third_to_last but raises ActiveRecord::RecordNotFound if no record\nis found.\n"],["timestamp_attributes_for_create","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_create","()",""],["timestamp_attributes_for_create_in_model","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_create_in_model","()",""],["timestamp_attributes_for_update","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_update","()",""],["timestamp_attributes_for_update_in_model","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_update_in_model","()",""],["timestamp_column_names","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-timestamp_column_names","()",""],["timestamps","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","(options = {})","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">timestamps</span>(<span class=\"ruby-identifier\">null</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">false</span>)\n</pre>\n<p>See connection.add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table. See connection.add_timestamps\n\n<pre>t.timestamps ...</pre>\n"],["tinyblob","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-tinyblob","(*args, **options)",""],["tinytext","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-tinytext","(*args, **options)",""],["to_a","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-to_a","()",""],["to_a","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-to_a","()","<p>Converts relation objects to Array.\n"],["to_ary","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-to_ary","()","<p>Returns a new array of objects from the collection. If the collection\nhasn&#39;t been loaded, it fetches …\n"],["to_ary","ActiveRecord::Result","ActiveRecord/Result.html#method-i-to_ary","()",""],["to_hash","ActiveRecord::Result","ActiveRecord/Result.html#method-i-to_hash","()",""],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record&#39;s primary key value wrapped in an array if one is\navailable.\n"],["to_param","ActiveRecord::Integration","ActiveRecord/Integration.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing a URL to this\nobject. The default implementation …\n"],["to_param","ActiveRecord::Integration::ClassMethods","ActiveRecord/Integration/ClassMethods.html#method-i-to_param","(method_name = nil)","<p>Defines your model&#39;s <code>to_param</code> method to generate “pretty”\nURLs using <code>method_name</code>, which …\n"],["to_s","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-to_s","()",""],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel, binds = [])","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-to_sql","()","<p>Returns sql statement for the relation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">name</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-string\">&#39;Oscar&#39;</span>).<span class=\"ruby-identifier\">to_sql</span>\n<span class=\"ruby-comment\"># =&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ...</span>\n</pre>\n"],["toggle","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around #toggle that saves the record. This method differs from its\nnon-bang version in the sense …\n"],["touch","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-touch","(*names, time: nil)","<p>Saves the record with the updated_at/on attributes set to the current time\nor the time specified. Please …\n"],["touch_deferred_attributes","ActiveRecord::TouchLater","ActiveRecord/TouchLater.html#method-i-touch_deferred_attributes","()",""],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(requires_new: nil, isolation: nil, joinable: true)","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See the ConnectionAdapters::DatabaseStatements#transaction API docs.\n"],["transaction_isolation_levels","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_isolation_levels","()",""],["transaction_open?","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_open-3F","()",""],["transaction_state","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_state","()",""],["translate_exception","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception_class","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception_class","(e, sql)",""],["truncate","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-truncate","(table_name, name = nil)",""],["truncate","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-truncate","(table_name, name = nil)","<p>Executes the truncate statement.\n"],["truncate","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-truncate","(table_name, name = nil)",""],["try_to_checkout_new_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-try_to_checkout_new_connection","()","<p>If the pool is not at a +@size+ limit, establish new connection. Connecting\nto the DB is done outside …\n"],["tsrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tsrange","(*args, **options)",""],["tstzrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tstzrange","(*args, **options)",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tsvector","(*args, **options)",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value, column = nil)","<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],["type_cast_attribute_value","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-type_cast_attribute_value","(multiparameter_name, value)",""],["type_cast_calculated_value","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-type_cast_calculated_value","(value, type, operation = nil)",""],["type_cast_config_to_boolean","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_boolean","(config)",""],["type_cast_config_to_integer","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_integer","(config)",""],["type_condition","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-type_condition","(table = arel_table)",""],["type_for","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-type_for","(field, &block)",""],["type_for_attribute","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-type_for_attribute","(attr_name, &block)","<p>Returns the type of the attribute with the given name, after applying all\nmodifiers. This method is the …\n"],["type_to_sql","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil, unsigned = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil, array = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["typecasted_attribute_value","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-typecasted_attribute_value","(name)",""],["types_which_need_no_typecasting","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-types_which_need_no_typecasting","()",""],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],["undecorated_table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-undecorated_table_name","(class_name = base_class.name)","<p>Guesses the table name, but does not decorate it with prefix and suffix\ninformation.\n"],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["uniq","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-uniq","()",""],["uniq","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-uniq","(value = true)",""],["uniq_value","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-uniq_value","()","<p>#uniq and #uniq! are silently deprecated. #uniq_value delegates to\n#distinct_value to maintain backwards …\n"],["unprepared_statement","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_statement","()",""],["unquoted_false","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-unquoted_false","()",""],["unquoted_true","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-unquoted_true","()",""],["unscope","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-unscope","(*args)","<p>Removes an unwanted relation that is already defined on a chain of\nrelations. This is useful when passing …\n"],["unscoped","ActiveRecord::Scoping::Default::ClassMethods","ActiveRecord/Scoping/Default/ClassMethods.html#method-i-unscoped","()","<p>Returns a scope for the model without the previously set scopes.\n\n<pre>class Post &lt; ActiveRecord::Base\n  def ...</pre>\n"],["unsigned_bigint","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_bigint","(*args, **options)",""],["unsigned_decimal","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_decimal","(*args, **options)",""],["unsigned_float","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_float","(*args, **options)",""],["unsigned_integer","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_integer","(*args, **options)",""],["up","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-up","()",""],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update","(attributes)","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-update","(id = :all, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update-21","(attributes)","<p>Updates its receiver just like #update but calls #save! instead of\n<code>save</code>, so an exception is raised if …\n"],["update_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-update_all","(updates)","<p>Updates all records in the current relation with details given. This method\nconstructs a single SQL  …\n"],["update_attribute","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attributes","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attributes","(attributes)",""],["update_attributes!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes)",""],["update_column","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Equivalent to <code>update_columns(name =&gt; value)</code>.\n"],["update_columns","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_columns","(attributes)","<p>Updates the attributes directly in the database issuing an UPDATE SQL\nstatement and sets them in the …\n"],["update_counters","ActiveRecord::CounterCache::ClassMethods","ActiveRecord/CounterCache/ClassMethods.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby #increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(arel, name = nil, binds = [])",""],["use_insert_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-use_insert_returning-3F","()",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)",""],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["using_limitable_reflections?","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-using_limitable_reflections-3F","(reflections)",""],["using_single_table_inheritance?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-using_single_table_inheritance-3F","(record)",""],["uuid","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-uuid","(*args, **options)",""],["valid?","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-valid-3F","()",""],["valid?","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, <code>false</code> otherwise. …\n"],["valid_alter_table_type?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-valid_alter_table_type-3F","(type)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_scope_name?","ActiveRecord::Scoping::Named::ClassMethods","ActiveRecord/Scoping/Named/ClassMethods.html#method-i-valid_scope_name-3F","(name)",""],["valid_type?","ActiveRecord::ConnectionAdapters","ActiveRecord/ConnectionAdapters.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-valid_type-3F","(type)",""],["validate","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-validate","(context = nil)",""],["validate_collection_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-validate_collection_association","(reflection)","<p>Validate the associated records if <code>:validate</code> or\n<code>:autosave</code> is turned on for the association specified …\n"],["validate_order_args","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-validate_order_args","(args)",""],["validate_single_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-validate_single_association","(reflection)","<p>Validate the association if <code>:validate</code> or\n<code>:autosave</code> is turned on for the association.\n"],["validates_absence_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_absence_of","(*attr_names)","<p>Validates that the specified attributes are not present (as defined by\nObject#present?). If the attribute …\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid. Works\nwith any kind of association. …\n"],["validates_length_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attributes match the length restrictions\nsupplied. If the attribute is an …\n"],["validates_presence_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?), and, if the attribute …\n"],["validates_size_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["values","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-values","()",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["verify_readonly_attribute","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-verify_readonly_attribute","(name)",""],["version","ActiveRecord","ActiveRecord.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveRecord as a\n<code>Gem::Version</code>\n"],["view_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-view_exists-3F","(view_name)","<p>Checks to see if the view <code>view_name</code> exists on the database.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">view_exists?</span>(:<span class=\"ruby-identifier\">ebooks</span>)\n</pre>\n"],["views","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-views","()","<p>Returns an array of view names defined in the database.\n"],["visit_AddColumnDefinition","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-visit_AddColumnDefinition","(o)",""],["visit_Arel_Nodes_In","ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor","ActiveRecord/ConnectionAdapters/DetermineIfPreparableVisitor.html#method-i-visit_Arel_Nodes_In","(*)",""],["visit_Arel_Nodes_SqlLiteral","ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor","ActiveRecord/ConnectionAdapters/DetermineIfPreparableVisitor.html#method-i-visit_Arel_Nodes_SqlLiteral","(*)",""],["visit_ChangeColumnDefinition","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-visit_ChangeColumnDefinition","(o)",""],["visit_ColumnDefinition","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-visit_ColumnDefinition","(o)",""],["visit_ColumnDefinition","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation","ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaCreation.html#method-i-visit_ColumnDefinition","(o)",""],["visit_DropForeignKey","ActiveRecord::ConnectionAdapters::MySQL::SchemaCreation","ActiveRecord/ConnectionAdapters/MySQL/SchemaCreation.html#method-i-visit_DropForeignKey","(name)",""],["wait_poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-wait_poll","(timeout)","<p>Waits on the queue up to <code>timeout</code> seconds, then removes and\nreturns the head of the queue.\n"],["warn_if_deprecated_type","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-warn_if_deprecated_type","(column)",""],["where","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-where","(opts = :chain, *rest)","<p>Returns a new relation, which is the result of filtering the current\nrelation according to the conditions …\n"],["where_clause_factory","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-where_clause_factory","()",""],["where_values_hash","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-where_values_hash","(relation_table_name = table_name)","<p>Returns a hash of where conditions.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">name</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-string\">&#39;Oscar&#39;</span>).<span class=\"ruby-identifier\">where_values_hash</span>\n<span class=\"ruby-comment\"># =&gt; {name: &quot;Oscar&quot;}</span>\n</pre>\n"],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection obtained through #connection or #with_connection methods\nalready exists yield it to the …\n"],["with_exclusively_acquired_all_connections","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_exclusively_acquired_all_connections","(raise_on_acquisition_timeout = true)","<p>Take control of all existing connections so a “group” action such as\nreload/disconnect can …\n"],["with_lock","ActiveRecord::Locking::Pessimistic","ActiveRecord/Locking/Pessimistic.html#method-i-with_lock","(lock = true)","<p>Wraps the passed block in a transaction, locking the object before\nyielding. You can pass the SQL locking …\n"],["with_new_connections_blocked","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_new_connections_blocked","()",""],["without_prepared_statement?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-without_prepared_statement-3F","(binds)",""],["write","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write_attribute","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for Integer and …\n"],["write_attribute_with_type_cast","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute_with_type_cast","(attr_name, value, should_type_cast)",""],["write_store_attribute","ActiveRecord::Store","ActiveRecord/Store.html#method-i-write_store_attribute","(store_attribute, key, value)",""],["writer_method","ActiveRecord::Aggregations::ClassMethods","ActiveRecord/Aggregations/ClassMethods.html#method-i-writer_method","(name, class_name, mapping, allow_nil, converter)",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-xml","(*args, **options)",""],["yaml_file_path","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-yaml_file_path","(path)",""],["README","","README_rdoc.html","","<p>Active Record – Object-relational mapping in Rails\n<p>Active Record connects classes to relational database …\n"],["databases.rake","","lib/active_record/railties/databases_rake.html","","<p>require &#39;active_record&#39;\n<p>db_namespace = namespace :db do\n\n<pre>desc &quot;Set the environment value for the ...</pre>\n"]]}}