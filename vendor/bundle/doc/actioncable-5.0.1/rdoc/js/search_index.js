var search_data = {"index":{"searchIndex":["actioncable","channel","base","broadcasting","callbacks","naming","periodictimers","classmethods","streams","connection","authorization","unauthorizederror","base","clientsocket","fayeclientsocket","fayeeventloop","emtimer","identification","internalchannel","messagebuffer","stream","streameventloop","subscriptions","taggedloggerproxy","websocket","engine","activesupport","helpers","actioncablehelper","remoteconnections","remoteconnection","invalididentifierserror","server","base","broadcasting","broadcaster","configuration","connections","worker","activerecordconnectionmanagement","activerecord","subscriptionadapter","async","asyncsubscribermap","base","eventedredis","em","inline","postgresql","listener","redis","listener","subscribermap","version","applicationcable","channel","connection","rails","generators","channelgenerator","action_cable_meta_tag()","action_methods()","action_signature()","active_periodic_timers()","add_channel()","add_channel()","add_channel()","add_subscriber()","add_subscriber()","add_tags()","after_subscribe()","after_unsubscribe()","alive?()","alive?()","allow_request_origin?()","attach()","beat()","before_subscribe()","before_unsubscribe()","broadcast()","broadcast()","broadcast()","broadcast()","broadcast_to()","broadcaster_for()","call()","channel_name()","clear_action_methods!()","client_socket_class()","close()","close()","close()","connect()","connection_gid()","connection_identifier()","connection_identifiers()","cookies()","create_channel_file()","decode()","default_stream_handler()","defer_subscription_confirmation!()","defer_subscription_confirmation?()","delegate_connection_identifiers()","detach()","disconnect()","disconnect()","dispatch_action()","encode()","ensure_confirmation_sent()","ensure_listener_running()","ensure_reactor_running()","event_loop()","event_loop_class()","extract_action()","file_name()","finished_request_message()","gem_version()","generate_application_cable_files()","handle_close()","handle_open()","identified_by()","identifiers()","identity_handler()","internal_channel()","invalid_request_message()","invoke_callback()","invoke_callback()","invoke_callback()","invoke_callback()","listen()","listen()","log()","logger()","method_added()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_tagged_logger()","perform_action()","periodically()","possible?()","post()","post()","process_internal_message()","processable_action?()","protocol()","protocol()","pubsub()","pubsub_adapter()","rack_response()","rack_response()","reject()","reject_subscription()","reject_unauthorized_connection()","remote_connections()","remove_channel()","remove_channel()","remove_channel()","remove_subscriber()","request()","respond_to_invalid_request()","respond_to_successful_request()","restart()","run()","send_async()","send_command()","send_welcome_message()","set_identifier_instance_vars()","shutdown()","shutdown()","shutdown()","shutdown()","spawn()","start_periodic_timer()","start_periodic_timers()","started_request_message()","statistics()","stop()","stop_all_streams()","stop_periodic_timers()","stream_decoder()","stream_for()","stream_from()","stream_handler()","stream_transmitter()","streams()","subscribe()","subscribe_to_channel()","subscribe_to_internal_channel()","subscribed()","subscription_confirmation_sent?()","subscription_rejected?()","successful_request_message()","tag()","timer()","timer()","transmit()","transmit()","transmit()","transmit_subscription_confirmation()","transmit_subscription_rejection()","unsubscribe()","unsubscribe_from_internal_channel()","unsubscribed()","valid_identifiers?()","version()","wakeup()","when_connected()","where()","with_database_connections()","worker_pool()","worker_pool_stream_handler()","writes_pending()","action_cable.js","usage","cable.js","channel.coffee","channel.js"],"longSearchIndex":["actioncable","actioncable::channel","actioncable::channel::base","actioncable::channel::broadcasting","actioncable::channel::callbacks","actioncable::channel::naming","actioncable::channel::periodictimers","actioncable::channel::periodictimers::classmethods","actioncable::channel::streams","actioncable::connection","actioncable::connection::authorization","actioncable::connection::authorization::unauthorizederror","actioncable::connection::base","actioncable::connection::clientsocket","actioncable::connection::fayeclientsocket","actioncable::connection::fayeeventloop","actioncable::connection::fayeeventloop::emtimer","actioncable::connection::identification","actioncable::connection::internalchannel","actioncable::connection::messagebuffer","actioncable::connection::stream","actioncable::connection::streameventloop","actioncable::connection::subscriptions","actioncable::connection::taggedloggerproxy","actioncable::connection::websocket","actioncable::engine","actioncable::engine::activesupport","actioncable::helpers","actioncable::helpers::actioncablehelper","actioncable::remoteconnections","actioncable::remoteconnections::remoteconnection","actioncable::remoteconnections::remoteconnection::invalididentifierserror","actioncable::server","actioncable::server::base","actioncable::server::broadcasting","actioncable::server::broadcasting::broadcaster","actioncable::server::configuration","actioncable::server::connections","actioncable::server::worker","actioncable::server::worker::activerecordconnectionmanagement","actioncable::server::worker::activerecordconnectionmanagement::activerecord","actioncable::subscriptionadapter","actioncable::subscriptionadapter::async","actioncable::subscriptionadapter::async::asyncsubscribermap","actioncable::subscriptionadapter::base","actioncable::subscriptionadapter::eventedredis","actioncable::subscriptionadapter::eventedredis::em","actioncable::subscriptionadapter::inline","actioncable::subscriptionadapter::postgresql","actioncable::subscriptionadapter::postgresql::listener","actioncable::subscriptionadapter::redis","actioncable::subscriptionadapter::redis::listener","actioncable::subscriptionadapter::subscribermap","actioncable::version","applicationcable","applicationcable::channel","applicationcable::connection","rails","rails::generators","rails::generators::channelgenerator","actioncable::helpers::actioncablehelper#action_cable_meta_tag()","actioncable::channel::base::action_methods()","actioncable::channel::base#action_signature()","actioncable::channel::periodictimers#active_periodic_timers()","actioncable::subscriptionadapter::postgresql::listener#add_channel()","actioncable::subscriptionadapter::redis::listener#add_channel()","actioncable::subscriptionadapter::subscribermap#add_channel()","actioncable::subscriptionadapter::async::asyncsubscribermap#add_subscriber()","actioncable::subscriptionadapter::subscribermap#add_subscriber()","actioncable::connection::taggedloggerproxy#add_tags()","actioncable::channel::callbacks#after_subscribe()","actioncable::channel::callbacks#after_unsubscribe()","actioncable::connection::fayeclientsocket#alive?()","actioncable::connection::websocket#alive?()","actioncable::connection::base#allow_request_origin?()","actioncable::connection::streameventloop#attach()","actioncable::connection::base#beat()","actioncable::channel::callbacks#before_subscribe()","actioncable::channel::callbacks#before_unsubscribe()","actioncable::server::broadcasting#broadcast()","actioncable::server::broadcasting::broadcaster#broadcast()","actioncable::subscriptionadapter::base#broadcast()","actioncable::subscriptionadapter::subscribermap#broadcast()","actioncable::channel::broadcasting#broadcast_to()","actioncable::server::broadcasting#broadcaster_for()","actioncable::server::base#call()","actioncable::channel::naming#channel_name()","actioncable::channel::base::clear_action_methods!()","actioncable::server::configuration#client_socket_class()","actioncable::connection::base#close()","actioncable::connection::fayeclientsocket#close()","actioncable::connection::websocket#close()","actioncable::connection::fayeclientsocket#connect()","actioncable::connection::identification#connection_gid()","actioncable::connection::identification#connection_identifier()","actioncable::server::base#connection_identifiers()","actioncable::connection::base#cookies()","rails::generators::channelgenerator#create_channel_file()","actioncable::connection::base#decode()","actioncable::channel::streams#default_stream_handler()","actioncable::channel::base#defer_subscription_confirmation!()","actioncable::channel::base#defer_subscription_confirmation?()","actioncable::channel::base#delegate_connection_identifiers()","actioncable::connection::streameventloop#detach()","actioncable::remoteconnections::remoteconnection#disconnect()","actioncable::server::base#disconnect()","actioncable::channel::base#dispatch_action()","actioncable::connection::base#encode()","actioncable::channel::base#ensure_confirmation_sent()","actioncable::subscriptionadapter::redis::listener#ensure_listener_running()","actioncable::connection::fayeeventloop#ensure_reactor_running()","actioncable::server::base#event_loop()","actioncable::server::configuration#event_loop_class()","actioncable::channel::base#extract_action()","rails::generators::channelgenerator#file_name()","actioncable::connection::base#finished_request_message()","actioncable::gem_version()","rails::generators::channelgenerator#generate_application_cable_files()","actioncable::connection::base#handle_close()","actioncable::connection::base#handle_open()","actioncable::connection::identification#identified_by()","actioncable::remoteconnections::remoteconnection#identifiers()","actioncable::channel::streams#identity_handler()","actioncable::connection::internalchannel#internal_channel()","actioncable::connection::base#invalid_request_message()","actioncable::subscriptionadapter::async::asyncsubscribermap#invoke_callback()","actioncable::subscriptionadapter::postgresql::listener#invoke_callback()","actioncable::subscriptionadapter::redis::listener#invoke_callback()","actioncable::subscriptionadapter::subscribermap#invoke_callback()","actioncable::subscriptionadapter::postgresql::listener#listen()","actioncable::subscriptionadapter::redis::listener#listen()","actioncable::connection::taggedloggerproxy#log()","actioncable::server::base::logger()","actioncable::channel::base::method_added()","actioncable::channel::base::new()","actioncable::connection::base::new()","actioncable::connection::fayeclientsocket::new()","actioncable::connection::fayeeventloop::emtimer::new()","actioncable::connection::streameventloop::new()","actioncable::connection::taggedloggerproxy::new()","actioncable::connection::websocket::new()","actioncable::remoteconnections::new()","actioncable::remoteconnections::remoteconnection::new()","actioncable::server::base::new()","actioncable::server::broadcasting::broadcaster::new()","actioncable::server::configuration::new()","actioncable::subscriptionadapter::async::asyncsubscribermap::new()","actioncable::subscriptionadapter::base::new()","actioncable::subscriptionadapter::postgresql::listener::new()","actioncable::subscriptionadapter::redis::listener::new()","actioncable::subscriptionadapter::subscribermap::new()","actioncable::connection::base#new_tagged_logger()","actioncable::channel::base#perform_action()","actioncable::channel::periodictimers::classmethods#periodically()","actioncable::connection::websocket#possible?()","actioncable::connection::fayeeventloop#post()","actioncable::connection::streameventloop#post()","actioncable::connection::internalchannel#process_internal_message()","actioncable::channel::base#processable_action?()","actioncable::connection::fayeclientsocket#protocol()","actioncable::connection::websocket#protocol()","actioncable::server::base#pubsub()","actioncable::server::configuration#pubsub_adapter()","actioncable::connection::fayeclientsocket#rack_response()","actioncable::connection::websocket#rack_response()","actioncable::channel::base#reject()","actioncable::channel::base#reject_subscription()","actioncable::connection::authorization#reject_unauthorized_connection()","actioncable::server::base#remote_connections()","actioncable::subscriptionadapter::postgresql::listener#remove_channel()","actioncable::subscriptionadapter::redis::listener#remove_channel()","actioncable::subscriptionadapter::subscribermap#remove_channel()","actioncable::subscriptionadapter::subscribermap#remove_subscriber()","actioncable::connection::base#request()","actioncable::connection::base#respond_to_invalid_request()","actioncable::connection::base#respond_to_successful_request()","actioncable::server::base#restart()","actioncable::connection::streameventloop#run()","actioncable::connection::base#send_async()","actioncable::subscriptionadapter::redis::listener#send_command()","actioncable::connection::base#send_welcome_message()","actioncable::remoteconnections::remoteconnection#set_identifier_instance_vars()","actioncable::connection::fayeeventloop::emtimer#shutdown()","actioncable::subscriptionadapter::base#shutdown()","actioncable::subscriptionadapter::postgresql::listener#shutdown()","actioncable::subscriptionadapter::redis::listener#shutdown()","actioncable::connection::streameventloop#spawn()","actioncable::channel::periodictimers#start_periodic_timer()","actioncable::channel::periodictimers#start_periodic_timers()","actioncable::connection::base#started_request_message()","actioncable::connection::base#statistics()","actioncable::connection::streameventloop#stop()","actioncable::channel::streams#stop_all_streams()","actioncable::channel::periodictimers#stop_periodic_timers()","actioncable::channel::streams#stream_decoder()","actioncable::channel::streams#stream_for()","actioncable::channel::streams#stream_from()","actioncable::channel::streams#stream_handler()","actioncable::channel::streams#stream_transmitter()","actioncable::channel::streams#streams()","actioncable::subscriptionadapter::base#subscribe()","actioncable::channel::base#subscribe_to_channel()","actioncable::connection::internalchannel#subscribe_to_internal_channel()","actioncable::channel::base#subscribed()","actioncable::channel::base#subscription_confirmation_sent?()","actioncable::channel::base#subscription_rejected?()","actioncable::connection::base#successful_request_message()","actioncable::connection::taggedloggerproxy#tag()","actioncable::connection::fayeeventloop#timer()","actioncable::connection::streameventloop#timer()","actioncable::channel::base#transmit()","actioncable::connection::fayeclientsocket#transmit()","actioncable::connection::websocket#transmit()","actioncable::channel::base#transmit_subscription_confirmation()","actioncable::channel::base#transmit_subscription_rejection()","actioncable::subscriptionadapter::base#unsubscribe()","actioncable::connection::internalchannel#unsubscribe_from_internal_channel()","actioncable::channel::base#unsubscribed()","actioncable::remoteconnections::remoteconnection#valid_identifiers?()","actioncable::version()","actioncable::connection::streameventloop#wakeup()","actioncable::subscriptionadapter::redis::listener#when_connected()","actioncable::remoteconnections#where()","actioncable::server::worker::activerecordconnectionmanagement#with_database_connections()","actioncable::server::base#worker_pool()","actioncable::channel::streams#worker_pool_stream_handler()","actioncable::connection::streameventloop#writes_pending()","","","","",""],"info":[["ActionCable","","ActionCable.html","",""],["ActionCable::Channel","","ActionCable/Channel.html","",""],["ActionCable::Channel::Base","","ActionCable/Channel/Base.html","","<p>The channel provides the basic structure of grouping behavior into logical\nunits when communicating over …\n"],["ActionCable::Channel::Broadcasting","","ActionCable/Channel/Broadcasting.html","",""],["ActionCable::Channel::Callbacks","","ActionCable/Channel/Callbacks.html","",""],["ActionCable::Channel::Naming","","ActionCable/Channel/Naming.html","",""],["ActionCable::Channel::PeriodicTimers","","ActionCable/Channel/PeriodicTimers.html","",""],["ActionCable::Channel::PeriodicTimers::ClassMethods","","ActionCable/Channel/PeriodicTimers/ClassMethods.html","",""],["ActionCable::Channel::Streams","","ActionCable/Channel/Streams.html","","<p>Streams allow channels to route broadcastings to the subscriber. A\nbroadcasting is, as discussed elsewhere, …\n"],["ActionCable::Connection","","ActionCable/Connection.html","",""],["ActionCable::Connection::Authorization","","ActionCable/Connection/Authorization.html","",""],["ActionCable::Connection::Authorization::UnauthorizedError","","ActionCable/Connection/Authorization/UnauthorizedError.html","",""],["ActionCable::Connection::Base","","ActionCable/Connection/Base.html","","<p>For every WebSocket the Action Cable server accepts, a Connection object\nwill be instantiated. This instance …\n"],["ActionCable::Connection::ClientSocket","","ActionCable/Connection/ClientSocket.html","",""],["ActionCable::Connection::FayeClientSocket","","ActionCable/Connection/FayeClientSocket.html","",""],["ActionCable::Connection::FayeEventLoop","","ActionCable/Connection/FayeEventLoop.html","",""],["ActionCable::Connection::FayeEventLoop::EMTimer","","ActionCable/Connection/FayeEventLoop/EMTimer.html","",""],["ActionCable::Connection::Identification","","ActionCable/Connection/Identification.html","",""],["ActionCable::Connection::InternalChannel","","ActionCable/Connection/InternalChannel.html","","<p>Makes it possible for the RemoteConnection to disconnect a specific\nconnection.\n"],["ActionCable::Connection::MessageBuffer","","ActionCable/Connection/MessageBuffer.html","",""],["ActionCable::Connection::Stream","","ActionCable/Connection/Stream.html","",""],["ActionCable::Connection::StreamEventLoop","","ActionCable/Connection/StreamEventLoop.html","",""],["ActionCable::Connection::Subscriptions","","ActionCable/Connection/Subscriptions.html","",""],["ActionCable::Connection::TaggedLoggerProxy","","ActionCable/Connection/TaggedLoggerProxy.html","","<p>Allows the use of per-connection tags against the server logger. This\nwouldn&#39;t work using the traditional …\n"],["ActionCable::Connection::WebSocket","","ActionCable/Connection/WebSocket.html","","<p>Wrap the real socket to minimize the externally-presented API\n"],["ActionCable::Engine","","ActionCable/Engine.html","",""],["ActionCable::Engine::ActiveSupport","","ActionCable/Engine/ActiveSupport.html","",""],["ActionCable::Helpers","","ActionCable/Helpers.html","",""],["ActionCable::Helpers::ActionCableHelper","","ActionCable/Helpers/ActionCableHelper.html","",""],["ActionCable::RemoteConnections","","ActionCable/RemoteConnections.html","","<p>If you need to disconnect a given connection, you can go through the\nRemoteConnections. You can find …\n"],["ActionCable::RemoteConnections::RemoteConnection","","ActionCable/RemoteConnections/RemoteConnection.html","","<p>Represents a single remote connection found via\n<code>ActionCable.server.remote_connections.where(*)</code>. Exists …\n"],["ActionCable::RemoteConnections::RemoteConnection::InvalidIdentifiersError","","ActionCable/RemoteConnections/RemoteConnection/InvalidIdentifiersError.html","",""],["ActionCable::Server","","ActionCable/Server.html","",""],["ActionCable::Server::Base","","ActionCable/Server/Base.html","","<p>A singleton ActionCable::Server instance is available via\nActionCable.server. It&#39;s used by the Rack …\n"],["ActionCable::Server::Broadcasting","","ActionCable/Server/Broadcasting.html","","<p>Broadcasting is how other parts of your application can send messages to a\nchannel&#39;s subscribers. …\n"],["ActionCable::Server::Broadcasting::Broadcaster","","ActionCable/Server/Broadcasting/Broadcaster.html","",""],["ActionCable::Server::Configuration","","ActionCable/Server/Configuration.html","","<p>An instance of this configuration object is available via\nActionCable.server.config, which allows you …\n"],["ActionCable::Server::Connections","","ActionCable/Server/Connections.html","",""],["ActionCable::Server::Worker","","ActionCable/Server/Worker.html","",""],["ActionCable::Server::Worker::ActiveRecordConnectionManagement","","ActionCable/Server/Worker/ActiveRecordConnectionManagement.html","",""],["ActionCable::Server::Worker::ActiveRecordConnectionManagement::ActiveRecord","","ActionCable/Server/Worker/ActiveRecordConnectionManagement/ActiveRecord.html","",""],["ActionCable::SubscriptionAdapter","","ActionCable/SubscriptionAdapter.html","",""],["ActionCable::SubscriptionAdapter::Async","","ActionCable/SubscriptionAdapter/Async.html","",""],["ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap","","ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html","",""],["ActionCable::SubscriptionAdapter::Base","","ActionCable/SubscriptionAdapter/Base.html","",""],["ActionCable::SubscriptionAdapter::EventedRedis","","ActionCable/SubscriptionAdapter/EventedRedis.html","",""],["ActionCable::SubscriptionAdapter::EventedRedis::EM","","ActionCable/SubscriptionAdapter/EventedRedis/EM.html","",""],["ActionCable::SubscriptionAdapter::Inline","","ActionCable/SubscriptionAdapter/Inline.html","",""],["ActionCable::SubscriptionAdapter::PostgreSQL","","ActionCable/SubscriptionAdapter/PostgreSQL.html","",""],["ActionCable::SubscriptionAdapter::PostgreSQL::Listener","","ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html","",""],["ActionCable::SubscriptionAdapter::Redis","","ActionCable/SubscriptionAdapter/Redis.html","",""],["ActionCable::SubscriptionAdapter::Redis::Listener","","ActionCable/SubscriptionAdapter/Redis/Listener.html","",""],["ActionCable::SubscriptionAdapter::SubscriberMap","","ActionCable/SubscriptionAdapter/SubscriberMap.html","",""],["ActionCable::VERSION","","ActionCable/VERSION.html","",""],["ApplicationCable","","ApplicationCable.html","",""],["ApplicationCable::Channel","","ApplicationCable/Channel.html","",""],["ApplicationCable::Connection","","ApplicationCable/Connection.html","",""],["Rails","","Rails.html","",""],["Rails::Generators","","Rails/Generators.html","",""],["Rails::Generators::ChannelGenerator","","Rails/Generators/ChannelGenerator.html","",""],["action_cable_meta_tag","ActionCable::Helpers::ActionCableHelper","ActionCable/Helpers/ActionCableHelper.html#method-i-action_cable_meta_tag","()","<p>Returns an “action-cable-url” meta tag with the value of the URL specified\nin your configuration. …\n"],["action_methods","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-c-action_methods","()","<p>A list of method names that should be considered actions. This includes all\npublic instance methods on …\n"],["action_signature","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-action_signature","(action, data)",""],["active_periodic_timers","ActionCable::Channel::PeriodicTimers","ActionCable/Channel/PeriodicTimers.html#method-i-active_periodic_timers","()",""],["add_channel","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-add_channel","(channel, on_success)",""],["add_channel","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-add_channel","(channel, on_success)",""],["add_channel","ActionCable::SubscriptionAdapter::SubscriberMap","ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-add_channel","(channel, on_success)",""],["add_subscriber","ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap","ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-i-add_subscriber","(*)",""],["add_subscriber","ActionCable::SubscriptionAdapter::SubscriberMap","ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-add_subscriber","(channel, subscriber, on_success)",""],["add_tags","ActionCable::Connection::TaggedLoggerProxy","ActionCable/Connection/TaggedLoggerProxy.html#method-i-add_tags","(*tags)",""],["after_subscribe","ActionCable::Channel::Callbacks","ActionCable/Channel/Callbacks.html#method-i-after_subscribe","(*methods, &block)",""],["after_unsubscribe","ActionCable::Channel::Callbacks","ActionCable/Channel/Callbacks.html#method-i-after_unsubscribe","(*methods, &block)",""],["alive?","ActionCable::Connection::FayeClientSocket","ActionCable/Connection/FayeClientSocket.html#method-i-alive-3F","()",""],["alive?","ActionCable::Connection::WebSocket","ActionCable/Connection/WebSocket.html#method-i-alive-3F","()",""],["allow_request_origin?","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-allow_request_origin-3F","()",""],["attach","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-attach","(io, stream)",""],["beat","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-beat","()",""],["before_subscribe","ActionCable::Channel::Callbacks","ActionCable/Channel/Callbacks.html#method-i-before_subscribe","(*methods, &block)",""],["before_unsubscribe","ActionCable::Channel::Callbacks","ActionCable/Channel/Callbacks.html#method-i-before_unsubscribe","(*methods, &block)",""],["broadcast","ActionCable::Server::Broadcasting","ActionCable/Server/Broadcasting.html#method-i-broadcast","(broadcasting, message, coder: ActiveSupport::JSON)","<p>Broadcast a hash directly to a named <code>broadcasting</code>. This will\nlater be JSON encoded.\n"],["broadcast","ActionCable::Server::Broadcasting::Broadcaster","ActionCable/Server/Broadcasting/Broadcaster.html#method-i-broadcast","(message)",""],["broadcast","ActionCable::SubscriptionAdapter::Base","ActionCable/SubscriptionAdapter/Base.html#method-i-broadcast","(channel, payload)",""],["broadcast","ActionCable::SubscriptionAdapter::SubscriberMap","ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-broadcast","(channel, message)",""],["broadcast_to","ActionCable::Channel::Broadcasting","ActionCable/Channel/Broadcasting.html#method-i-broadcast_to","(model, message)","<p>Broadcast a hash to a unique broadcasting for this <code>model</code> in\nthis channel.\n"],["broadcaster_for","ActionCable::Server::Broadcasting","ActionCable/Server/Broadcasting.html#method-i-broadcaster_for","(broadcasting, coder: ActiveSupport::JSON)","<p>Returns a broadcaster for a named <code>broadcasting</code> that can be\nreused. Useful when you have an object that …\n"],["call","ActionCable::Server::Base","ActionCable/Server/Base.html#method-i-call","(env)","<p>Called by Rack to setup the server.\n"],["channel_name","ActionCable::Channel::Naming","ActionCable/Channel/Naming.html#method-i-channel_name","()","<p>Returns the name of the channel, underscored, without the\n<code>Channel</code> ending. If the channel is in a namespace, …\n"],["clear_action_methods!","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-c-clear_action_methods-21","()","<p>action_methods are cached and there is sometimes need to refresh them.\n::clear_action_methods! allows …\n"],["client_socket_class","ActionCable::Server::Configuration","ActionCable/Server/Configuration.html#method-i-client_socket_class","()",""],["close","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-close","()","<p>Close the WebSocket connection.\n"],["close","ActionCable::Connection::FayeClientSocket","ActionCable/Connection/FayeClientSocket.html#method-i-close","()",""],["close","ActionCable::Connection::WebSocket","ActionCable/Connection/WebSocket.html#method-i-close","()",""],["connect","ActionCable::Connection::FayeClientSocket","ActionCable/Connection/FayeClientSocket.html#method-i-connect","()",""],["connection_gid","ActionCable::Connection::Identification","ActionCable/Connection/Identification.html#method-i-connection_gid","(ids)",""],["connection_identifier","ActionCable::Connection::Identification","ActionCable/Connection/Identification.html#method-i-connection_identifier","()","<p>Return a single connection identifier that combines the value of all the\nregistered identifiers into …\n"],["connection_identifiers","ActionCable::Server::Base","ActionCable/Server/Base.html#method-i-connection_identifiers","()","<p>All of the identifiers applied to the connection class associated with this\nserver.\n"],["cookies","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-cookies","()","<p>The cookies of the request that initiated the WebSocket connection. Useful\nfor performing authorization …\n"],["create_channel_file","Rails::Generators::ChannelGenerator","Rails/Generators/ChannelGenerator.html#method-i-create_channel_file","()",""],["decode","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-decode","(websocket_message)",""],["default_stream_handler","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-default_stream_handler","(broadcasting, coder:)","<p>May be overridden to change the default stream handling behavior which\ndecodes JSON and transmits to …\n"],["defer_subscription_confirmation!","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-defer_subscription_confirmation-21","()",""],["defer_subscription_confirmation?","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-defer_subscription_confirmation-3F","()",""],["delegate_connection_identifiers","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-delegate_connection_identifiers","()",""],["detach","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-detach","(io, stream)",""],["disconnect","ActionCable::RemoteConnections::RemoteConnection","ActionCable/RemoteConnections/RemoteConnection.html#method-i-disconnect","()","<p>Uses the internal channel to disconnect the connection.\n"],["disconnect","ActionCable::Server::Base","ActionCable/Server/Base.html#method-i-disconnect","(identifiers)","<p>Disconnect all the connections identified by `identifiers` on this server\nor any others via RemoteConnections …\n"],["dispatch_action","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-dispatch_action","(action, data)",""],["encode","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-encode","(cable_message)",""],["ensure_confirmation_sent","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-ensure_confirmation_sent","()",""],["ensure_listener_running","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-ensure_listener_running","()",""],["ensure_reactor_running","ActionCable::Connection::FayeEventLoop","ActionCable/Connection/FayeEventLoop.html#method-i-ensure_reactor_running","()",""],["event_loop","ActionCable::Server::Base","ActionCable/Server/Base.html#method-i-event_loop","()",""],["event_loop_class","ActionCable::Server::Configuration","ActionCable/Server/Configuration.html#method-i-event_loop_class","()",""],["extract_action","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-extract_action","(data)",""],["file_name","Rails::Generators::ChannelGenerator","Rails/Generators/ChannelGenerator.html#method-i-file_name","()",""],["finished_request_message","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-finished_request_message","()",""],["gem_version","ActionCable","ActionCable.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Action Cable as a\n<code>Gem::Version</code>.\n"],["generate_application_cable_files","Rails::Generators::ChannelGenerator","Rails/Generators/ChannelGenerator.html#method-i-generate_application_cable_files","()","<p>FIXME: Change these files to symlinks once RubyGems 2.5.0 is required.\n"],["handle_close","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-handle_close","()",""],["handle_open","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-handle_open","()",""],["identified_by","ActionCable::Connection::Identification","ActionCable/Connection/Identification.html#method-i-identified_by","(*identifiers)","<p>Mark a key as being a connection identifier index that can then be used to\nfind the specific connection …\n"],["identifiers","ActionCable::RemoteConnections::RemoteConnection","ActionCable/RemoteConnections/RemoteConnection.html#method-i-identifiers","()","<p>Returns all the identifiers that were applied to this connection.\n"],["identity_handler","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-identity_handler","()",""],["internal_channel","ActionCable::Connection::InternalChannel","ActionCable/Connection/InternalChannel.html#method-i-internal_channel","()",""],["invalid_request_message","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-invalid_request_message","()",""],["invoke_callback","ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap","ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-i-invoke_callback","(*)",""],["invoke_callback","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-invoke_callback","(*)",""],["invoke_callback","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-invoke_callback","(*)",""],["invoke_callback","ActionCable::SubscriptionAdapter::SubscriberMap","ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-invoke_callback","(callback, message)",""],["listen","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-listen","()",""],["listen","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-listen","(conn)",""],["log","ActionCable::Connection::TaggedLoggerProxy","ActionCable/Connection/TaggedLoggerProxy.html#method-i-log","(type, message)",""],["logger","ActionCable::Server::Base","ActionCable/Server/Base.html#method-c-logger","()",""],["method_added","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-c-method_added","(name)","<p>Refresh the cached action_methods when a new action_method is added.\n"],["new","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-c-new","(connection, identifier, params = {})",""],["new","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-c-new","(server, env, coder: ActiveSupport::JSON)",""],["new","ActionCable::Connection::FayeClientSocket","ActionCable/Connection/FayeClientSocket.html#method-c-new","(env, event_target, stream_event_loop, protocols)",""],["new","ActionCable::Connection::FayeEventLoop::EMTimer","ActionCable/Connection/FayeEventLoop/EMTimer.html#method-c-new","(inner)",""],["new","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-c-new","()",""],["new","ActionCable::Connection::TaggedLoggerProxy","ActionCable/Connection/TaggedLoggerProxy.html#method-c-new","(logger, tags:)",""],["new","ActionCable::Connection::WebSocket","ActionCable/Connection/WebSocket.html#method-c-new","(env, event_target, event_loop, client_socket_class, protocols: ActionCable::INTERNAL[:protocols])",""],["new","ActionCable::RemoteConnections","ActionCable/RemoteConnections.html#method-c-new","(server)",""],["new","ActionCable::RemoteConnections::RemoteConnection","ActionCable/RemoteConnections/RemoteConnection.html#method-c-new","(server, ids)",""],["new","ActionCable::Server::Base","ActionCable/Server/Base.html#method-c-new","()",""],["new","ActionCable::Server::Broadcasting::Broadcaster","ActionCable/Server/Broadcasting/Broadcaster.html#method-c-new","(server, broadcasting, coder:)",""],["new","ActionCable::Server::Configuration","ActionCable/Server/Configuration.html#method-c-new","()",""],["new","ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap","ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-c-new","(event_loop)",""],["new","ActionCable::SubscriptionAdapter::Base","ActionCable/SubscriptionAdapter/Base.html#method-c-new","(server)",""],["new","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-c-new","(adapter, event_loop)",""],["new","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-c-new","(adapter, event_loop)",""],["new","ActionCable::SubscriptionAdapter::SubscriberMap","ActionCable/SubscriptionAdapter/SubscriberMap.html#method-c-new","()",""],["new_tagged_logger","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-new_tagged_logger","()","<p>Tags are declared in the server but computed in the connection. This allows\nus per-connection tailored …\n"],["perform_action","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-perform_action","(data)","<p>Extract the action name from the passed data and process it via the\nchannel. The process will ensure …\n"],["periodically","ActionCable::Channel::PeriodicTimers::ClassMethods","ActionCable/Channel/PeriodicTimers/ClassMethods.html#method-i-periodically","(callback_or_method_name = nil, every:, &block)","<p>Periodically performs a task on the channel, like updating an online user\ncounter, polling a backend …\n"],["possible?","ActionCable::Connection::WebSocket","ActionCable/Connection/WebSocket.html#method-i-possible-3F","()",""],["post","ActionCable::Connection::FayeEventLoop","ActionCable/Connection/FayeEventLoop.html#method-i-post","(task = nil, &block)",""],["post","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-post","(task = nil, &block)",""],["process_internal_message","ActionCable::Connection::InternalChannel","ActionCable/Connection/InternalChannel.html#method-i-process_internal_message","(message)",""],["processable_action?","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-processable_action-3F","(action)",""],["protocol","ActionCable::Connection::FayeClientSocket","ActionCable/Connection/FayeClientSocket.html#method-i-protocol","()",""],["protocol","ActionCable::Connection::WebSocket","ActionCable/Connection/WebSocket.html#method-i-protocol","()",""],["pubsub","ActionCable::Server::Base","ActionCable/Server/Base.html#method-i-pubsub","()","<p>Adapter used for all streams/broadcasting.\n"],["pubsub_adapter","ActionCable::Server::Configuration","ActionCable/Server/Configuration.html#method-i-pubsub_adapter","()","<p>Returns constant of subscription adapter specified in config/cable.yml. If\nthe adapter cannot be found, …\n"],["rack_response","ActionCable::Connection::FayeClientSocket","ActionCable/Connection/FayeClientSocket.html#method-i-rack_response","()",""],["rack_response","ActionCable::Connection::WebSocket","ActionCable/Connection/WebSocket.html#method-i-rack_response","()",""],["reject","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-reject","()",""],["reject_subscription","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-reject_subscription","()",""],["reject_unauthorized_connection","ActionCable::Connection::Authorization","ActionCable/Connection/Authorization.html#method-i-reject_unauthorized_connection","()",""],["remote_connections","ActionCable::Server::Base","ActionCable/Server/Base.html#method-i-remote_connections","()","<p>Gateway to RemoteConnections. See that class for details.\n"],["remove_channel","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-remove_channel","(channel)",""],["remove_channel","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-remove_channel","(channel)",""],["remove_channel","ActionCable::SubscriptionAdapter::SubscriberMap","ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-remove_channel","(channel)",""],["remove_subscriber","ActionCable::SubscriptionAdapter::SubscriberMap","ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-remove_subscriber","(channel, subscriber)",""],["request","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-request","()","<p>The request that initiated the WebSocket connection is available here. This\ngives access to the environment, …\n"],["respond_to_invalid_request","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-respond_to_invalid_request","()",""],["respond_to_successful_request","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-respond_to_successful_request","()",""],["restart","ActionCable::Server::Base","ActionCable/Server/Base.html#method-i-restart","()",""],["run","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-run","()",""],["send_async","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-send_async","(method, *arguments)","<p>Invoke a method on the connection asynchronously through the pool of thread\nworkers.\n"],["send_command","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-send_command","(*command)",""],["send_welcome_message","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-send_welcome_message","()",""],["set_identifier_instance_vars","ActionCable::RemoteConnections::RemoteConnection","ActionCable/RemoteConnections/RemoteConnection.html#method-i-set_identifier_instance_vars","(ids)",""],["shutdown","ActionCable::Connection::FayeEventLoop::EMTimer","ActionCable/Connection/FayeEventLoop/EMTimer.html#method-i-shutdown","()",""],["shutdown","ActionCable::SubscriptionAdapter::Base","ActionCable/SubscriptionAdapter/Base.html#method-i-shutdown","()",""],["shutdown","ActionCable::SubscriptionAdapter::PostgreSQL::Listener","ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-shutdown","()",""],["shutdown","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-shutdown","()",""],["spawn","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-spawn","()",""],["start_periodic_timer","ActionCable::Channel::PeriodicTimers","ActionCable/Channel/PeriodicTimers.html#method-i-start_periodic_timer","(callback, every:)",""],["start_periodic_timers","ActionCable::Channel::PeriodicTimers","ActionCable/Channel/PeriodicTimers.html#method-i-start_periodic_timers","()",""],["started_request_message","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-started_request_message","()",""],["statistics","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-statistics","()","<p>Return a basic hash of statistics for the connection keyed with\n`identifier`, `started_at`, and `subscriptions`. …\n"],["stop","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-stop","()",""],["stop_all_streams","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-stop_all_streams","()","<p>Unsubscribes all streams associated with this channel from the pubsub\nqueue.\n"],["stop_periodic_timers","ActionCable::Channel::PeriodicTimers","ActionCable/Channel/PeriodicTimers.html#method-i-stop_periodic_timers","()",""],["stream_decoder","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-stream_decoder","(handler = identity_handler, coder:)",""],["stream_for","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-stream_for","(model, callback = nil, coder: nil, &block)","<p>Start streaming the pubsub queue for the <code>model</code> in this\nchannel. Optionally, you can pass a <code>callback</code> that&#39;ll …\n"],["stream_from","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-stream_from","(broadcasting, callback = nil, coder: nil, &block)","<p>Start streaming from the named <code>broadcasting</code> pubsub queue.\nOptionally, you can pass a <code>callback</code> that&#39;ll …\n"],["stream_handler","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-stream_handler","(broadcasting, user_handler, coder: nil)","<p>May be overridden to add instrumentation, logging, specialized error\nhandling, or other forms of handler …\n"],["stream_transmitter","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-stream_transmitter","(handler = identity_handler, broadcasting:)",""],["streams","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-streams","()",""],["subscribe","ActionCable::SubscriptionAdapter::Base","ActionCable/SubscriptionAdapter/Base.html#method-i-subscribe","(channel, message_callback, success_callback = nil)",""],["subscribe_to_channel","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-subscribe_to_channel","()","<p>This method is called after subscription has been added to the connection\nand confirms or rejects the …\n"],["subscribe_to_internal_channel","ActionCable::Connection::InternalChannel","ActionCable/Connection/InternalChannel.html#method-i-subscribe_to_internal_channel","()",""],["subscribed","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-subscribed","()","<p>Called once a consumer has become a subscriber of the channel. Usually the\nplace to setup any streams …\n"],["subscription_confirmation_sent?","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-subscription_confirmation_sent-3F","()",""],["subscription_rejected?","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-subscription_rejected-3F","()",""],["successful_request_message","ActionCable::Connection::Base","ActionCable/Connection/Base.html#method-i-successful_request_message","()",""],["tag","ActionCable::Connection::TaggedLoggerProxy","ActionCable/Connection/TaggedLoggerProxy.html#method-i-tag","(logger)",""],["timer","ActionCable::Connection::FayeEventLoop","ActionCable/Connection/FayeEventLoop.html#method-i-timer","(interval, &block)",""],["timer","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-timer","(interval, &block)",""],["transmit","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-transmit","(data, via: nil)","<p>Transmit a hash of data to the subscriber. The hash will automatically be\nwrapped in a JSON envelope …\n"],["transmit","ActionCable::Connection::FayeClientSocket","ActionCable/Connection/FayeClientSocket.html#method-i-transmit","(data)",""],["transmit","ActionCable::Connection::WebSocket","ActionCable/Connection/WebSocket.html#method-i-transmit","(data)",""],["transmit_subscription_confirmation","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-transmit_subscription_confirmation","()",""],["transmit_subscription_rejection","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-transmit_subscription_rejection","()",""],["unsubscribe","ActionCable::SubscriptionAdapter::Base","ActionCable/SubscriptionAdapter/Base.html#method-i-unsubscribe","(channel, message_callback)",""],["unsubscribe_from_internal_channel","ActionCable::Connection::InternalChannel","ActionCable/Connection/InternalChannel.html#method-i-unsubscribe_from_internal_channel","()",""],["unsubscribed","ActionCable::Channel::Base","ActionCable/Channel/Base.html#method-i-unsubscribed","()","<p>Called once a consumer has cut its cable connection. Can be used for\ncleaning up connections or marking …\n"],["valid_identifiers?","ActionCable::RemoteConnections::RemoteConnection","ActionCable/RemoteConnections/RemoteConnection.html#method-i-valid_identifiers-3F","(ids)",""],["version","ActionCable","ActionCable.html#method-c-version","()","<p>Returns the version of the currently loaded Action Cable as a\n<code>Gem::Version</code>\n"],["wakeup","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-wakeup","()",""],["when_connected","ActionCable::SubscriptionAdapter::Redis::Listener","ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-when_connected","(&block)",""],["where","ActionCable::RemoteConnections","ActionCable/RemoteConnections.html#method-i-where","(identifier)",""],["with_database_connections","ActionCable::Server::Worker::ActiveRecordConnectionManagement","ActionCable/Server/Worker/ActiveRecordConnectionManagement.html#method-i-with_database_connections","()",""],["worker_pool","ActionCable::Server::Base","ActionCable/Server/Base.html#method-i-worker_pool","()","<p>The worker pool is where we run connection callbacks and channel actions.\nWe do as little as possible …\n"],["worker_pool_stream_handler","ActionCable::Channel::Streams","ActionCable/Channel/Streams.html#method-i-worker_pool_stream_handler","(broadcasting, user_handler, coder: nil)","<p>Always wrap the outermost handler to invoke the user handler on the worker\npool rather than blocking …\n"],["writes_pending","ActionCable::Connection::StreamEventLoop","ActionCable/Connection/StreamEventLoop.html#method-i-writes_pending","(io)",""],["action_cable.js","","lib/assets/compiled/action_cable_js.html","","<p>(function() {\n\n<pre>(function() {\n  (function() {\n    var slice = [].slice;\n\n    this.ActionCable = {\n      ...</pre>\n"],["USAGE","","lib/rails/generators/channel/USAGE.html","","<p>Description:\n<p>\n\n<pre>Stubs out a new cable channel for the server (in Ruby) and client (in CoffeeScript).\nPass ...</pre>\n"],["cable.js","","lib/rails/generators/channel/templates/assets/cable_js.html","","<p>// Action Cable provides the framework to deal with WebSockets in Rails. //\nYou can generate new channels …\n"],["channel.coffee","","lib/rails/generators/channel/templates/assets/channel_coffee.html","","<p>App.&lt;%= class_name.underscore %&gt; = App.cable.subscriptions.create\n“&lt;%= class_name %&gt;Channel”, …\n"],["channel.js","","lib/rails/generators/channel/templates/assets/channel_js.html","","<p>App.&lt;%= class_name.underscore %&gt; =\nApp.cable.subscriptions.create(“&lt;%= class_name %&gt;Channel”, …\n"]]}}