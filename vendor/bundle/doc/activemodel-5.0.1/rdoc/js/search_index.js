var search_data = {"index":{"searchIndex":["activemodel","attributeassignment","attributemethods","classmethods","attributemethodmatcher","blockvalidator","callbacks","conversion","classmethods","dirty","eachvalidator","errors","forbiddenattributeserror","forbiddenattributesprotection","lint","tests","missingattributeerror","model","name","naming","railtie","rangeerror","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","strictvalidationfailed","testcase","translation","type","biginteger","binary","data","boolean","date","datetime","decimal","decimalwithoutscale","float","helpers","acceptsmultiparametertime","mutable","numeric","timevalue","immutablestring","integer","registration","registry","string","text","time","unsignedinteger","value","unknownattributeerror","version","validationerror","validations","absencevalidator","acceptancevalidator","attributedefinition","lazilydefineattributes","callbacks","classmethods","classmethods","clusivity","confirmationvalidator","exclusionvalidator","formatvalidator","helpermethods","inclusionvalidator","lengthvalidator","numericalityvalidator","presencevalidator","withvalidator","validator","!~()","<=>()","==()","==()","===()","=~()","[]()","[]=()","_assign_attribute()","_assign_attributes()","_singularize()","add()","add_on_blank()","add_on_empty()","added?()","after_validation()","alias_attribute()","apply_default_array()","as_json()","as_json()","assert_boolean()","assert_valid_value()","assign_attributes()","attribute_alias()","attribute_alias?()","attribute_change()","attribute_changed_by_setter?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_missing()","attribute_previous_change()","attribute_will_change!()","attributes_changed_by_setter()","authenticate()","before_validation()","blank?()","cast()","cast_value()","changed()","changed?()","changed?()","changed_attributes()","changed_in_place?()","changes()","changes_applied()","changes_include?()","clear()","clear_attribute_changes()","clear_changes_information()","clear_validators!()","convert_to_reader_name()","count()","define_attribute_method()","define_attribute_methods()","define_model_callbacks()","define_on()","delete()","deserialize()","each()","eager_load!()","empty?()","eql?()","eql?()","errors()","from_json()","full_message()","full_messages()","full_messages_for()","gem_version()","generate_message()","get()","has_key?()","has_secure_password()","hash()","human()","human_attribute_name()","i18n_scope()","include?()","invalid?()","key?()","keys()","kind()","kind()","lookup_ancestors()","marshal_dump()","marshal_load()","matched_attribute_method()","matches?()","method_missing()","missing_attribute()","model()","model_name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize_detail()","normalize_message()","param_key()","password=()","password_confirmation=()","persisted?()","plural()","previous_changes()","previous_changes_include?()","raise_validation_error()","register()","respond_to?()","respond_to_without_attributes?()","restore_attribute!()","restore_attributes()","route_key()","serializable_hash()","serialize()","set()","set_attribute_was()","singular()","singular_route_key()","size()","test_errors_aref()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_to_partial_path()","to_a()","to_hash()","to_key()","to_model()","to_param()","to_partial_path()","to_s()","to_str()","to_xml()","uncountable?()","undefine_attribute_methods()","valid?()","validate()","validate()","validate()","validate!()","validates()","validates!()","validates_absence_of()","validates_acceptance_of()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_size_of()","validates_with()","validates_with()","validators()","validators_on()","values()","version()","without_default_proc()"],"longSearchIndex":["activemodel","activemodel::attributeassignment","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::attributemethods::classmethods::attributemethodmatcher","activemodel::blockvalidator","activemodel::callbacks","activemodel::conversion","activemodel::conversion::classmethods","activemodel::dirty","activemodel::eachvalidator","activemodel::errors","activemodel::forbiddenattributeserror","activemodel::forbiddenattributesprotection","activemodel::lint","activemodel::lint::tests","activemodel::missingattributeerror","activemodel::model","activemodel::name","activemodel::naming","activemodel::railtie","activemodel::rangeerror","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::strictvalidationfailed","activemodel::testcase","activemodel::translation","activemodel::type","activemodel::type::biginteger","activemodel::type::binary","activemodel::type::binary::data","activemodel::type::boolean","activemodel::type::date","activemodel::type::datetime","activemodel::type::decimal","activemodel::type::decimalwithoutscale","activemodel::type::float","activemodel::type::helpers","activemodel::type::helpers::acceptsmultiparametertime","activemodel::type::helpers::mutable","activemodel::type::helpers::numeric","activemodel::type::helpers::timevalue","activemodel::type::immutablestring","activemodel::type::integer","activemodel::type::registration","activemodel::type::registry","activemodel::type::string","activemodel::type::text","activemodel::type::time","activemodel::type::unsignedinteger","activemodel::type::value","activemodel::unknownattributeerror","activemodel::version","activemodel::validationerror","activemodel::validations","activemodel::validations::absencevalidator","activemodel::validations::acceptancevalidator","activemodel::validations::acceptancevalidator::attributedefinition","activemodel::validations::acceptancevalidator::lazilydefineattributes","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::clusivity","activemodel::validations::confirmationvalidator","activemodel::validations::exclusionvalidator","activemodel::validations::formatvalidator","activemodel::validations::helpermethods","activemodel::validations::inclusionvalidator","activemodel::validations::lengthvalidator","activemodel::validations::numericalityvalidator","activemodel::validations::presencevalidator","activemodel::validations::withvalidator","activemodel::validator","activemodel::name#!~()","activemodel::name#<=>()","activemodel::name#==()","activemodel::type::value#==()","activemodel::name#===()","activemodel::name#=~()","activemodel::errors#[]()","activemodel::errors#[]=()","activemodel::attributeassignment#_assign_attribute()","activemodel::attributeassignment#_assign_attributes()","activemodel::name#_singularize()","activemodel::errors#add()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","activemodel::errors#added?()","activemodel::validations::callbacks::classmethods#after_validation()","activemodel::attributemethods::classmethods#alias_attribute()","activemodel::errors#apply_default_array()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","activemodel::lint::tests#assert_boolean()","activemodel::type::value#assert_valid_value()","activemodel::attributeassignment#assign_attributes()","activemodel::attributemethods::classmethods#attribute_alias()","activemodel::attributemethods::classmethods#attribute_alias?()","activemodel::dirty#attribute_change()","activemodel::dirty#attribute_changed_by_setter?()","activemodel::validations::classmethods#attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activemodel::attributemethods#attribute_missing()","activemodel::dirty#attribute_previous_change()","activemodel::dirty#attribute_will_change!()","activemodel::dirty#attributes_changed_by_setter()","activemodel::securepassword::instancemethodsonactivation#authenticate()","activemodel::validations::callbacks::classmethods#before_validation()","activemodel::errors#blank?()","activemodel::type::value#cast()","activemodel::type::value#cast_value()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::type::value#changed?()","activemodel::dirty#changed_attributes()","activemodel::type::value#changed_in_place?()","activemodel::dirty#changes()","activemodel::dirty#changes_applied()","activemodel::dirty#changes_include?()","activemodel::errors#clear()","activemodel::dirty#clear_attribute_changes()","activemodel::dirty#clear_changes_information()","activemodel::validations::classmethods#clear_validators!()","activemodel::validations::acceptancevalidator::attributedefinition#convert_to_reader_name()","activemodel::errors#count()","activemodel::attributemethods::classmethods#define_attribute_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activemodel::callbacks#define_model_callbacks()","activemodel::validations::acceptancevalidator::attributedefinition#define_on()","activemodel::errors#delete()","activemodel::type::value#deserialize()","activemodel::errors#each()","activemodel::eager_load!()","activemodel::errors#empty?()","activemodel::name#eql?()","activemodel::type::value#eql?()","activemodel::validations#errors()","activemodel::serializers::json#from_json()","activemodel::errors#full_message()","activemodel::errors#full_messages()","activemodel::errors#full_messages_for()","activemodel::gem_version()","activemodel::errors#generate_message()","activemodel::errors#get()","activemodel::errors#has_key?()","activemodel::securepassword::classmethods#has_secure_password()","activemodel::type::value#hash()","activemodel::name#human()","activemodel::translation#human_attribute_name()","activemodel::translation#i18n_scope()","activemodel::errors#include?()","activemodel::validations#invalid?()","activemodel::errors#key?()","activemodel::errors#keys()","activemodel::validator::kind()","activemodel::validator#kind()","activemodel::translation#lookup_ancestors()","activemodel::errors#marshal_dump()","activemodel::errors#marshal_load()","activemodel::attributemethods#matched_attribute_method()","activemodel::validations::acceptancevalidator::attributedefinition#matches?()","activemodel::attributemethods#method_missing()","activemodel::attributemethods#missing_attribute()","activemodel::lint::tests#model()","activemodel::naming#model_name()","activemodel::errors::new()","activemodel::model::new()","activemodel::name::new()","activemodel::type::value::new()","activemodel::unknownattributeerror::new()","activemodel::validationerror::new()","activemodel::validations::acceptancevalidator::attributedefinition::new()","activemodel::validations::acceptancevalidator::lazilydefineattributes::new()","activemodel::validator::new()","activemodel::errors#normalize_detail()","activemodel::errors#normalize_message()","activemodel::naming::param_key()","activemodel::securepassword::instancemethodsonactivation#password=()","activemodel::securepassword::instancemethodsonactivation#password_confirmation=()","activemodel::model#persisted?()","activemodel::naming::plural()","activemodel::dirty#previous_changes()","activemodel::dirty#previous_changes_include?()","activemodel::validations#raise_validation_error()","activemodel::type::register()","activemodel::attributemethods#respond_to?()","activemodel::attributemethods#respond_to_without_attributes?()","activemodel::dirty#restore_attribute!()","activemodel::dirty#restore_attributes()","activemodel::naming::route_key()","activemodel::serialization#serializable_hash()","activemodel::type::value#serialize()","activemodel::errors#set()","activemodel::dirty#set_attribute_was()","activemodel::naming::singular()","activemodel::naming::singular_route_key()","activemodel::errors#size()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_to_partial_path()","activemodel::errors#to_a()","activemodel::errors#to_hash()","activemodel::conversion#to_key()","activemodel::conversion#to_model()","activemodel::conversion#to_param()","activemodel::conversion#to_partial_path()","activemodel::name#to_s()","activemodel::name#to_str()","activemodel::errors#to_xml()","activemodel::naming::uncountable?()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activemodel::validations#valid?()","activemodel::validations#validate()","activemodel::validations::classmethods#validate()","activemodel::validator#validate()","activemodel::validations#validate!()","activemodel::validations::classmethods#validates()","activemodel::validations::classmethods#validates!()","activemodel::validations::helpermethods#validates_absence_of()","activemodel::validations::helpermethods#validates_acceptance_of()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","activemodel::errors#values()","activemodel::version()","activemodel::errors#without_default_proc()"],"info":[["ActiveModel","","ActiveModel.html","",""],["ActiveModel::AttributeAssignment","","ActiveModel/AttributeAssignment.html","",""],["ActiveModel::AttributeMethods","","ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p>Provides a way to add prefixes and suffixes to your methods as well as …\n"],["ActiveModel::AttributeMethods::ClassMethods","","ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html","",""],["ActiveModel::BlockValidator","","ActiveModel/BlockValidator.html","",""],["ActiveModel::Callbacks","","ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","ActiveModel/Conversion.html","","<p>Active Model Conversion\n<p>Handles default conversions: to_model, to_key, to_param, and\nto_partial_path. …\n"],["ActiveModel::Conversion::ClassMethods","","ActiveModel/Conversion/ClassMethods.html","",""],["ActiveModel::Dirty","","ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::EachValidator","","ActiveModel/EachValidator.html","",""],["ActiveModel::Errors","","ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>Hash</code> that you can include in your object\nfor handling error messages …\n"],["ActiveModel::ForbiddenAttributesError","","ActiveModel/ForbiddenAttributesError.html","","<p>Raised when forbidden attributes are used for mass assignment.\n\n<pre>class Person &lt; ActiveRecord::Base\nend\n ...</pre>\n"],["ActiveModel::ForbiddenAttributesProtection","","ActiveModel/ForbiddenAttributesProtection.html","",""],["ActiveModel::Lint","","ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MissingAttributeError","","ActiveModel/MissingAttributeError.html","","<p>Raised when an attribute is not defined.\n\n<pre>class User &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nuser = ...</pre>\n"],["ActiveModel::Model","","ActiveModel/Model.html","","<p>Active Model Basic Model\n<p>Includes the required interface for an object to interact with\n<code>ActionPack</code>, using …\n"],["ActiveModel::Name","","ActiveModel/Name.html","",""],["ActiveModel::Naming","","ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::Railtie","","ActiveModel/Railtie.html","",""],["ActiveModel::RangeError","","ActiveModel/RangeError.html","","<p>Raised when attribute values are out of range.\n"],["ActiveModel::SecurePassword","","ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::InstanceMethodsOnActivation","","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your objects.\n<p>A minimal …\n"],["ActiveModel::Serializers","","ActiveModel/Serializers.html","",""],["ActiveModel::Serializers::JSON","","ActiveModel/Serializers/JSON.html","","<p>Active Model JSON Serializer\n"],["ActiveModel::StrictValidationFailed","","ActiveModel/StrictValidationFailed.html","","<p>Raised when a validation cannot be corrected by end users and are\nconsidered exceptional.\n\n<pre>class Person ...</pre>\n"],["ActiveModel::TestCase","","ActiveModel/TestCase.html","",""],["ActiveModel::Translation","","ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::Type","","ActiveModel/Type.html","",""],["ActiveModel::Type::BigInteger","","ActiveModel/Type/BigInteger.html","",""],["ActiveModel::Type::Binary","","ActiveModel/Type/Binary.html","",""],["ActiveModel::Type::Binary::Data","","ActiveModel/Type/Binary/Data.html","",""],["ActiveModel::Type::Boolean","","ActiveModel/Type/Boolean.html","",""],["ActiveModel::Type::Date","","ActiveModel/Type/Date.html","",""],["ActiveModel::Type::DateTime","","ActiveModel/Type/DateTime.html","",""],["ActiveModel::Type::Decimal","","ActiveModel/Type/Decimal.html","",""],["ActiveModel::Type::DecimalWithoutScale","","ActiveModel/Type/DecimalWithoutScale.html","",""],["ActiveModel::Type::Float","","ActiveModel/Type/Float.html","",""],["ActiveModel::Type::Helpers","","ActiveModel/Type/Helpers.html","",""],["ActiveModel::Type::Helpers::AcceptsMultiparameterTime","","ActiveModel/Type/Helpers/AcceptsMultiparameterTime.html","",""],["ActiveModel::Type::Helpers::Mutable","","ActiveModel/Type/Helpers/Mutable.html","",""],["ActiveModel::Type::Helpers::Numeric","","ActiveModel/Type/Helpers/Numeric.html","",""],["ActiveModel::Type::Helpers::TimeValue","","ActiveModel/Type/Helpers/TimeValue.html","",""],["ActiveModel::Type::ImmutableString","","ActiveModel/Type/ImmutableString.html","",""],["ActiveModel::Type::Integer","","ActiveModel/Type/Integer.html","",""],["ActiveModel::Type::Registration","","ActiveModel/Type/Registration.html","",""],["ActiveModel::Type::Registry","","ActiveModel/Type/Registry.html","",""],["ActiveModel::Type::String","","ActiveModel/Type/String.html","",""],["ActiveModel::Type::Text","","ActiveModel/Type/Text.html","",""],["ActiveModel::Type::Time","","ActiveModel/Type/Time.html","",""],["ActiveModel::Type::UnsignedInteger","","ActiveModel/Type/UnsignedInteger.html","",""],["ActiveModel::Type::Value","","ActiveModel/Type/Value.html","",""],["ActiveModel::UnknownAttributeError","","ActiveModel/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveModel::VERSION","","ActiveModel/VERSION.html","",""],["ActiveModel::ValidationError","","ActiveModel/ValidationError.html","","<p>Active Model ValidationError\n<p>Raised by <code>validate!</code> when the model is invalid. Use the\n<code>model</code> method to retrieve …\n"],["ActiveModel::Validations","","ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],["ActiveModel::Validations::AbsenceValidator","","ActiveModel/Validations/AbsenceValidator.html","",""],["ActiveModel::Validations::AcceptanceValidator","","ActiveModel/Validations/AcceptanceValidator.html","",""],["ActiveModel::Validations::AcceptanceValidator::AttributeDefinition","","ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html","",""],["ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes","","ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html","",""],["ActiveModel::Validations::Callbacks","","ActiveModel/Validations/Callbacks.html","","<p>Active Model Validation Callbacks\n<p>Provides an interface for any class to have <code>before_validation</code>\nand <code>after_validation</code> …\n"],["ActiveModel::Validations::Callbacks::ClassMethods","","ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::Clusivity","","ActiveModel/Validations/Clusivity.html","",""],["ActiveModel::Validations::ConfirmationValidator","","ActiveModel/Validations/ConfirmationValidator.html","",""],["ActiveModel::Validations::ExclusionValidator","","ActiveModel/Validations/ExclusionValidator.html","",""],["ActiveModel::Validations::FormatValidator","","ActiveModel/Validations/FormatValidator.html","",""],["ActiveModel::Validations::HelperMethods","","ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validations::InclusionValidator","","ActiveModel/Validations/InclusionValidator.html","",""],["ActiveModel::Validations::LengthValidator","","ActiveModel/Validations/LengthValidator.html","",""],["ActiveModel::Validations::NumericalityValidator","","ActiveModel/Validations/NumericalityValidator.html","",""],["ActiveModel::Validations::PresenceValidator","","ActiveModel/Validations/PresenceValidator.html","",""],["ActiveModel::Validations::WithValidator","","ActiveModel/Validations/WithValidator.html","",""],["ActiveModel::Validator","","ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["!~","ActiveModel::Name","ActiveModel/Name.html#method-i-21-7E","","<p>Equivalent to <code>String#!~</code>. Match the class name against the\ngiven regexp. Returns <code>true</code> if there is no match, …\n"],["<=>","ActiveModel::Name","ActiveModel/Name.html#method-i-3C-3D-3E","","<p>Equivalent to <code>String#&lt;=&gt;</code>.\n\n<pre>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name &lt;=&gt; ...</pre>\n"],["==","ActiveModel::Name","ActiveModel/Name.html#method-i-3D-3D","","<p>Equivalent to <code>String#==</code>. Returns <code>true</code> if the\nclass name and <code>other</code> are equal, otherwise <code>false</code>.\n\n<pre>class BlogPost ...</pre>\n"],["==","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-3D-3D","(other)",""],["===","ActiveModel::Name","ActiveModel/Name.html#method-i-3D-3D-3D","","<p>Equivalent to <code>#==</code>.\n\n<pre>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name === &#39;BlogPost&#39; ...</pre>\n"],["=~","ActiveModel::Name","ActiveModel/Name.html#method-i-3D-7E","","<p>Equivalent to <code>String#=~</code>. Match the class name against the\ngiven regexp. Returns the position where the …\n"],["[]","ActiveModel::Errors","ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre>person.errors[:name] ...</pre>\n"],["[]=","ActiveModel::Errors","ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre>person.errors[:name] = &quot;must be set&quot;\nperson.errors[:name] ...</pre>\n"],["_assign_attribute","ActiveModel::AttributeAssignment","ActiveModel/AttributeAssignment.html#method-i-_assign_attribute","(k, v)",""],["_assign_attributes","ActiveModel::AttributeAssignment","ActiveModel/AttributeAssignment.html#method-i-_assign_attributes","(attributes)",""],["_singularize","ActiveModel::Name","ActiveModel/Name.html#method-i-_singularize","(string)",""],["add","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add","(attribute, message = :invalid, options = {})","<p>Adds <code>message</code> to the error messages and used validator type to\n<code>details</code> on <code>attribute</code>. More than one error …\n"],["add_on_blank","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n\n<pre>person.errors.add_on_empty(:name) ...</pre>\n"],["added?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-added-3F","(attribute, message = :invalid, options = {})","<p>Returns <code>true</code> if an error on the attribute with the given\nmessage is present, or <code>false</code> otherwise. <code>message</code> …\n"],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)","<p>Defines a callback that will get called right after validation happens.\n\n<pre>class Person\n  include ActiveModel::Validations ...</pre>\n"],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes.\n\n<pre>class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor ...</pre>\n"],["apply_default_array","ActiveModel::Errors","ActiveModel/Errors.html#method-i-apply_default_array","(hash)",""],["as_json","ActiveModel::Errors","ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns a Hash that can be used as the JSON representation for this object.\nYou can pass the <code>:full_messages</code> …\n"],["as_json","ActiveModel::Serializers::JSON","ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a hash representing the model. Some configuration can be passed\nthrough <code>options</code>.\n<p>The option <code>include_root_in_json</code> …\n"],["assert_boolean","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-assert_boolean","(result, name)",""],["assert_valid_value","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-assert_valid_value","(*)",""],["assign_attributes","ActiveModel::AttributeAssignment","ActiveModel/AttributeAssignment.html#method-i-assign_attributes","(new_attributes)","<p>Allows you to set all the attributes by passing in a hash of attributes\nwith keys matching the attribute …\n"],["attribute_alias","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_alias","(name)","<p>Returns the original name for the alias <code>name</code>\n"],["attribute_alias?","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_alias-3F","(new_name)","<p>Is <code>new_name</code> an alias?\n"],["attribute_change","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-attribute_change","(attr)","<p>Handles <code>*_change</code> for <code>method_missing</code>.\n"],["attribute_changed_by_setter?","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-attribute_changed_by_setter-3F","(attr_name)",""],["attribute_method?","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method,\n<code>false</code> otherwise.\n\n<pre>class Person\n  include ActiveModel::Validations ...</pre>\n"],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes)","<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],["attribute_missing","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-attribute_missing","(match, *args, &block)","<p><code>attribute_missing</code> is like <code>method_missing</code>, but for\nattributes. When <code>method_missing</code> is called we check …\n"],["attribute_previous_change","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-attribute_previous_change","(attr)","<p>Handles <code>*_previous_change</code> for <code>method_missing</code>.\n"],["attribute_will_change!","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-attribute_will_change-21","(attr)","<p>Handles <code>*_will_change!</code> for <code>method_missing</code>.\n"],["attributes_changed_by_setter","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-attributes_changed_by_setter","()","<p>This is necessary because `changed_attributes` might be overridden in other\nimplementations (e.g. in …\n"],["authenticate","ActiveModel::SecurePassword::InstanceMethodsOnActivation","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-authenticate","(unencrypted_password)","<p>Returns <code>self</code> if the password is correct, otherwise\n<code>false</code>.\n\n<pre>class User &lt; ActiveRecord::Base\n  has_secure_password ...</pre>\n"],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)","<p>Defines a callback that will get called right before validation happens.\n\n<pre>class Person\n  include ActiveModel::Validations ...</pre>\n"],["blank?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-blank-3F","()",""],["cast","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-cast","(value)","<p>Type casts a value from user input (e.g. from a setter). This value may be\na string from the form builder, …\n"],["cast_value","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-cast_value","(value)","<p>Convenience method for types which do not need separate type casting\nbehavior for user and database inputs. …\n"],["changed","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed","()","<p>Returns an array with the name of the attributes with unsaved changes.\n\n<pre>person.changed # =&gt; []\nperson.name ...</pre>\n"],["changed?","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns <code>true</code> if any of the attributes have unsaved changes,\n<code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed?</span> <span class=\"ruby-comment\"># =&gt; false ...</span>\n</pre>\n"],["changed?","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-changed-3F","(old_value, new_value, _new_value_before_type_cast)","<p>Determines whether a value has changed for dirty checking.\n<code>old_value</code> and <code>new_value</code> will always be type-cast.\n…\n"],["changed_attributes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Returns a hash of the attributes with unsaved changes indicating their\noriginal values like <code>attr =&gt;</code> …\n"],["changed_in_place?","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-changed_in_place-3F","(raw_old_value, new_value)","<p>Determines whether the mutable value has been modified since it was read.\nReturns <code>false</code> by default.  …\n"],["changes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changes","()","<p>Returns a hash of changed attributes indicating their original and new\nvalues like <code>attr =&gt; [original</code> …\n"],["changes_applied","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changes_applied","()","<p>Removes current changes and makes them accessible through\n<code>previous_changes</code>.\n"],["changes_include?","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changes_include-3F","(attr_name)","<p>Returns <code>true</code> if attr_name is changed, <code>false</code>\notherwise.\n"],["clear","ActiveModel::Errors","ActiveModel/Errors.html#method-i-clear","()","<p>Clear the error messages.\n\n<pre>person.errors.full_messages # =&gt; [&quot;name cannot be nil&quot;]\nperson.errors.clear ...</pre>\n"],["clear_attribute_changes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-clear_attribute_changes","(attributes)","<p>Remove changes information for the provided attributes.\n"],["clear_changes_information","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-clear_changes_information","()","<p>Clears all dirty data: current changes and previous changes.\n"],["clear_validators!","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-clear_validators-21","()","<p>Clears all of the validators and validations.\n<p>Note that this will clear anything that is being used to …\n"],["convert_to_reader_name","ActiveModel::Validations::AcceptanceValidator::AttributeDefinition","ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html#method-i-convert_to_reader_name","(method_name)",""],["count","ActiveModel::Errors","ActiveModel/Errors.html#method-i-count","()",""],["define_attribute_method","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method","(attr_name)","<p>Declares an attribute that should be prefixed and suffixed by\n<code>ActiveModel::AttributeMethods</code>.\n<p>To use, pass …\n"],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(*attr_names)","<p>Declares the attributes that should be prefixed and suffixed by\n<code>ActiveModel::AttributeMethods</code>.\n<p>To use, …\n"],["define_model_callbacks","ActiveModel::Callbacks","ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options\n<code>define_callbacks</code> does, in case you want to overwrite …\n"],["define_on","ActiveModel::Validations::AcceptanceValidator::AttributeDefinition","ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html#method-i-define_on","(klass)",""],["delete","ActiveModel::Errors","ActiveModel/Errors.html#method-i-delete","(key)","<p>Delete messages for <code>key</code>. Returns the deleted messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>[:<span class=\"ruby-identifier\">name</span>]        <span class=\"ruby-comment\"># =&gt; [&quot;cannot be nil&quot;] ...</span>\n</pre>\n"],["deserialize","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-deserialize","(value)","<p>Converts a value from database input to the appropriate ruby type. The\nreturn value of this method will …\n"],["each","ActiveModel::Errors","ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["eager_load!","ActiveModel","ActiveModel.html#method-c-eager_load-21","()",""],["empty?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns <code>true</code> if no errors are found, <code>false</code>\notherwise. If the error message is a string it can be empty. …\n"],["eql?","ActiveModel::Name","ActiveModel/Name.html#method-i-eql-3F","","<p>Equivalent to <code>String#eql?</code>. Returns <code>true</code> if the\nclass name and <code>other</code> have the same length and content, …\n"],["eql?","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-eql-3F","(other)",""],["errors","ActiveModel::Validations","ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n\n<pre>class Person\n  include ...</pre>\n"],["from_json","ActiveModel::Serializers::JSON","ActiveModel/Serializers/JSON.html#method-i-from_json","(json, include_root=include_root_in_json)","<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre>class Person\n  include ActiveModel::Serializers::JSON ...</pre>\n"],["full_message","ActiveModel::Errors","ActiveModel/Errors.html#method-i-full_message","(attribute, message)","<p>Returns a full message for a given attribute.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">full_message</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&#39;is invalid&#39;</span>) <span class=\"ruby-comment\"># =&gt; &quot;Name ...</span>\n</pre>\n"],["full_messages","ActiveModel::Errors","ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre>class Person\n  validates_presence_of :name, :address, ...</pre>\n"],["full_messages_for","ActiveModel::Errors","ActiveModel/Errors.html#method-i-full_messages_for","(attribute)","<p>Returns all the full error messages for a given attribute in an array.\n\n<pre>class Person\n  validates_presence_of ...</pre>\n"],["gem_version","ActiveModel","ActiveModel.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Active Model as a\n<code>Gem::Version</code>\n"],["generate_message","ActiveModel::Errors","ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["get","ActiveModel::Errors","ActiveModel/Errors.html#method-i-get","(key)","<p>Get messages for <code>key</code>.\n\n<pre>person.errors.messages   # =&gt; {:name=&gt;[&quot;cannot be nil&quot;]}\nperson.errors.get(:name) ...</pre>\n"],["has_key?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-has_key-3F","(attribute)",""],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","(options = {})","<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],["hash","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-hash","()",""],["human","ActiveModel::Name","ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more human format, using I18n. By default,\nit will underscore then humanize …\n"],["human_attribute_name","ActiveModel::Translation","ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “first_name”. …\n"],["i18n_scope","ActiveModel::Translation","ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],["include?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-include-3F","(attribute)","<p>Returns <code>true</code> if the error messages include an error for the\ngiven key <code>attribute</code>, <code>false</code> otherwise.\n\n<pre>person.errors.messages ...</pre>\n"],["invalid?","ActiveModel::Validations","ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns <code>true</code> if\nerrors were added, <code>false</code> otherwise.\n\n<pre>class Person\n  include ...</pre>\n"],["key?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-key-3F","(attribute)",""],["keys","ActiveModel::Errors","ActiveModel/Errors.html#method-i-keys","()","<p>Returns all message keys.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">messages</span> <span class=\"ruby-comment\"># =&gt; {:name=&gt;[&quot;cannot be nil&quot;, &quot;must be specified&quot;]} ...</span>\n</pre>\n"],["kind","ActiveModel::Validator","ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">PresenceValidator</span>.<span class=\"ruby-identifier\">kind</span>   <span class=\"ruby-comment\"># =&gt; :presence</span>\n<span class=\"ruby-constant\">UniquenessValidator</span>.<span class=\"ruby-identifier\">kind</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["kind","ActiveModel::Validator","ActiveModel/Validator.html#method-i-kind","()","<p>Returns the kind for this validator.\n\n<pre>PresenceValidator.new.kind   # =&gt; :presence\nUniquenessValidator.new.kind ...</pre>\n"],["lookup_ancestors","ActiveModel::Translation","ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["marshal_dump","ActiveModel::Errors","ActiveModel/Errors.html#method-i-marshal_dump","()",""],["marshal_load","ActiveModel::Errors","ActiveModel/Errors.html#method-i-marshal_load","(array)",""],["matched_attribute_method","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-matched_attribute_method","(method_name)","<p>Returns a struct representing the matching attribute method. The\nstruct&#39;s attributes are prefix, …\n"],["matches?","ActiveModel::Validations::AcceptanceValidator::AttributeDefinition","ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html#method-i-matches-3F","(method_name)",""],["method_missing","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-method_missing","(method, *args, &block)","<p>Allows access to the object attributes, which are held in the hash returned\nby <code>attributes</code>, as though …\n"],["missing_attribute","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-missing_attribute","(attr_name, stack)",""],["model","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-model","()",""],["model_name","ActiveModel::Naming","ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["new","ActiveModel::Errors","ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre>class Person\n  def initialize\n    ...</pre>\n"],["new","ActiveModel::Model","ActiveModel/Model.html#method-c-new","(attributes={})","<p>Initializes a new model with the given <code>params</code>.\n\n<pre>class Person\n  include ActiveModel::Model\n  attr_accessor ...</pre>\n"],["new","ActiveModel::Name","ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil)","<p>Returns a new ActiveModel::Name instance. By default, the\n<code>namespace</code> and <code>name</code> option will take the namespace\n…\n"],["new","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-c-new","(precision: nil, limit: nil, scale: nil)",""],["new","ActiveModel::UnknownAttributeError","ActiveModel/UnknownAttributeError.html#method-c-new","(record, attribute)",""],["new","ActiveModel::ValidationError","ActiveModel/ValidationError.html#method-c-new","(model)",""],["new","ActiveModel::Validations::AcceptanceValidator::AttributeDefinition","ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html#method-c-new","(attributes)",""],["new","ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes","ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html#method-c-new","(attribute_definition)",""],["new","ActiveModel::Validator","ActiveModel/Validator.html#method-c-new","(options = {})","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["normalize_detail","ActiveModel::Errors","ActiveModel/Errors.html#method-i-normalize_detail","(message, options)",""],["normalize_message","ActiveModel::Errors","ActiveModel/Errors.html#method-i-normalize_message","(attribute, message, options)",""],["param_key","ActiveModel::Naming","ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it&#39;s inside …\n"],["password=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password-3D","(unencrypted_password)","<p>Encrypts the password into the <code>password_digest</code> attribute, only\nif the new password is not empty.\n\n<pre>class ...</pre>\n"],["password_confirmation=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password_confirmation-3D","(unencrypted_password)",""],["persisted?","ActiveModel::Model","ActiveModel/Model.html#method-i-persisted-3F","()","<p>Indicates if the model is persisted. Default is <code>false</code>.\n\n<pre>class Person\n  include ActiveModel::Model\n  attr_accessor ...</pre>\n"],["plural","ActiveModel::Naming","ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Naming</span>.<span class=\"ruby-identifier\">plural</span>(<span class=\"ruby-identifier\">post</span>)             <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["previous_changes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Returns a hash of attributes that were changed before the model was saved.\n\n<pre>person.name # =&gt; &quot;bob&quot;\nperson.name ...</pre>\n"],["previous_changes_include?","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-previous_changes_include-3F","(attr_name)","<p>Returns <code>true</code> if attr_name were changed before the model was\nsaved, <code>false</code> otherwise.\n"],["raise_validation_error","ActiveModel::Validations","ActiveModel/Validations.html#method-i-raise_validation_error","()",""],["register","ActiveModel::Type","ActiveModel/Type.html#method-c-register","(type_name, klass = nil, **options, &block)","<p>Add a new type to the registry, allowing it to be referenced as a symbol by\nActiveModel::Attributes::ClassMethods#attribute …\n"],["respond_to?","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to_without_attributes?","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A <code>Person</code> instance with a <code>name</code> attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code> …\n"],["restore_attribute!","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-restore_attribute-21","(attr)","<p>Handles <code>restore_*!</code> for <code>method_missing</code>.\n"],["restore_attributes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-restore_attributes","(attributes = changed)","<p>Restore all previous data of the provided attributes.\n"],["route_key","ActiveModel::Naming","ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["serializable_hash","ActiveModel::Serialization","ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)","<p>Returns a serialized hash of your object.\n\n<pre>class Person\n  include ActiveModel::Serialization\n\n  attr_accessor ...</pre>\n"],["serialize","ActiveModel::Type::Value","ActiveModel/Type/Value.html#method-i-serialize","(value)","<p>Casts a value from the ruby type to a type that the database knows how to\nunderstand. The returned value …\n"],["set","ActiveModel::Errors","ActiveModel/Errors.html#method-i-set","(key, value)","<p>Set messages for <code>key</code> to <code>value</code>.\n\n<pre>person.errors[:name] # =&gt; [&quot;cannot be nil&quot;]\nperson.errors.set(:name, [&quot;can&#39;t ...</pre>\n"],["set_attribute_was","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-set_attribute_was","(attr, old_value)","<p>Force an attribute to have a particular “before” value\n"],["singular","ActiveModel::Naming","ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Naming</span>.<span class=\"ruby-identifier\">singular</span>(<span class=\"ruby-identifier\">post</span>)             <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["singular_route_key","ActiveModel::Naming","ActiveModel/Naming.html#method-c-singular_route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["size","ActiveModel::Errors","ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre>person.errors.add(:name, :blank, message: &quot;can&#39;t be blank&quot;)\nperson.errors.size ...</pre>\n"],["test_errors_aref","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Passes if the object&#39;s model responds to <code>errors</code> and if\ncalling <code>[](attribute)</code> on the result of this …\n"],["test_model_naming","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Passes if the object&#39;s model responds to <code>model_name</code> both\nas an instance method and as a class method, …\n"],["test_persisted?","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Passes if the object&#39;s model responds to <code>persisted?</code> and if\ncalling this method returns either <code>true</code> …\n"],["test_to_key","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Passes if the object&#39;s model responds to <code>to_key</code> and if\ncalling this method returns <code>nil</code> when the object …\n"],["test_to_param","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Passes if the object&#39;s model responds to <code>to_param</code> and if\ncalling this method returns <code>nil</code> when the …\n"],["test_to_partial_path","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_to_partial_path","()","<p>Passes if the object&#39;s model responds to <code>to_partial_path</code>\nand if calling this method returns a string. …\n"],["to_a","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_a","()",""],["to_hash","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_hash","(full_messages = false)","<p>Returns a Hash of attributes with their error messages. If\n<code>full_messages</code> is <code>true</code>, it will contain full …\n"],["to_key","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Array of all key attributes if any of the attributes is set,\nwhether or not the object is …\n"],["to_model","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],["to_param","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a <code>string</code> representing the object&#39;s key suitable\nfor use in URLs, or <code>nil</code> if <code>persisted?</code> is …\n"],["to_partial_path","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_partial_path","()","<p>Returns a <code>string</code> identifying the path associated with the\nobject. ActionPack uses this to find a suitable …\n"],["to_s","ActiveModel::Name","ActiveModel/Name.html#method-i-to_s","","<p>Returns the class name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">BlogPost</span>\n  <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Naming</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-constant\">BlogPost</span>.<span class=\"ruby-identifier\">model_name</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_str","ActiveModel::Name","ActiveModel/Name.html#method-i-to_str","","<p>Equivalent to <code>to_s</code>.\n"],["to_xml","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre>person.errors.add(:name, :blank, message: ...</pre>\n"],["uncountable?","ActiveModel::Naming","ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\n\n<pre>ActiveModel::Naming.uncountable?(Sheep) ...</pre>\n"],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class.\n\n<pre>class Person\n  include ActiveModel::AttributeMethods ...</pre>\n"],["valid?","ActiveModel::Validations","ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns <code>true</code> if no\nerrors were added otherwise <code>false</code>.\n<p>Aliased as …\n"],["validate","ActiveModel::Validations","ActiveModel/Validations.html#method-i-validate","(context = nil)",""],["validate","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validator","ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validate!","ActiveModel::Validations","ActiveModel/Validations.html#method-i-validate-21","(context = nil)","<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, raises\n<code>ValidationError</code> …\n"],["validates","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in &#39;Validator&#39;. …\n"],["validates!","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates-21","(*attributes)","<p>This method is used to define validations that cannot be corrected by end\nusers and are considered exceptional. …\n"],["validates_absence_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_absence_of","(*attr_names)","<p>Validates that the specified attributes are blank (as defined by\nObject#blank?). Happens by default on …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre>class Person\n  include ActiveModel::Validations\n\n  attr_accessor ...</pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre>class Person ...</pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attributes match the length restrictions\nsupplied. Only one constraint option …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_with","ActiveModel::Validations","ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validators","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n\n<pre>class Person ...</pre>\n"],["validators_on","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that are being used to validate a specific attribute.\n\n<pre>class Person\n  include ActiveModel::Validations ...</pre>\n"],["values","ActiveModel::Errors","ActiveModel/Errors.html#method-i-values","()","<p>Returns all message values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">messages</span> <span class=\"ruby-comment\"># =&gt; {:name=&gt;[&quot;cannot be nil&quot;, &quot;must be specified&quot;]} ...</span>\n</pre>\n"],["version","ActiveModel","ActiveModel.html#method-c-version","()","<p>Returns the version of the currently loaded Active Model as a\n<code>Gem::Version</code>\n"],["without_default_proc","ActiveModel::Errors","ActiveModel/Errors.html#method-i-without_default_proc","(hash)",""]]}}