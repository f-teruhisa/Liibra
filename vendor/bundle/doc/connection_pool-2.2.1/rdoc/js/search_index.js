var search_data = {"index":{"searchIndex":["connectionpool","error","poolshuttingdownerror","process","timedstack","wrapper","<<()","checkin()","checkout()","connection_stored?()","empty?()","fetch_connection()","get_time()","length()","method_missing()","monotonic_time()","new()","new()","new()","pool_shutdown()","pop()","pop_connection()","push()","respond_to?()","shutdown()","shutdown()","shutdown_connections()","stack()","store_connection()","try_create()","with()","with()","wrap()"],"longSearchIndex":["connectionpool","connectionpool::error","connectionpool::poolshuttingdownerror","connectionpool::process","connectionpool::timedstack","connectionpool::wrapper","connectionpool::timedstack#<<()","connectionpool#checkin()","connectionpool#checkout()","connectionpool::timedstack#connection_stored?()","connectionpool::timedstack#empty?()","connectionpool::timedstack#fetch_connection()","connectionpool#get_time()","connectionpool::timedstack#length()","connectionpool::wrapper#method_missing()","connectionpool::monotonic_time()","connectionpool::new()","connectionpool::timedstack::new()","connectionpool::wrapper::new()","connectionpool::wrapper#pool_shutdown()","connectionpool::timedstack#pop()","connectionpool#pop_connection()","connectionpool::timedstack#push()","connectionpool::wrapper#respond_to?()","connectionpool#shutdown()","connectionpool::timedstack#shutdown()","connectionpool::timedstack#shutdown_connections()","connectionpool#stack()","connectionpool::timedstack#store_connection()","connectionpool::timedstack#try_create()","connectionpool#with()","connectionpool::wrapper#with()","connectionpool::wrap()"],"info":[["ConnectionPool","","ConnectionPool.html","","<p>Generic connection pool class for e.g. sharing a limited number of network\nconnections among many threads. …\n"],["ConnectionPool::Error","","ConnectionPool/Error.html","",""],["ConnectionPool::PoolShuttingDownError","","ConnectionPool/PoolShuttingDownError.html","","<p>Raised when you attempt to retrieve a connection from a pool that has been\nshut down.\n"],["ConnectionPool::Process","","ConnectionPool/Process.html","",""],["ConnectionPool::TimedStack","","ConnectionPool/TimedStack.html","","<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ts</span> = <span class=\"ruby-constant\">TimedStack</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>) { <span class=\"ruby-constant\">MyConnection</span>.<span class=\"ruby-identifier\">new</span> }\n\n<span class=\"ruby-comment\"># fetch a connection</span>\n<span class=\"ruby-identifier\">conn</span> = <span class=\"ruby-identifier\">ts</span>.<span class=\"ruby-identifier\">pop</span>\n\n<span class=\"ruby-comment\"># return a ...</span>\n</pre>\n"],["ConnectionPool::Wrapper","","ConnectionPool/Wrapper.html","",""],["<<","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-3C-3C","(obj, options = {})",""],["checkin","ConnectionPool","ConnectionPool.html#method-i-checkin","()",""],["checkout","ConnectionPool","ConnectionPool.html#method-i-checkout","(options = {})",""],["connection_stored?","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-connection_stored-3F","(options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must returns true if …\n"],["empty?","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no available connections.\n"],["fetch_connection","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-fetch_connection","(options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must return a connection …\n"],["get_time","ConnectionPool","ConnectionPool.html#method-i-get_time","()","<p>@!visibility private\n"],["length","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-length","()","<p>The number of connections available on the stack.\n"],["method_missing","ConnectionPool::Wrapper","ConnectionPool/Wrapper.html#method-i-method_missing","(name, *args, &block)",""],["monotonic_time","ConnectionPool","ConnectionPool.html#method-c-monotonic_time","()","<p>Returns the current time a tracked by the application monotonic clock.\n<p>@return [Float] The current monotonic …\n"],["new","ConnectionPool","ConnectionPool.html#method-c-new","(options = {}, &block)",""],["new","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-c-new","(size = 0, &block)","<p>Creates a new pool with <code>size</code> connections that are created from\nthe given <code>block</code>.\n"],["new","ConnectionPool::Wrapper","ConnectionPool/Wrapper.html#method-c-new","(options = {}, &block)",""],["pool_shutdown","ConnectionPool::Wrapper","ConnectionPool/Wrapper.html#method-i-pool_shutdown","(&block)",""],["pop","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-pop","(timeout = 0.5, options = {})","<p>Retrieves a connection from the stack.  If a connection is available it is\nimmediately returned.  If …\n"],["pop_connection","ConnectionPool","ConnectionPool.html#method-i-pop_connection","()",""],["push","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-push","(obj, options = {})","<p>Returns <code>obj</code> to the stack.  <code>options</code> is ignored in\nTimedStack but may be used by subclasses that extend …\n"],["respond_to?","ConnectionPool::Wrapper","ConnectionPool/Wrapper.html#method-i-respond_to-3F","(id, *args)",""],["shutdown","ConnectionPool","ConnectionPool.html#method-i-shutdown","(&block)",""],["shutdown","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-shutdown","(&block)","<p>Shuts down the TimedStack which prevents connections from being checked\nout.  The <code>block</code> is called once …\n"],["shutdown_connections","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-shutdown_connections","(options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must shut down all connections …\n"],["stack","ConnectionPool","ConnectionPool.html#method-i-stack","()",""],["store_connection","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-store_connection","(obj, options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must return <code>obj</code> to the …\n"],["try_create","ConnectionPool::TimedStack","ConnectionPool/TimedStack.html#method-i-try_create","(options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must create a connection …\n"],["with","ConnectionPool","ConnectionPool.html#method-i-with","(options = {})","<p>MRI\n"],["with","ConnectionPool::Wrapper","ConnectionPool/Wrapper.html#method-i-with","(&block)",""],["wrap","ConnectionPool","ConnectionPool.html#method-c-wrap","(options, &block)",""]]}}