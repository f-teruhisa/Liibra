var search_data = {"index":{"searchIndex":["net","http","persistent","connection","error","pool","timedstackmulti","ca_file=()","ca_path=()","can_retry?()","cert=()","cert_store=()","certificate=()","ciphers=()","connection_for()","detect_idle_timeout()","error_message()","escape()","expired?()","finish()","http_version()","idempotent?()","key=()","new()","normalize_uri()","pipeline()","private_key=()","proxy=()","proxy_bypass?()","proxy_from_env()","reconnect()","reconnect_ssl()","request()","reset()","shutdown()","ssl()","ssl_timeout=()","ssl_version=()","start()","unescape()","verify_callback=()","verify_depth=()","verify_mode=()","history","manifest","readme"],"longSearchIndex":["net","net::http","net::http::persistent","net::http::persistent::connection","net::http::persistent::error","net::http::persistent::pool","net::http::persistent::timedstackmulti","net::http::persistent#ca_file=()","net::http::persistent#ca_path=()","net::http::persistent#can_retry?()","net::http::persistent#cert=()","net::http::persistent#cert_store=()","net::http::persistent#certificate=()","net::http::persistent#ciphers=()","net::http::persistent#connection_for()","net::http::persistent::detect_idle_timeout()","net::http::persistent#error_message()","net::http::persistent#escape()","net::http::persistent#expired?()","net::http::persistent#finish()","net::http::persistent#http_version()","net::http::persistent#idempotent?()","net::http::persistent#key=()","net::http::persistent::new()","net::http::persistent#normalize_uri()","net::http::persistent#pipeline()","net::http::persistent#private_key=()","net::http::persistent#proxy=()","net::http::persistent#proxy_bypass?()","net::http::persistent#proxy_from_env()","net::http::persistent#reconnect()","net::http::persistent#reconnect_ssl()","net::http::persistent#request()","net::http::persistent#reset()","net::http::persistent#shutdown()","net::http::persistent#ssl()","net::http::persistent#ssl_timeout=()","net::http::persistent#ssl_version=()","net::http::persistent#start()","net::http::persistent#unescape()","net::http::persistent#verify_callback=()","net::http::persistent#verify_depth=()","net::http::persistent#verify_mode=()","","",""],"info":[["Net","","Net.html","",""],["Net::HTTP","","Net/HTTP.html","",""],["Net::HTTP::Persistent","","Net/HTTP/Persistent.html","","<p>Persistent connections for Net::HTTP\n<p>Net::HTTP::Persistent maintains persistent connections across all …\n"],["Net::HTTP::Persistent::Connection","","Net/HTTP/Persistent/Connection.html","",""],["Net::HTTP::Persistent::Error","","Net/HTTP/Persistent/Error.html","","<p>Error class for errors raised by Net::HTTP::Persistent.  Various\nSystemCallErrors are re-raised with …\n"],["Net::HTTP::Persistent::Pool","","Net/HTTP/Persistent/Pool.html","",""],["Net::HTTP::Persistent::TimedStackMulti","","Net/HTTP/Persistent/TimedStackMulti.html","",""],["ca_file=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ca_file-3D","(file)","<p>Sets the SSL certificate authority file.\n"],["ca_path=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ca_path-3D","(path)","<p>Sets the SSL certificate authority path.\n"],["can_retry?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-can_retry-3F","(req)","<p>Is the request <code>req</code> idempotent or is retry_change_requests\nallowed.\n"],["cert=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-cert-3D","(certificate)","<p>For Net::HTTP parity\n"],["cert_store=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-cert_store-3D","(store)","<p>Overrides the default SSL certificate store used for verifying connections.\n"],["certificate=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-certificate-3D","(certificate)","<p>Sets this client&#39;s OpenSSL::X509::Certificate\n"],["ciphers=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ciphers-3D","(ciphers)","<p>The ciphers allowed for SSL connections\n"],["connection_for","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-connection_for","(uri)","<p>Creates a new connection for <code>uri</code>\n"],["detect_idle_timeout","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-c-detect_idle_timeout","(uri, max = 10)","<p>Use this method to detect the idle timeout of the host at <code>uri</code>.\nThe value returned can be used to configure …\n"],["error_message","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-error_message","(connection)","<p>Returns an error message containing the number of requests performed on\nthis connection\n"],["escape","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-escape","(str)","<p>URI::escape wrapper\n"],["expired?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-expired-3F","(connection)","<p>Returns true if the connection should be reset due to an idle timeout, or\nmaximum request count, false …\n"],["finish","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-finish","(connection)","<p>Finishes the Net::HTTP <code>connection</code>\n"],["http_version","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-http_version","(uri)","<p>Returns the HTTP protocol version for <code>uri</code>\n"],["idempotent?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-idempotent-3F","(req)","<p>Is <code>req</code> idempotent according to RFC 2616?\n"],["key=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-key-3D","(key)","<p>For Net::HTTP parity\n"],["new","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-c-new","(name: nil, proxy: nil, pool_size: DEFAULT_POOL_SIZE)","<p>Creates a new Net::HTTP::Persistent.\n<p>Set <code>name</code> to keep your connections apart from everybody\nelse&#39;s. …\n"],["normalize_uri","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-normalize_uri","(uri)","<p>Adds “http://” to the String <code>uri</code> if it is missing.\n"],["pipeline","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-pipeline","(uri, requests, &block)","<p>Pipelines <code>requests</code> to the HTTP server at <code>uri</code>\nyielding responses if a block is given.  Returns all responses …\n"],["private_key=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-private_key-3D","(key)","<p>Sets this client&#39;s SSL private key\n"],["proxy=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-proxy-3D","(proxy)","<p>Sets the proxy server.  The <code>proxy</code> may be the URI of the proxy\nserver, the symbol <code>:ENV</code> which will read …\n"],["proxy_bypass?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-proxy_bypass-3F","(host, port)","<p>Returns true when proxy should by bypassed for host.\n"],["proxy_from_env","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-proxy_from_env","()","<p>Creates a URI for an HTTP proxy server from ENV variables.\n<p>If <code>HTTP_PROXY</code> is set a proxy will be returned. …\n"],["reconnect","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-reconnect","()","<p>Forces reconnection of HTTP connections.\n"],["reconnect_ssl","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-reconnect_ssl","()","<p>Forces reconnection of SSL connections.\n"],["request","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-request","(uri, req = nil, &block)","<p>Makes a request on <code>uri</code>.  If <code>req</code> is nil a\nNet::HTTP::Get is performed against <code>uri</code>.\n<p>If a block is passed …\n"],["reset","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-reset","(connection)","<p>Finishes then restarts the Net::HTTP <code>connection</code>\n"],["shutdown","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-shutdown","()","<p>Shuts down all connections\n<p><strong>NOTE</strong>: Calling shutdown for can be dangerous!\n<p>If any thread is still using a …\n"],["ssl","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ssl","(connection)","<p>Enables SSL on <code>connection</code>\n"],["ssl_timeout=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ssl_timeout-3D","(ssl_timeout)","<p>SSL session lifetime\n"],["ssl_version=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ssl_version-3D","(ssl_version)","<p>SSL version to use\n"],["start","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-start","(http)","<p>Starts the Net::HTTP <code>connection</code>\n"],["unescape","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-unescape","(str)","<p>URI::unescape wrapper\n"],["verify_callback=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-verify_callback-3D","(callback)","<p>SSL verification callback.\n"],["verify_depth=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-verify_depth-3D","(verify_depth)","<p>Sets the depth of SSL certificate verification\n"],["verify_mode=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-verify_mode-3D","(verify_mode)","<p>Sets the HTTPS verify mode.  Defaults to OpenSSL::SSL::VERIFY_PEER.\n<p>Setting this to VERIFY_NONE is a  …\n"],["History","","History_txt.html","","<p>3.0\n<p>Breaking changes:\n<p>No longer supports ruby 2.0 and earlier\n"],["Manifest","","Manifest_txt.html","","<p>.autotest .gemtest .travis.yml History.txt Manifest.txt README.rdoc\nRakefile lib/net/http/persistent.rb …\n"],["README","","README_rdoc.html","","<p>net-http-persistent\n<p>docs.seattlerb.org/net-http-persistent\n<p>github.com/drbrain/net-http-persistent\n"]]}}