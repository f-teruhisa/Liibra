var search_data = {"index":{"searchIndex":["actiondispatch","debugexceptions","exception","kernel","object","webconsole","activesupport","context","evaluator","exceptionmapper","middleware","railtie","request","getsecureip","mime","response","session","template","testing","erbprecompiler","fakemiddleware","helper","view","whinyrequest","whitelist","[]()","acceptable?()","acceptable_content_type?()","binding_change_re()","bindings()","build()","call()","call()","call_app()","caller_bindings()","change_stack_trace()","coerce_network_to_ipaddr()","console()","context()","create_regular_or_whiny_request()","eval()","eval()","eval()","extract()","filter_proxies()","find()","finish()","first()","format_exception()","from()","from_whitelisted_ip?()","from_whitelisted_ip?()","gem_root()","global()","guess_binding_for_index()","guess_the_first_application_binding()","human_readable_ipaddr()","id_for_repl_session_stack_frame_change()","id_for_repl_session_update()","include?()","json_response()","json_response_with_session()","local()","logger()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize_networks()","only_on_error_page()","raise_exception_with_current_bindings()","render()","render()","render()","render_exception()","render_exception_with_web_console()","render_exception_without_web_console()","render_inlined_string()","render_javascript()","repl_sessions_re()","req_path()","request()","respond_with_unacceptable_request()","respond_with_unavailable_session()","store_into_memory()","strict_remote_ip()","switch_binding_to()","t()","to_s()","update_re()","update_repl_session()","view()","whine_unless()","write()","extensions.rake","templates.rake"],"longSearchIndex":["actiondispatch","actiondispatch::debugexceptions","exception","kernel","object","webconsole","webconsole::activesupport","webconsole::context","webconsole::evaluator","webconsole::exceptionmapper","webconsole::middleware","webconsole::railtie","webconsole::request","webconsole::request::getsecureip","webconsole::request::mime","webconsole::response","webconsole::session","webconsole::template","webconsole::testing","webconsole::testing::erbprecompiler","webconsole::testing::fakemiddleware","webconsole::testing::helper","webconsole::view","webconsole::whinyrequest","webconsole::whitelist","webconsole::exceptionmapper#[]()","webconsole::request#acceptable?()","webconsole::middleware#acceptable_content_type?()","webconsole::middleware#binding_change_re()","exception#bindings()","webconsole::testing::erbprecompiler#build()","webconsole::middleware#call()","webconsole::testing::fakemiddleware#call()","webconsole::middleware#call_app()","webconsole::caller_bindings()","webconsole::middleware#change_stack_trace()","webconsole::whitelist#coerce_network_to_ipaddr()","kernel#console()","webconsole::session#context()","webconsole::middleware#create_regular_or_whiny_request()","webconsole::context#eval()","webconsole::evaluator#eval()","webconsole::session#eval()","webconsole::context#extract()","webconsole::request::getsecureip#filter_proxies()","webconsole::session::find()","webconsole::response#finish()","webconsole::exceptionmapper#first()","webconsole::evaluator#format_exception()","webconsole::session::from()","webconsole::request#from_whitelisted_ip?()","webconsole::whinyrequest#from_whitelisted_ip?()","webconsole::testing::helper::gem_root()","webconsole::context#global()","webconsole::exceptionmapper#guess_binding_for_index()","webconsole::exceptionmapper#guess_the_first_application_binding()","webconsole::whitelist#human_readable_ipaddr()","webconsole::middleware#id_for_repl_session_stack_frame_change()","webconsole::middleware#id_for_repl_session_update()","webconsole::whitelist#include?()","webconsole::middleware#json_response()","webconsole::middleware#json_response_with_session()","webconsole::context#local()","webconsole::whinyrequest#logger()","webconsole::testing::erbprecompiler#method_missing()","webconsole::context::new()","webconsole::evaluator::new()","webconsole::exceptionmapper::new()","webconsole::middleware::new()","webconsole::request::getsecureip::new()","webconsole::session::new()","webconsole::template::new()","webconsole::testing::erbprecompiler::new()","webconsole::testing::fakemiddleware::new()","webconsole::whitelist::new()","webconsole::whitelist#normalize_networks()","webconsole::view#only_on_error_page()","object#raise_exception_with_current_bindings()","webconsole::template#render()","webconsole::testing::fakemiddleware#render()","webconsole::view#render()","actiondispatch::debugexceptions#render_exception()","actiondispatch::debugexceptions#render_exception_with_web_console()","actiondispatch::debugexceptions#render_exception_without_web_console()","webconsole::view#render_inlined_string()","webconsole::view#render_javascript()","webconsole::middleware#repl_sessions_re()","webconsole::testing::fakemiddleware#req_path()","webconsole::whinyrequest#request()","webconsole::middleware#respond_with_unacceptable_request()","webconsole::middleware#respond_with_unavailable_session()","webconsole::session#store_into_memory()","webconsole::request#strict_remote_ip()","webconsole::session#switch_binding_to()","webconsole::view#t()","webconsole::whitelist#to_s()","webconsole::middleware#update_re()","webconsole::middleware#update_repl_session()","webconsole::testing::fakemiddleware#view()","webconsole::whinyrequest#whine_unless()","webconsole::response#write()","",""],"info":[["ActionDispatch","","ActionDispatch.html","",""],["ActionDispatch::DebugExceptions","","ActionDispatch/DebugExceptions.html","",""],["Exception","","Exception.html","",""],["Kernel","","Kernel.html","",""],["Object","","Object.html","",""],["WebConsole","","WebConsole.html","","<p>Prevent a `method redefined; discarding old caller_bindings` warning.\n"],["WebConsole::ActiveSupport","","WebConsole/ActiveSupport.html","",""],["WebConsole::Context","","WebConsole/Context.html","","<p>A context lets you get object names related to the current session binding.\n"],["WebConsole::Evaluator","","WebConsole/Evaluator.html","","<p>Simple Ruby code evaluator.\n<p>This class wraps a <code>Binding</code> object and evaluates code inside of\nit. The difference …\n"],["WebConsole::ExceptionMapper","","WebConsole/ExceptionMapper.html","",""],["WebConsole::Middleware","","WebConsole/Middleware.html","",""],["WebConsole::Railtie","","WebConsole/Railtie.html","",""],["WebConsole::Request","","WebConsole/Request.html","","<p>Web Console tailored request object.\n"],["WebConsole::Request::GetSecureIp","","WebConsole/Request/GetSecureIp.html","",""],["WebConsole::Request::Mime","","WebConsole/Request/Mime.html","",""],["WebConsole::Response","","WebConsole/Response.html","","<p>A response object that writes content before the closing &lt;/body&gt; tag,\nif possible.\n<p>The object quacks …\n"],["WebConsole::Session","","WebConsole/Session.html","","<p>A session lets you persist an <code>Evaluator</code> instance in memory\nassociated with multiple bindings.\n<p>Each newly …\n"],["WebConsole::Template","","WebConsole/Template.html","","<p>A facade that handles template rendering and composition.\n<p>It introduces template helpers to ease the inclusion …\n"],["WebConsole::Testing","","WebConsole/Testing.html","",""],["WebConsole::Testing::ERBPrecompiler","","WebConsole/Testing/ERBPrecompiler.html","","<p>This class is to pre-compile &#39;templates/*.erb&#39;.\n"],["WebConsole::Testing::FakeMiddleware","","WebConsole/Testing/FakeMiddleware.html","",""],["WebConsole::Testing::Helper","","WebConsole/Testing/Helper.html","",""],["WebConsole::View","","WebConsole/View.html","",""],["WebConsole::WhinyRequest","","WebConsole/WhinyRequest.html","","<p>Noisy wrapper around <code>Request</code>.\n<p>If any calls to <code>from_whitelisted_ip?</code> and\n<code>acceptable_content_type?</code> return …\n"],["WebConsole::Whitelist","","WebConsole/Whitelist.html","","<p>Whitelist of allowed networks that can access Web Console.\n<p>Networks are represented by standard IPAddr …\n"],["[]","WebConsole::ExceptionMapper","WebConsole/ExceptionMapper.html#method-i-5B-5D","(index)",""],["acceptable?","WebConsole::Request","WebConsole/Request.html#method-i-acceptable-3F","()","<p>Returns whether the request is acceptable.\n"],["acceptable_content_type?","WebConsole::Middleware","WebConsole/Middleware.html#method-i-acceptable_content_type-3F","(headers)",""],["binding_change_re","WebConsole::Middleware","WebConsole/Middleware.html#method-i-binding_change_re","()",""],["bindings","Exception","Exception.html#method-i-bindings","()","<p>Returns an array of the exception backtrace locations bindings.\n<p>The list won&#39;t map to the traces in …\n"],["build","WebConsole::Testing::ERBPrecompiler","WebConsole/Testing/ERBPrecompiler.html#method-i-build","()",""],["call","WebConsole::Middleware","WebConsole/Middleware.html#method-i-call","(env)",""],["call","WebConsole::Testing::FakeMiddleware","WebConsole/Testing/FakeMiddleware.html#method-i-call","(env)",""],["call_app","WebConsole::Middleware","WebConsole/Middleware.html#method-i-call_app","(env)",""],["caller_bindings","WebConsole","WebConsole.html#method-c-caller_bindings","()","<p>Returns the Ruby bindings of Kernel#callers locations.\n<p>The list of bindings here doesn&#39;t map 1 to …\n"],["change_stack_trace","WebConsole::Middleware","WebConsole/Middleware.html#method-i-change_stack_trace","(id, request)",""],["coerce_network_to_ipaddr","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-coerce_network_to_ipaddr","(network)",""],["console","Kernel","Kernel.html#method-i-console","(binding = WebConsole.caller_bindings.first)","<p>Instructs Web Console to render a console in the specified binding.\n<p>If <code>bidning</code> isn&#39;t explicitly given …\n"],["context","WebConsole::Session","WebConsole/Session.html#method-i-context","(objpath)","<p>Returns context of the current binding\n"],["create_regular_or_whiny_request","WebConsole::Middleware","WebConsole/Middleware.html#method-i-create_regular_or_whiny_request","(env)",""],["eval","WebConsole::Context","WebConsole/Context.html#method-i-eval","(cmd)",""],["eval","WebConsole::Evaluator","WebConsole/Evaluator.html#method-i-eval","(input)",""],["eval","WebConsole::Session","WebConsole/Session.html#method-i-eval","(input)","<p>Evaluate <code>input</code> on the current Evaluator associated binding.\n<p>Returns a string of the Evaluator output. …\n"],["extract","WebConsole::Context","WebConsole/Context.html#method-i-extract","(input = nil)","<p>Extracts entire objects which can be called by the current session unless\nthe inputs is present.\n<p>Otherwise …\n"],["filter_proxies","WebConsole::Request::GetSecureIp","WebConsole/Request/GetSecureIp.html#method-i-filter_proxies","(ips)",""],["find","WebConsole::Session","WebConsole/Session.html#method-c-find","(id)","<p>Finds a persisted session in memory by its id.\n<p>Returns a persisted session if found in memory. Raises …\n"],["finish","WebConsole::Response","WebConsole/Response.html#method-i-finish","()",""],["first","WebConsole::ExceptionMapper","WebConsole/ExceptionMapper.html#method-i-first","()",""],["format_exception","WebConsole::Evaluator","WebConsole/Evaluator.html#method-i-format_exception","(exc)",""],["from","WebConsole::Session","WebConsole/Session.html#method-c-from","(storage)","<p>Create a Session from an binding or exception in a storage.\n<p>The storage is expected to respond to #[] …\n"],["from_whitelisted_ip?","WebConsole::Request","WebConsole/Request.html#method-i-from_whitelisted_ip-3F","()","<p>Returns whether a request came from a whitelisted IP.\n<p>For a request to hit Web Console features, it needs …\n"],["from_whitelisted_ip?","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-from_whitelisted_ip-3F","()",""],["gem_root","WebConsole::Testing::Helper","WebConsole/Testing/Helper.html#method-c-gem_root","()",""],["global","WebConsole::Context","WebConsole/Context.html#method-i-global","()",""],["guess_binding_for_index","WebConsole::ExceptionMapper","WebConsole/ExceptionMapper.html#method-i-guess_binding_for_index","(index)",""],["guess_the_first_application_binding","WebConsole::ExceptionMapper","WebConsole/ExceptionMapper.html#method-i-guess_the_first_application_binding","()",""],["human_readable_ipaddr","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-human_readable_ipaddr","(ipaddr)",""],["id_for_repl_session_stack_frame_change","WebConsole::Middleware","WebConsole/Middleware.html#method-i-id_for_repl_session_stack_frame_change","(request)",""],["id_for_repl_session_update","WebConsole::Middleware","WebConsole/Middleware.html#method-i-id_for_repl_session_update","(request)",""],["include?","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-include-3F","(network)",""],["json_response","WebConsole::Middleware","WebConsole/Middleware.html#method-i-json_response","(opts = {})",""],["json_response_with_session","WebConsole::Middleware","WebConsole/Middleware.html#method-i-json_response_with_session","(id, request, opts = {})",""],["local","WebConsole::Context","WebConsole/Context.html#method-i-local","(input)",""],["logger","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-logger","()",""],["method_missing","WebConsole::Testing::ERBPrecompiler","WebConsole/Testing/ERBPrecompiler.html#method-i-method_missing","(name, *args, &block)",""],["new","WebConsole::Context","WebConsole/Context.html#method-c-new","(binding)",""],["new","WebConsole::Evaluator","WebConsole/Evaluator.html#method-c-new","(binding = TOPLEVEL_BINDING)",""],["new","WebConsole::ExceptionMapper","WebConsole/ExceptionMapper.html#method-c-new","(exception)",""],["new","WebConsole::Middleware","WebConsole/Middleware.html#method-c-new","(app)",""],["new","WebConsole::Request::GetSecureIp","WebConsole/Request/GetSecureIp.html#method-c-new","(req, proxies)",""],["new","WebConsole::Session","WebConsole/Session.html#method-c-new","(bindings)",""],["new","WebConsole::Template","WebConsole/Template.html#method-c-new","(env, session)",""],["new","WebConsole::Testing::ERBPrecompiler","WebConsole/Testing/ERBPrecompiler.html#method-c-new","(path)",""],["new","WebConsole::Testing::FakeMiddleware","WebConsole/Testing/FakeMiddleware.html#method-c-new","(opts)",""],["new","WebConsole::Whitelist","WebConsole/Whitelist.html#method-c-new","(networks = nil)",""],["normalize_networks","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-normalize_networks","(networks)",""],["only_on_error_page","WebConsole::View","WebConsole/View.html#method-i-only_on_error_page","(*args)","<p>Execute a block only on error pages.\n<p>The error pages are special, because they are the only pages that …\n"],["raise_exception_with_current_bindings","Object","Object.html#method-i-raise_exception_with_current_bindings","(exc)",""],["render","WebConsole::Template","WebConsole/Template.html#method-i-render","(template)","<p>Render a template (inferred from <code>template_paths</code>) as a plain\nstring.\n"],["render","WebConsole::Testing::FakeMiddleware","WebConsole/Testing/FakeMiddleware.html#method-i-render","(template)",""],["render","WebConsole::View","WebConsole/View.html#method-i-render","(*)","<p>Custom ActionView::Base#render wrapper which silences all the log\nprintings.\n<p>Helps to keep the Rails logs …\n"],["render_exception","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-render_exception","(request, exception)",""],["render_exception_with_web_console","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-render_exception_with_web_console","(request, exception)",""],["render_exception_without_web_console","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-render_exception_without_web_console","(request, exception)",""],["render_inlined_string","WebConsole::View","WebConsole/View.html#method-i-render_inlined_string","(template)","<p>Render inlined string to be used inside of JavaScript code.\n<p>The inlined string is returned as an actual …\n"],["render_javascript","WebConsole::View","WebConsole/View.html#method-i-render_javascript","(template)","<p>Render JavaScript inside a script tag and a closure.\n<p>This one lets write JavaScript that will automatically …\n"],["repl_sessions_re","WebConsole::Middleware","WebConsole/Middleware.html#method-i-repl_sessions_re","()",""],["req_path","WebConsole::Testing::FakeMiddleware","WebConsole/Testing/FakeMiddleware.html#method-i-req_path","(env)","<p>extract target path from REQUEST_PATH\n"],["request","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-request","()",""],["respond_with_unacceptable_request","WebConsole::Middleware","WebConsole/Middleware.html#method-i-respond_with_unacceptable_request","()",""],["respond_with_unavailable_session","WebConsole::Middleware","WebConsole/Middleware.html#method-i-respond_with_unavailable_session","(id)",""],["store_into_memory","WebConsole::Session","WebConsole/Session.html#method-i-store_into_memory","()",""],["strict_remote_ip","WebConsole::Request","WebConsole/Request.html#method-i-strict_remote_ip","()","<p>Determines the remote IP using our much stricter whitelist.\n"],["switch_binding_to","WebConsole::Session","WebConsole/Session.html#method-i-switch_binding_to","(index)","<p>Switches the current binding to the one at specified <code>index</code>.\n<p>Returns nothing.\n"],["t","WebConsole::View","WebConsole/View.html#method-i-t","(key, options = {})","<p>Override method for ActionView::Helpers::TranslationHelper#t.\n<p>This method escapes the original return …\n"],["to_s","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-to_s","()",""],["update_re","WebConsole::Middleware","WebConsole/Middleware.html#method-i-update_re","()",""],["update_repl_session","WebConsole::Middleware","WebConsole/Middleware.html#method-i-update_repl_session","(id, request)",""],["view","WebConsole::Testing::FakeMiddleware","WebConsole/Testing/FakeMiddleware.html#method-i-view","()",""],["whine_unless","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-whine_unless","(condition)",""],["write","WebConsole::Response","WebConsole/Response.html#method-i-write","(content)",""],["extensions.rake","","lib/web_console/tasks/extensions_rake.html","","<p>namespace :ext do\n\n<pre>rootdir = Pathname(&#39;extensions&#39;)\n\ndesc &#39;Build Chrome Extension&#39;\ntask chrome: &#39;chrome:build&#39; ...</pre>\n"],["templates.rake","","lib/web_console/tasks/templates_rake.html","","<p>namespace :templates do\n\n<pre>desc &#39;Run tests for templates&#39;\ntask test: [ :daemonize, :npm, :rackup, :wait, ...</pre>\n"]]}}