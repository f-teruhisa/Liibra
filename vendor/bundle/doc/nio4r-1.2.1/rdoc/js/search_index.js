var search_data = {"index":{"searchIndex":["nio","monitor","selector","close()","close()","closed?()","closed?()","deregister()","empty?()","engine()","interests()","interests=()","io()","new()","new()","new()","new()","readable?()","readiness()","register()","registered?()","select()","selector()","value()","value=()","wakeup()","writable?()","writeable?()","changes","license","readme","readme.embed","makefile","nio4r.java"],"longSearchIndex":["nio","nio::monitor","nio::selector","nio::monitor#close()","nio::selector#close()","nio::monitor#closed?()","nio::selector#closed?()","nio::selector#deregister()","nio::selector#empty?()","nio::engine()","nio::monitor#interests()","nio::monitor#interests=()","nio::monitor#io()","nio::monitor::new()","nio::monitor::new()","nio::selector::new()","nio::selector::new()","nio::monitor#readable?()","nio::monitor#readiness()","nio::selector#register()","nio::selector#registered?()","nio::selector#select()","nio::monitor#selector()","nio::monitor#value()","nio::monitor#value=()","nio::selector#wakeup()","nio::monitor#writable?()","nio::monitor#writeable?()","","","","","",""],"info":[["NIO","","NIO.html","","<p>New I/O for Ruby\n<p>frozen_string_literal: true\n"],["NIO::Monitor","","NIO/Monitor.html","","<p>Monitors watch IO objects for specific events\n"],["NIO::Selector","","NIO/Selector.html","","<p>Selectors monitor IO objects for events of interest\n"],["close","NIO::Monitor","NIO/Monitor.html#method-i-close","(p1 = v1)",""],["close","NIO::Selector","NIO/Selector.html#method-i-close","()","<p>Close the selector and free system resources\n"],["closed?","NIO::Monitor","NIO/Monitor.html#method-i-closed-3F","()",""],["closed?","NIO::Selector","NIO/Selector.html#method-i-closed-3F","()","<p>Is the selector closed?\n"],["deregister","NIO::Selector","NIO/Selector.html#method-i-deregister","(p1)","<p>Deregister an IO object from the selector\n"],["empty?","NIO::Selector","NIO/Selector.html#method-i-empty-3F","()","<p>True if there are monitors on the loop\n"],["engine","NIO","NIO.html#method-c-engine","()","<p>NIO implementation, one of the following (as a string):\n<p>select: in pure Ruby using Kernel.select\n<p>libev: …\n"],["interests","NIO::Monitor","NIO/Monitor.html#method-i-interests","()",""],["interests=","NIO::Monitor","NIO/Monitor.html#method-i-interests-3D","(p1)",""],["io","NIO::Monitor","NIO/Monitor.html#method-i-io","()",""],["new","NIO::Monitor","NIO/Monitor.html#method-c-new","(io, interests, selector)","<p>:nodoc\n"],["new","NIO::Monitor","NIO/Monitor.html#method-c-new","(p1, p2, p3)",""],["new","NIO::Selector","NIO/Selector.html#method-c-new","()","<p>Create a new NIO::Selector\n"],["new","NIO::Selector","NIO/Selector.html#method-c-new","()","<p>Create a new selector. This is more or less the pure Ruby version\ntranslated into an MRI cext\n"],["readable?","NIO::Monitor","NIO/Monitor.html#method-i-readable-3F","()",""],["readiness","NIO::Monitor","NIO/Monitor.html#method-i-readiness","()",""],["register","NIO::Selector","NIO/Selector.html#method-i-register","(p1, p2)","<p>Register an IO object with the selector for the given interests\n"],["registered?","NIO::Selector","NIO/Selector.html#method-i-registered-3F","(p1)","<p>Is the given IO object registered with the selector\n"],["select","NIO::Selector","NIO/Selector.html#method-i-select","(p1 = v1)","<p>Select from all registered IO objects\n"],["selector","NIO::Monitor","NIO/Monitor.html#method-i-selector","()",""],["value","NIO::Monitor","NIO/Monitor.html#method-i-value","()",""],["value=","NIO::Monitor","NIO/Monitor.html#method-i-value-3D","(p1)",""],["wakeup","NIO::Selector","NIO/Selector.html#method-i-wakeup","()","<p>Wake the selector up from another thread\n"],["writable?","NIO::Monitor","NIO/Monitor.html#method-i-writable-3F","()",""],["writeable?","NIO::Monitor","NIO/Monitor.html#method-i-writeable-3F","()",""],["Changes","","ext/libev/Changes.html","","<p>Revision history for libev, a high-performance and full-featured event\nloop.\n<p>TODO: ev_loop_wakeup TODO: …\n"],["LICENSE","","ext/libev/LICENSE.html","","<p>All files in libev are Copyright ©2007,2008,2009,2010,2011,2012,2013 Marc\nAlexander Lehmann.\n<p>Redistribution …\n"],["README","","ext/libev/README.html","","<p>libev is a high-performance event loop/event model with lots of features.\n(see benchmark at libev.schmorp.de/bench.html …\n"],["README.embed","","ext/libev/README_embed.html","","<p>This file is now included in the main libev documentation, see\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span>:<span class=\"ruby-operator\">/</span><span class=\"ruby-regexp\">/cvs.schmorp.de/</span><span class=\"ruby-identifier\">libev</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">ev</span>.<span class=\"ruby-identifier\">html</span>\n</pre>\n"],["Makefile","","ext/nio4r/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don&#39;t work. V = 0 Q1 = $(V:1=)\nQ = $(Q1:0=@) …\n"],["Nio4r.java","","ext/nio4r/org/nio4r/Nio4r_java.html","","<p>package org.nio4r;\n<p>import java.util.Iterator; import java.util.Map; import java.util.HashMap;\nimport  …\n"]]}}